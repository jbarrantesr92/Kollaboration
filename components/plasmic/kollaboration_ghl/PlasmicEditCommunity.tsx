// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6nkmFbRpkCCeYJxNDNvxHP
// Component: R0-JhiNVdthk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSwitch } from "@plasmicpkgs/antd5/skinny/registerSwitch";
import Button from "../../Button"; // plasmic-import: f5aFEOq_jrMk/component
import DragAndDropUploader from "../../DragAndDropUploader"; // plasmic-import: 6HQmRPP3VFts/component
import TextInput from "../../TextInput"; // plasmic-import: 8UuapZzmVgHc/component
import DragAndDropFiles from "../../DragAndDropFiles"; // plasmic-import: whErWOxtSzQn/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6nkmFbRpkCCeYJxNDNvxHP/projectcss
import sty from "./PlasmicEditCommunity.module.css"; // plasmic-import: R0-JhiNVdthk/css

import CompassSvgIcon from "./icons/PlasmicIcon__CompassSvg"; // plasmic-import: Fmf9646b-oNB/icon
import Plus1SvgIcon from "./icons/PlasmicIcon__Plus1Svg"; // plasmic-import: jeMNj42KSlt-/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: dV_M4gggqVX-/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: -J2lXRM8ra-O/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: s_pbgKf5r6YF/icon

createPlasmicElementProxy;

export type PlasmicEditCommunity__VariantMembers = {};
export type PlasmicEditCommunity__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditCommunity__VariantsArgs;
export const PlasmicEditCommunity__VariantProps = new Array<VariantPropType>();

export type PlasmicEditCommunity__ArgsType = {};
type ArgPropType = keyof PlasmicEditCommunity__ArgsType;
export const PlasmicEditCommunity__ArgProps = new Array<ArgPropType>();

export type PlasmicEditCommunity__OverridesType = {
  root?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  textArea2?: Flex__<typeof AntdTextArea>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  priceSwitch?: Flex__<typeof AntdSwitch>;
  _switch?: Flex__<typeof AntdSwitch>;
  dragAndDropUploader?: Flex__<typeof DragAndDropUploader>;
  textInput?: Flex__<typeof TextInput>;
  dragAndDropFiles?: Flex__<typeof DragAndDropFiles>;
  textInput2?: Flex__<typeof TextInput>;
};

export interface DefaultEditCommunityProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditCommunity__RenderFunc(props: {
  variants: PlasmicEditCommunity__VariantsArgs;
  args: PlasmicEditCommunity__ArgsType;
  overrides: PlasmicEditCommunity__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "priceSwitch.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "_switch.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2[].value",
        type: "private",
        variableType: "text"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "hcB8E47YRDpisPZ3DSKShe",
        opId: "5c12305f-610c-4c74-b3d4-75b8ea73ff0f",
        userArgs: {
          path: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.5c12305f-610c-4c74-b3d4-75b8ea73ff0f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    files: usePlasmicDataOp(() => {
      return {
        sourceId: "hcB8E47YRDpisPZ3DSKShe",
        opId: "4c7b617d-a7ec-46bf-945f-c5b3179eb9a3",
        userArgs: {
          path: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.4c7b617d-a7ec-46bf-945f-c5b3179eb9a3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicEditCommunity.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicEditCommunity.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicEditCommunity.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__myoHd)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__syw7H)}
              onClick={async event => {
                const $steps = {};

                $steps["goToUserDashboard"] = true
                  ? (() => {
                      const actionArgs = { destination: `/user-dashboard` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToUserDashboard"] != null &&
                  typeof $steps["goToUserDashboard"] === "object" &&
                  typeof $steps["goToUserDashboard"].then === "function"
                ) {
                  $steps["goToUserDashboard"] = await $steps[
                    "goToUserDashboard"
                  ];
                }
              }}
            >
              <CompassSvgIcon
                className={classNames(projectcss.all, sty.svg__ilvYi)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ihZd5
                )}
              >
                {"My Communities"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__w1GCk)}
              onClick={async event => {
                const $steps = {};

                $steps["goToCreateCommunity"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToCreateCommunity"] != null &&
                  typeof $steps["goToCreateCommunity"] === "object" &&
                  typeof $steps["goToCreateCommunity"].then === "function"
                ) {
                  $steps["goToCreateCommunity"] = await $steps[
                    "goToCreateCommunity"
                  ];
                }
              }}
            >
              <Plus1SvgIcon
                className={classNames(projectcss.all, sty.svg__lDChV)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hCHp4
                )}
              >
                {"Create"}
              </div>
            </Stack__>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nsqLq
            )}
          >
            {"Edit Community"}
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange:
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ),
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onFinish: async values => {
                const $steps = {};

                $steps["httpPost"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "hcB8E47YRDpisPZ3DSKShe",
                          opId: "b4b983bc-0bb6-4051-b21a-af8dd04a0ba0",
                          userArgs: {
                            path: [$ctx.params.id],
                            body: [
                              $state.form.value.Title,
                              $state.form.value.ShortDescription,
                              $state.form.value.Description,
                              localStorage.getItem("uploadedFileId"),
                              $state.form.value.Price,
                              $state.form.value.Active
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: [],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["httpPost"] != null &&
                  typeof $steps["httpPost"] === "object" &&
                  typeof $steps["httpPost"].then === "function"
                ) {
                  $steps["httpPost"] = await $steps["httpPost"];
                }

                $steps["httpPost2"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "hcB8E47YRDpisPZ3DSKShe",
                          opId: "426f8975-ec34-46aa-b24a-0f9ca18aba11",
                          userArgs: {
                            body: [
                              (() => {
                                const uploadedFileIds = JSON.parse(
                                  localStorage.getItem("uploadedFileIds")
                                );
                                const result = Array.isArray(uploadedFileIds)
                                  ? uploadedFileIds.map(files => ({
                                      Communities_id:
                                        $steps.httpPost.data.response.data.id,
                                      directus_files_id: files
                                    }))
                                  : [];
                                return result;
                              })()
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: [],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["httpPost2"] != null &&
                  typeof $steps["httpPost2"] === "object" &&
                  typeof $steps["httpPost2"].then === "function"
                ) {
                  $steps["httpPost2"] = await $steps["httpPost2"];
                }
              },
              onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
                $state,
                "isSubmitting",
                ["form", "isSubmitting"],
                FormWrapper_Helpers
              ),
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__cfZ2E)}
                  initialValue={(() => {
                    try {
                      return $queries.query.data.response.data.Title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nlpmU
                      )}
                    >
                      {"Title"}
                    </div>
                  }
                  name={"Title"}
                  rules={[{ ruleType: "required" }]}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input", "value"],
                        AntdInput_Helpers
                      ),
                      value: generateStateValueProp($state, ["input", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input"}
                        data-plasmic-override={overrides.input}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__wwc0H)}
                  initialValue={(() => {
                    try {
                      return $queries.query.data.response.data.ShortDescription;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cDshq
                      )}
                    >
                      {"Short Description"}
                    </div>
                  }
                  name={"ShortDescription"}
                  rules={[{ ruleType: "required" }]}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.textArea),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["textArea", "value"],
                        AntdTextArea_Helpers
                      ),
                      value: generateStateValueProp($state, [
                        "textArea",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "textArea.value"
                        }
                      ],
                      [],
                      AntdTextArea_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdTextArea
                        data-plasmic-name={"textArea"}
                        data-plasmic-override={overrides.textArea}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__vdcnx)}
                  initialValue={(() => {
                    try {
                      return $queries.query.data.response.data.Description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__i038D
                      )}
                    >
                      {"Description"}
                    </div>
                  }
                  name={"Description"}
                  rules={[{ ruleType: "required" }]}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.textArea2),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["textArea2", "value"],
                        AntdTextArea_Helpers
                      ),
                      value: generateStateValueProp($state, [
                        "textArea2",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "textArea2.value"
                        }
                      ],
                      [],
                      AntdTextArea_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdTextArea
                        data-plasmic-name={"textArea2"}
                        data-plasmic-override={overrides.textArea2}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__d0QMv)}
                  initialValue={$queries.query.data.response.data.Price}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dHrng
                      )}
                    >
                      {"Price"}
                    </div>
                  }
                  name={"Price"}
                  rules={[{ ruleType: "required" }]}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vFcaf)}
                  >
                    <AntdInputNumber
                      data-plasmic-name={"numberInput"}
                      data-plasmic-override={overrides.numberInput}
                      className={classNames("__wab_instance", sty.numberInput)}
                      disabled={(() => {
                        try {
                          return $state.priceSwitch.checked;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onChange={generateStateOnChangeProp($state, [
                        "numberInput",
                        "value"
                      ])}
                      type={"number"}
                      value={generateStateValueProp($state, [
                        "numberInput",
                        "value"
                      ])}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0WDqv
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lfg93
                        )}
                      >
                        {"Free?"}
                      </div>
                      <AntdSwitch
                        data-plasmic-name={"priceSwitch"}
                        data-plasmic-override={overrides.priceSwitch}
                        checked={generateStateValueProp($state, [
                          "priceSwitch",
                          "checked"
                        ])}
                        className={classNames(
                          "__wab_instance",
                          sty.priceSwitch
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "priceSwitch",
                          "checked"
                        ])}
                      />
                    </Stack__>
                  </Stack__>
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__bjOFr)}
                  initialValue={$queries.query.data.response.data.Active}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cAs9
                      )}
                    >
                      {"Active"}
                    </div>
                  }
                  name={"Active"}
                  rules={[{ ruleType: "required" }]}
                >
                  <AntdSwitch
                    data-plasmic-name={"_switch"}
                    data-plasmic-override={overrides._switch}
                    checked={generateStateValueProp($state, [
                      "_switch",
                      "checked"
                    ])}
                    className={classNames("__wab_instance", sty._switch)}
                    onChange={generateStateOnChangeProp($state, [
                      "_switch",
                      "checked"
                    ])}
                  />
                </FormItemWrapper>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2Yur1)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__fdUaZ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return (
                          "https://kollaberation-directus.xc9xgr.easypanel.host/assets/" +
                          localStorage.getItem("uploadedFileId")
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  {(() => {
                    try {
                      return (
                        $queries.query.data.response.data.ProfileLogo.length > 0
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__aYtFr
                      )}
                      color={"softSand"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["httpDelete"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "hcB8E47YRDpisPZ3DSKShe",
                                  opId: "3f178a0f-b3db-4153-95d0-99b1017a7b03",
                                  userArgs: {
                                    path: [
                                      $queries.query.data.response.data
                                        .ProfileLogo
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpDelete"] != null &&
                          typeof $steps["httpDelete"] === "object" &&
                          typeof $steps["httpDelete"].then === "function"
                        ) {
                          $steps["httpDelete"] = await $steps["httpDelete"];
                        }
                      }}
                      shape={"rounded"}
                      size={"compact"}
                    />
                  ) : null}
                </div>
                <DragAndDropUploader
                  data-plasmic-name={"dragAndDropUploader"}
                  data-plasmic-override={overrides.dragAndDropUploader}
                  className={classNames(
                    "__wab_instance",
                    sty.dragAndDropUploader
                  )}
                  maxFiles={1}
                />

                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  className={classNames("__wab_instance", sty.textInput)}
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  value={
                    generateStateValueProp($state, ["textInput", "value"]) ?? ""
                  }
                />

                <div className={classNames(projectcss.all, sty.freeBox__nwZyr)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.files.data.response.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__azDbq
                        )}
                        key={currentIndex}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__yl62S)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return (
                                "https://kollaberation-directus.xc9xgr.easypanel.host/assets/" +
                                currentItem.directus_files_id
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__cyInQ
                          )}
                          color={"softSand"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["httpDelete"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "hcB8E47YRDpisPZ3DSKShe",
                                      opId: "3f178a0f-b3db-4153-95d0-99b1017a7b03",
                                      userArgs: {
                                        path: [currentItem.directus_files_id]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["httpDelete"] != null &&
                              typeof $steps["httpDelete"] === "object" &&
                              typeof $steps["httpDelete"].then === "function"
                            ) {
                              $steps["httpDelete"] = await $steps["httpDelete"];
                            }
                          }}
                          shape={"rounded"}
                          size={"compact"}
                        />
                      </div>
                    );
                  })}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pNkYx)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return JSON.parse(
                          localStorage.getItem("uploadedFileIds")
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__umP94
                        )}
                        key={currentIndex}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__r8QtR)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return (
                                "https://kollaberation-directus.xc9xgr.easypanel.host/assets/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    );
                  })}
                </div>
                <DragAndDropFiles
                  data-plasmic-name={"dragAndDropFiles"}
                  data-plasmic-override={overrides.dragAndDropFiles}
                  className={classNames("__wab_instance", sty.dragAndDropFiles)}
                />

                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return JSON.parse(
                        localStorage.getItem("uploadedFileIds")
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.textInput2),
                      key: currentIndex,
                      onChange: (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          __plasmic_idx_0,
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      },
                      value:
                        generateStateValueProp($state, [
                          "textInput2",
                          __plasmic_idx_0,
                          "value"
                        ]) ?? ""
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "textInput2[].value",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <TextInput
                        data-plasmic-name={"textInput2"}
                        data-plasmic-override={overrides.textInput2}
                        {...child$Props}
                      />
                    );
                  })();
                })}
                <AntdButton
                  className={classNames("__wab_instance", sty.button__ktBjL)}
                  submitsForm={true}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ruJyu
                    )}
                  >
                    {"Submit"}
                  </div>
                </AntdButton>
              </FormWrapper>
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "input",
    "textArea",
    "textArea2",
    "numberInput",
    "priceSwitch",
    "_switch",
    "dragAndDropUploader",
    "textInput",
    "dragAndDropFiles",
    "textInput2"
  ],
  form: [
    "form",
    "input",
    "textArea",
    "textArea2",
    "numberInput",
    "priceSwitch",
    "_switch",
    "dragAndDropUploader",
    "textInput",
    "dragAndDropFiles",
    "textInput2"
  ],
  input: ["input"],
  textArea: ["textArea"],
  textArea2: ["textArea2"],
  numberInput: ["numberInput"],
  priceSwitch: ["priceSwitch"],
  _switch: ["_switch"],
  dragAndDropUploader: ["dragAndDropUploader"],
  textInput: ["textInput"],
  dragAndDropFiles: ["dragAndDropFiles"],
  textInput2: ["textInput2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  textArea: typeof AntdTextArea;
  textArea2: typeof AntdTextArea;
  numberInput: typeof AntdInputNumber;
  priceSwitch: typeof AntdSwitch;
  _switch: typeof AntdSwitch;
  dragAndDropUploader: typeof DragAndDropUploader;
  textInput: typeof TextInput;
  dragAndDropFiles: typeof DragAndDropFiles;
  textInput2: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditCommunity__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditCommunity__VariantsArgs;
    args?: PlasmicEditCommunity__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditCommunity__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditCommunity__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditCommunity__ArgProps,
          internalVariantPropNames: PlasmicEditCommunity__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditCommunity__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditCommunity";
  } else {
    func.displayName = `PlasmicEditCommunity.${nodeName}`;
  }
  return func;
}

export const PlasmicEditCommunity = Object.assign(
  // Top-level PlasmicEditCommunity renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    textArea2: makeNodeComponent("textArea2"),
    numberInput: makeNodeComponent("numberInput"),
    priceSwitch: makeNodeComponent("priceSwitch"),
    _switch: makeNodeComponent("_switch"),
    dragAndDropUploader: makeNodeComponent("dragAndDropUploader"),
    textInput: makeNodeComponent("textInput"),
    dragAndDropFiles: makeNodeComponent("dragAndDropFiles"),
    textInput2: makeNodeComponent("textInput2"),

    // Metadata about props expected for PlasmicEditCommunity
    internalVariantProps: PlasmicEditCommunity__VariantProps,
    internalArgProps: PlasmicEditCommunity__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Edit Community",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditCommunity;
/* prettier-ignore-end */
