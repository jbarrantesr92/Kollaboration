// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6nkmFbRpkCCeYJxNDNvxHP
// Component: 9AlUWb5-mW31

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Button from "../../Button"; // plasmic-import: f5aFEOq_jrMk/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6nkmFbRpkCCeYJxNDNvxHP/projectcss
import sty from "./PlasmicCommunityDetails.module.css"; // plasmic-import: 9AlUWb5-mW31/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: dV_M4gggqVX-/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: -J2lXRM8ra-O/icon

createPlasmicElementProxy;

export type PlasmicCommunityDetails__VariantMembers = {};
export type PlasmicCommunityDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicCommunityDetails__VariantsArgs;
export const PlasmicCommunityDetails__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCommunityDetails__ArgsType = {};
type ArgPropType = keyof PlasmicCommunityDetails__ArgsType;
export const PlasmicCommunityDetails__ArgProps = new Array<ArgPropType>();

export type PlasmicCommunityDetails__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof Button>;
};

export interface DefaultCommunityDetailsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCommunityDetails__RenderFunc(props: {
  variants: PlasmicCommunityDetails__VariantsArgs;
  args: PlasmicCommunityDetails__ArgsType;
  overrides: PlasmicCommunityDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    communityDetails: usePlasmicDataOp(() => {
      return {
        sourceId: "hcB8E47YRDpisPZ3DSKShe",
        opId: "5c12305f-610c-4c74-b3d4-75b8ea73ff0f",
        userArgs: {
          path: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.5c12305f-610c-4c74-b3d4-75b8ea73ff0f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "hcB8E47YRDpisPZ3DSKShe",
        opId: "4c7b617d-a7ec-46bf-945f-c5b3179eb9a3",
        userArgs: {
          path: [$queries.communityDetails.data.response.data.id]
        },
        cacheKey: `plasmic.$.4c7b617d-a7ec-46bf-945f-c5b3179eb9a3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__rnRdc)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={(() => {
                try {
                  return (
                    "https://kollaberation-directus.xc9xgr.easypanel.host/assets/" +
                    $queries.query.data.response.data[0].directus_files_id
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              width={"500"}
            />
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qDoMo)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___6026I)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c6VDt
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.communityDetails.data.response.data.Title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ogAjd)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m9Exc
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          function formatNumber(value) {
                            if (value >= 1000000) {
                              return (value / 1000000).toFixed(1) + "M";
                              return (value / 1000).toFixed(1) + "K";
                            }
                            return value.toString();
                          }
                          const members = $queries.communityDetails.data
                            .response.data.Members
                            ? formatNumber(
                                $queries.communityDetails.data.response.data
                                  .Members
                              )
                            : "0";
                          const formattedString = `${members} Members`;
                          return formattedString;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Ivxv
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.communityDetails.data.response.data
                          .Private == true
                          ? "Private"
                          : "Public";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"blue"}
              shape={"rounded"}
              size={"compact"}
            >
              {"Join"}
            </Button>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dzlL
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.communityDetails.data.response.data
                    .Description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "button"],
  img: ["img"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommunityDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommunityDetails__VariantsArgs;
    args?: PlasmicCommunityDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommunityDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCommunityDetails__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommunityDetails__ArgProps,
          internalVariantPropNames: PlasmicCommunityDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCommunityDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommunityDetails";
  } else {
    func.displayName = `PlasmicCommunityDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicCommunityDetails = Object.assign(
  // Top-level PlasmicCommunityDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicCommunityDetails
    internalVariantProps: PlasmicCommunityDetails__VariantProps,
    internalArgProps: PlasmicCommunityDetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCommunityDetails;
/* prettier-ignore-end */
