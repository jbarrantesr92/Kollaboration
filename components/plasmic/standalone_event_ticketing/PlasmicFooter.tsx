// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: MtmcKR1GuwbKEBJfYkVdj
// Component: THeG5BcdbXeZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 7c1YDuGGoKuq/component

import { LocaleValue, useLocale } from "./PlasmicGlobalVariant__Locale"; // plasmic-import: IjXfRSRLVt5J/globalVariant
import { useScreenVariants as useScreenVariantswiZsHgbT5CnT } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wiZSHgbT5cnT/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: MtmcKR1GuwbKEBJfYkVdj/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: THeG5BcdbXeZ/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: wOB5ABCGJwNb/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: PrbgYB2SXpI9/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 5CkzROVemFbb/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: V9lHh1c0c7g6/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _VJXnu9sySb9/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    locale: useLocale(),
    screen: useScreenVariantswiZsHgbT5CnT()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_locale_es]: hasVariant(globalVariants, "locale", "es")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__bs3Tu)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kGxcu)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              src={{
                src: "/plasmic/standalone_event_ticketing/images/logoGivebackTicketsPng.png",
                fullWidth: 800,
                fullHeight: 130,
                aspectRatio: undefined
              }}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__y9ShC)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1XfIc
                )}
              >
                {"Cont\u00e1ctanos"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nq3Jt)}
              >
                <Icon2Icon
                  className={classNames(projectcss.all, sty.svg__kDbk)}
                  role={"img"}
                />

                <Icon3Icon
                  className={classNames(projectcss.all, sty.svg__qmLix)}
                  role={"img"}
                />

                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg__cplKa)}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.column__l0Jrx)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__m6WZp)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jqYbr
              )}
            >
              {"Producto"}
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__hqjvu)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__b3Vp4)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__ya8WV)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d07Yh
                )}
              >
                {"Precios"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__gjZb4)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__br2H)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__sx0CK)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__izNnk
                )}
              >
                {"Cuenta"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__hm6Vl)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__o12E3)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__xStXz)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tsQxu
                )}
              >
                {"Integraciones"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__mb6ST)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__noHoc)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__jYeZw)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__agyew
                )}
              >
                {"Ideas"}
              </div>
            </Button>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.column__m8PW)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cWjSx)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__emaz
              )}
            >
              {"soporte"}
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__rKEb)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___5G2Ey)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg___99NTz)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kytev
                )}
              >
                {"Documentaci\u00f3n"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__ghdw2)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__lm5Sv)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__e27M)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4JSn
                )}
              >
                {"FAQs"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__mdUWt)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___4Ig9C)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__xuVdU)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oZlQ
                )}
              >
                {"Estado"}
              </div>
            </Button>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.column___4Fwph)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wfnm3)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1TovL
              )}
            >
              {"compa\u00f1\u00eda"}
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__pBMfk)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__uHPg)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg___3EdsX)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mq0En
                )}
              >
                {"Nostros"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__wUgLk)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__o0WzD)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__hac0O)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5PmVx
                )}
              >
                {"Cont\u00e1ctanos"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__fn447)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__lWl9N)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__cau0D)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dc03O
                )}
              >
                {"Carreras"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__jNwCj)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___7WJUg)}
                  role={"img"}
                />
              }
              size={"minimal"}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__tq5Ir)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__juDsW
                )}
              >
                {"Prensa"}
              </div>
            </Button>
          </Stack__>
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "img"],
  columns: ["columns", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
