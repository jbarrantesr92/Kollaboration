// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: MtmcKR1GuwbKEBJfYkVdj
// Component: yWBF3c_ZisTX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar2 from "../../Navbar2"; // plasmic-import: PlAJ5tJMUQMz/component
import Button from "../../Button"; // plasmic-import: 7c1YDuGGoKuq/component
import Footer2 from "../../Footer2"; // plasmic-import: afuzx2tfyuUz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: MtmcKR1GuwbKEBJfYkVdj/projectcss
import sty from "./PlasmicSuccessPayment.module.css"; // plasmic-import: yWBF3c_ZisTX/css

import SealCheckDuotoneSvgIcon from "./icons/PlasmicIcon__SealCheckDuotoneSvg"; // plasmic-import: cbGOkv0a0q56/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: V9lHh1c0c7g6/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _VJXnu9sySb9/icon

createPlasmicElementProxy;

export type PlasmicSuccessPayment__VariantMembers = {};
export type PlasmicSuccessPayment__VariantsArgs = {};
type VariantPropType = keyof PlasmicSuccessPayment__VariantsArgs;
export const PlasmicSuccessPayment__VariantProps = new Array<VariantPropType>();

export type PlasmicSuccessPayment__ArgsType = {};
type ArgPropType = keyof PlasmicSuccessPayment__ArgsType;
export const PlasmicSuccessPayment__ArgProps = new Array<ArgPropType>();

export type PlasmicSuccessPayment__OverridesType = {
  root?: Flex__<"div">;
  navbar2?: Flex__<typeof Navbar2>;
  freeBox?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  footer2?: Flex__<typeof Footer2>;
};

export interface DefaultSuccessPaymentProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSuccessPayment__RenderFunc(props: {
  variants: PlasmicSuccessPayment__VariantsArgs;
  args: PlasmicSuccessPayment__ArgsType;
  overrides: PlasmicSuccessPayment__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar2
            data-plasmic-name={"navbar2"}
            data-plasmic-override={overrides.navbar2}
            className={classNames("__wab_instance", sty.navbar2)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <SealCheckDuotoneSvgIcon
              className={classNames(projectcss.all, sty.svg__vjAio)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__glXyC
              )}
            >
              {"You order is complete"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aMrq
              )}
            >
              {"Please review your email with instructions about your tickets"}
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"blue"}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__tuxB4)}
                  role={"img"}
                />
              }
            >
              {"Home Page"}
            </Button>
          </Stack__>
          <Footer2
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            className={classNames("__wab_instance", sty.footer2)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar2", "freeBox", "button", "footer2"],
  navbar2: ["navbar2"],
  freeBox: ["freeBox", "button"],
  button: ["button"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar2: typeof Navbar2;
  freeBox: "div";
  button: typeof Button;
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSuccessPayment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSuccessPayment__VariantsArgs;
    args?: PlasmicSuccessPayment__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSuccessPayment__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSuccessPayment__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSuccessPayment__ArgProps,
          internalVariantPropNames: PlasmicSuccessPayment__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSuccessPayment__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSuccessPayment";
  } else {
    func.displayName = `PlasmicSuccessPayment.${nodeName}`;
  }
  return func;
}

export const PlasmicSuccessPayment = Object.assign(
  // Top-level PlasmicSuccessPayment renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar2: makeNodeComponent("navbar2"),
    freeBox: makeNodeComponent("freeBox"),
    button: makeNodeComponent("button"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicSuccessPayment
    internalVariantProps: PlasmicSuccessPayment__VariantProps,
    internalArgProps: PlasmicSuccessPayment__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSuccessPayment;
/* prettier-ignore-end */
