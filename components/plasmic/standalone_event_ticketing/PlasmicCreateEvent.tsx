// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: MtmcKR1GuwbKEBJfYkVdj
// Component: 5gUjZIWvkPLZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Options from "../../Options"; // plasmic-import: eW-v92peeoVq/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: KfDAmu4lid5o/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Select from "../../Select"; // plasmic-import: iiMExIyx9xlD/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { FormListWrapper } from "@plasmicpkgs/antd5/skinny/FormList";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import Button from "../../Button"; // plasmic-import: 7c1YDuGGoKuq/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: MtmcKR1GuwbKEBJfYkVdj/projectcss
import sty from "./PlasmicCreateEvent.module.css"; // plasmic-import: 5gUjZIWvkPLZ/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: mFdXj3H03u7X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: V9lHh1c0c7g6/icon
import TrashSvgIcon from "./icons/PlasmicIcon__TrashSvg"; // plasmic-import: dKZ8ZQGn2s_e/icon
import PlusSvgIcon from "./icons/PlasmicIcon__PlusSvg"; // plasmic-import: 8gLchf1ApTDC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _VJXnu9sySb9/icon

createPlasmicElementProxy;

export type PlasmicCreateEvent__VariantMembers = {
  eventStep: "step1" | "step2" | "step3";
  eventState: "editStep1" | "editStep2" | "editStep3";
};
export type PlasmicCreateEvent__VariantsArgs = {
  eventStep?: SingleChoiceArg<"step1" | "step2" | "step3">;
  eventState?: SingleChoiceArg<"editStep1" | "editStep2" | "editStep3">;
};
type VariantPropType = keyof PlasmicCreateEvent__VariantsArgs;
export const PlasmicCreateEvent__VariantProps = new Array<VariantPropType>(
  "eventStep",
  "eventState"
);

export type PlasmicCreateEvent__ArgsType = {};
type ArgPropType = keyof PlasmicCreateEvent__ArgsType;
export const PlasmicCreateEvent__ArgProps = new Array<ArgPropType>();

export type PlasmicCreateEvent__OverridesType = {
  root?: Flex__<"div">;
  options?: Flex__<typeof Options>;
  newEvent?: Flex__<"div">;
  eventName?: Flex__<typeof FormWrapper>;
  textInput?: Flex__<typeof TextInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  select?: Flex__<typeof Select>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  eventCalendar?: Flex__<typeof FormWrapper>;
  datesFormList?: Flex__<typeof FormListWrapper>;
  dateTimePicker?: Flex__<typeof AntdDatePicker>;
  textInput7?: Flex__<typeof TextInput>;
  dateTimePicker2?: Flex__<typeof AntdDatePicker>;
  textInput8?: Flex__<typeof TextInput>;
  eventCalendar2?: Flex__<typeof FormWrapper>;
  paidFormList?: Flex__<typeof FormListWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  freeFormList?: Flex__<typeof FormListWrapper>;
  input4?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  donationFormList?: Flex__<typeof FormListWrapper>;
  input7?: Flex__<typeof AntdInput>;
  input8?: Flex__<typeof AntdInput>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  editEvent?: Flex__<"div">;
  editEventName?: Flex__<"div">;
  editName?: Flex__<typeof TextInput>;
  editDescription?: Flex__<typeof AntdTextArea>;
  select3?: Flex__<typeof Select>;
  editAddress?: Flex__<typeof TextInput>;
  editVenue?: Flex__<typeof TextInput>;
  editEventCalendar?: Flex__<"div">;
  addDates?: Flex__<"div">;
  addStartDate?: Flex__<typeof AntdDatePicker>;
  addStartTime?: Flex__<typeof AntdInput>;
  addEndDate?: Flex__<typeof AntdDatePicker>;
  addEndTime?: Flex__<typeof AntdInput>;
  editEventTickets?: Flex__<"div">;
  addTickets?: Flex__<"div">;
  addTicketType?: Flex__<typeof Select>;
  addTicketName?: Flex__<typeof TextInput>;
  addTicketQuantity?: Flex__<typeof TextInput>;
  addTicketPrice?: Flex__<typeof TextInput>;
};

export interface DefaultCreateEventProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateEvent__RenderFunc(props: {
  variants: PlasmicCreateEvent__VariantsArgs;
  args: PlasmicCreateEvent__ArgsType;
  overrides: PlasmicCreateEvent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "eventName.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "eventName",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "eventName.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "eventName",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "eventCalendar.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "eventCalendar",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "eventCalendar.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "eventCalendar",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "eventCalendar2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "eventCalendar2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "eventCalendar2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "eventCalendar2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "paid",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "free",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "donation",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "eventStep",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.eventStep
      },
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "dateTimePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectedRow",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "editName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editDescription.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventDescription;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editAddress.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventAddress;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editVenue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventVenue;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventCategory;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "eventState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.eventState
      },
      {
        path: "addStartDate.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "addStartTime.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "addEndDate.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "addEndTime.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "addTicketName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "addTicketQuantity.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "addTicketPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "addTicketType.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "paid"
      },
      {
        path: "select.ticketId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select3.ticketId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "addTicketType.ticketId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rooteventState_editStep1]: hasVariant(
                $state,
                "eventState",
                "editStep1"
              ),
              [sty.rooteventState_editStep3]: hasVariant(
                $state,
                "eventState",
                "editStep3"
              ),
              [sty.rooteventStep_step1]: hasVariant(
                $state,
                "eventStep",
                "step1"
              ),
              [sty.rooteventStep_step2]: hasVariant(
                $state,
                "eventStep",
                "step2"
              ),
              [sty.rooteventStep_step3]: hasVariant(
                $state,
                "eventStep",
                "step3"
              )
            }
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rad0X, {
              [sty.freeBoxeventState_editStep1__rad0XJw2KH]: hasVariant(
                $state,
                "eventState",
                "editStep1"
              ),
              [sty.freeBoxeventState_editStep2__rad0XKq1Ip]: hasVariant(
                $state,
                "eventState",
                "editStep2"
              ),
              [sty.freeBoxeventState_editStep3__rad0Xz0Kya]: hasVariant(
                $state,
                "eventState",
                "editStep3"
              ),
              [sty.freeBoxeventStep_step1__rad0XkwxRr]: hasVariant(
                $state,
                "eventStep",
                "step1"
              ),
              [sty.freeBoxeventStep_step2__rad0X44F2Z]: hasVariant(
                $state,
                "eventStep",
                "step2"
              ),
              [sty.freeBoxeventStep_step3__rad0XemNtK]: hasVariant(
                $state,
                "eventStep",
                "step3"
              )
            })}
          >
            <Options
              data-plasmic-name={"options"}
              data-plasmic-override={overrides.options}
              className={classNames("__wab_instance", sty.options, {
                [sty.optionseventState_editStep1]: hasVariant(
                  $state,
                  "eventState",
                  "editStep1"
                )
              })}
            />

            <div
              data-plasmic-name={"newEvent"}
              data-plasmic-override={overrides.newEvent}
              className={classNames(projectcss.all, sty.newEvent, {
                [sty.newEventeventState_editStep1]: hasVariant(
                  $state,
                  "eventState",
                  "editStep1"
                ),
                [sty.newEventeventState_editStep2]: hasVariant(
                  $state,
                  "eventState",
                  "editStep2"
                ),
                [sty.newEventeventState_editStep3]: hasVariant(
                  $state,
                  "eventState",
                  "editStep3"
                )
              })}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.eventName, {
                    [sty.eventNameeventState_editStep1]: hasVariant(
                      $state,
                      "eventState",
                      "editStep1"
                    ),
                    [sty.eventNameeventState_editStep3]: hasVariant(
                      $state,
                      "eventState",
                      "editStep3"
                    ),
                    [sty.eventNameeventStep_step1]: hasVariant(
                      $state,
                      "eventStep",
                      "step1"
                    ),
                    [sty.eventNameeventStep_step2]: hasVariant(
                      $state,
                      "eventStep",
                      "step2"
                    ),
                    [sty.eventNameeventStep_step3]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  }),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["eventName", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["updateEventStep"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["eventStep"]
                            },
                            operation: 0,
                            value: "step2"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateEventStep"] != null &&
                      typeof $steps["updateEventStep"] === "object" &&
                      typeof $steps["updateEventStep"].then === "function"
                    ) {
                      $steps["updateEventStep"] = await $steps[
                        "updateEventStep"
                      ];
                    }
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["eventName", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["eventName"] = ref;
                  },
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "eventName.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "eventName.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"eventName"}
                    data-plasmic-override={overrides.eventName}
                    {...child$Props}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cHfIu
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Tell the world about your event"}
                        </span>
                      </React.Fragment>
                    </div>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__nIwXc,
                        {
                          [sty.formFieldeventStep_step1__nIwXckwxRr]:
                            hasVariant($state, "eventStep", "step1")
                        }
                      )}
                      label={"What is your event name?"}
                      name={
                        hasVariant($state, "eventStep", "step1")
                          ? "EventName"
                          : "name"
                      }
                    >
                      <TextInput
                        data-plasmic-name={"textInput"}
                        data-plasmic-override={overrides.textInput}
                        className={classNames("__wab_instance", sty.textInput)}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        value={
                          generateStateValueProp($state, [
                            "textInput",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__aMmlT,
                        {
                          [sty.formFieldeventStep_step1__aMmlTkwxRr]:
                            hasVariant($state, "eventStep", "step1"),
                          [sty.formFieldeventStep_step3__aMmlTemNtK]:
                            hasVariant($state, "eventStep", "step3")
                        }
                      )}
                      label={"Describe your event"}
                      name={
                        hasVariant($state, "eventStep", "step1")
                          ? "EventDescription"
                          : "description"
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.textArea,
                            {
                              [sty.textAreaeventStep_step1]: hasVariant(
                                $state,
                                "eventStep",
                                "step1"
                              )
                            }
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea", "value"],
                            AntdTextArea_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "textArea",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "textArea.value"
                            }
                          ],
                          [],
                          AntdTextArea_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdTextArea
                            data-plasmic-name={"textArea"}
                            data-plasmic-override={overrides.textArea}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___1MvBg,
                        {
                          [sty.formFieldeventStep_step1___1MvBgKwxRr]:
                            hasVariant($state, "eventStep", "step1"),
                          [sty.formFieldeventStep_step2___1MvBg44F2Z]:
                            hasVariant($state, "eventStep", "step2"),
                          [sty.formFieldeventStep_step3___1MvBgEmNtK]:
                            hasVariant($state, "eventStep", "step3")
                        }
                      )}
                      label={"Select a category for your event"}
                      name={
                        hasVariant($state, "eventStep", "step1")
                          ? "EventCategory"
                          : "category"
                      }
                    >
                      <Select
                        data-plasmic-name={"select"}
                        data-plasmic-override={overrides.select}
                        className={classNames("__wab_instance", sty.select)}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "select",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        onTicketIdChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "select",
                            "ticketId"
                          ])(eventArgs[0]);
                        }}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null },
                            { value: null, label: null },
                            { value: null, label: null }
                          ];
                          __composite["0"]["value"] = "music";
                          __composite["0"]["label"] = "Music";
                          __composite["1"]["value"] = "sports";
                          __composite["1"]["label"] = "Sports";
                          __composite["2"]["value"] = "film";
                          __composite["2"]["label"] = "Film";
                          return __composite;
                        })()}
                        ticketId={generateStateValueProp($state, [
                          "select",
                          "ticketId"
                        ])}
                        value={generateStateValueProp($state, [
                          "select",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__hmJi
                      )}
                      label={"Address"}
                      name={"EventAddress"}
                    >
                      <TextInput
                        data-plasmic-name={"textInput2"}
                        data-plasmic-override={overrides.textInput2}
                        className={classNames("__wab_instance", sty.textInput2)}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput2",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        value={
                          generateStateValueProp($state, [
                            "textInput2",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___4Etg0
                      )}
                      label={"Venue name"}
                      name={"EventVenue"}
                    >
                      <TextInput
                        data-plasmic-name={"textInput3"}
                        data-plasmic-override={overrides.textInput3}
                        className={classNames("__wab_instance", sty.textInput3)}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput3",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        value={
                          generateStateValueProp($state, [
                            "textInput3",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </FormItemWrapper>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yJ9E, {
                        [sty.freeBoxeventStep_step1__yJ9EkwxRr]: hasVariant(
                          $state,
                          "eventStep",
                          "step1"
                        ),
                        [sty.freeBoxeventStep_step2__yJ9E44F2Z]: hasVariant(
                          $state,
                          "eventStep",
                          "step2"
                        ),
                        [sty.freeBoxeventStep_step3__yJ9EemNtK]: hasVariant(
                          $state,
                          "eventStep",
                          "step3"
                        )
                      })}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__dUb5H,
                          {
                            [sty.buttoneventState_editStep1__dUb5HJw2KH]:
                              hasVariant($state, "eventState", "editStep1"),
                            [sty.buttoneventStep_step2__dUb5H44F2Z]: hasVariant(
                              $state,
                              "eventStep",
                              "step2"
                            ),
                            [sty.buttoneventStep_step3__dUb5HemNtK]: hasVariant(
                              $state,
                              "eventStep",
                              "step3"
                            )
                          }
                        )}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jk5Zw
                          )}
                        >
                          {"Go to calendar"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormWrapper>
                );
              })()}
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.eventCalendar, {
                    [sty.eventCalendareventStep_step1]: hasVariant(
                      $state,
                      "eventStep",
                      "step1"
                    ),
                    [sty.eventCalendareventStep_step2]: hasVariant(
                      $state,
                      "eventStep",
                      "step2"
                    ),
                    [sty.eventCalendareventStep_step3]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  }),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["eventCalendar", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["updateEventStep"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["eventStep"]
                            },
                            operation: 0,
                            value: "step3"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateEventStep"] != null &&
                      typeof $steps["updateEventStep"] === "object" &&
                      typeof $steps["updateEventStep"].then === "function"
                    ) {
                      $steps["updateEventStep"] = await $steps[
                        "updateEventStep"
                      ];
                    }
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["eventCalendar", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["eventCalendar"] = ref;
                  },
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "eventCalendar.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "eventCalendar.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"eventCalendar"}
                    data-plasmic-override={overrides.eventCalendar}
                    {...child$Props}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__clqZn
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Choose a time and place for your event"}
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__br0E4)}
                    >
                      <FormListWrapper
                        data-plasmic-name={"datesFormList"}
                        data-plasmic-override={overrides.datesFormList}
                        className={classNames(
                          "__wab_instance",
                          sty.datesFormList,
                          {
                            [sty.datesFormListeventStep_step2]: hasVariant(
                              $state,
                              "eventStep",
                              "step2"
                            )
                          }
                        )}
                        initialValue={[
                          { StartDate: "1/1/2024", EndDate: "1/2/2024" }
                        ]}
                        name={"Dates Form List"}
                        ref={ref => {
                          $refs["datesFormList"] = ref;
                        }}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jjtWn,
                                {
                                  [sty.freeBoxeventState_editStep2__jjtWnKq1Ip]:
                                    hasVariant(
                                      $state,
                                      "eventState",
                                      "editStep2"
                                    )
                                }
                              )}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField___2Hg0R,
                                  {
                                    [sty.formFieldeventStep_step3___2Hg0RemNtK]:
                                      hasVariant($state, "eventStep", "step3")
                                  }
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wG0Lt
                                    )}
                                  >
                                    {"Start Date"}
                                  </div>
                                }
                                name={"StartDate"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.dateTimePicker,
                                      {
                                        [sty.dateTimePickereventStep_step2]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step2"
                                          )
                                      }
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["dateTimePicker", "value"],
                                        AntdDatePicker_Helpers
                                      ),
                                    picker: "date",
                                    popupScopeClassName:
                                      sty["dateTimePicker__datePickerPopup"],
                                    showTime: false,
                                    value: generateStateValueProp($state, [
                                      "dateTimePicker",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "dateTimePicker.value"
                                      }
                                    ],
                                    [],
                                    AntdDatePicker_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdDatePicker
                                      data-plasmic-name={"dateTimePicker"}
                                      data-plasmic-override={
                                        overrides.dateTimePicker
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__k2XNk,
                                  {
                                    [sty.formFieldeventStep_step2__k2XNk44F2Z]:
                                      hasVariant($state, "eventStep", "step2"),
                                    [sty.formFieldeventStep_step3__k2XNkemNtK]:
                                      hasVariant($state, "eventStep", "step3")
                                  }
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tc4Bz
                                    )}
                                  >
                                    {"Start Time"}
                                  </div>
                                }
                                name={"StartTime"}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput7"}
                                  data-plasmic-override={overrides.textInput7}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput7,
                                    {
                                      [sty.textInput7eventStep_step2]:
                                        hasVariant($state, "eventStep", "step2")
                                    }
                                  )}
                                  onChange={(...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "textInput7",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }}
                                  type={"time"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput7",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField___3Yq71,
                                  {
                                    [sty.formFieldeventStep_step3___3Yq71EmNtK]:
                                      hasVariant($state, "eventStep", "step3")
                                  }
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__hvJrX
                                    )}
                                  >
                                    {"End Date"}
                                  </div>
                                }
                                name={"EndDate"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.dateTimePicker2,
                                      {
                                        [sty.dateTimePicker2eventStep_step2]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step2"
                                          )
                                      }
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["dateTimePicker2", "value"],
                                        AntdDatePicker_Helpers
                                      ),
                                    picker: "date",
                                    popupScopeClassName:
                                      sty["dateTimePicker2__datePickerPopup"],
                                    showTime: false,
                                    value: generateStateValueProp($state, [
                                      "dateTimePicker2",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName:
                                          "dateTimePicker2.value"
                                      }
                                    ],
                                    [],
                                    AntdDatePicker_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdDatePicker
                                      data-plasmic-name={"dateTimePicker2"}
                                      data-plasmic-override={
                                        overrides.dateTimePicker2
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__royWy,
                                  {
                                    [sty.formFieldeventStep_step2__royWy44F2Z]:
                                      hasVariant($state, "eventStep", "step2"),
                                    [sty.formFieldeventStep_step3__royWyEmNtK]:
                                      hasVariant($state, "eventStep", "step3")
                                  }
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dhBxo
                                    )}
                                  >
                                    {"End Time"}
                                  </div>
                                }
                                name={"EndTime"}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput8"}
                                  data-plasmic-override={overrides.textInput8}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput8,
                                    {
                                      [sty.textInput8eventStep_step2]:
                                        hasVariant($state, "eventStep", "step2")
                                    }
                                  )}
                                  onChange={(...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "textInput8",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }}
                                  type={"time"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput8",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dh4Nd,
                                  {
                                    [sty.freeBoxeventStep_step3__dh4NdEmNtK]:
                                      hasVariant($state, "eventStep", "step3")
                                  }
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["runActionOnDatesFormList"] = true
                                    ? (() => {
                                        const actionArgs = {};
                                        return (({ tplRef, action, args }) => {
                                          return $refs?.[tplRef]?.[action]?.(
                                            ...(args ?? [])
                                          );
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runActionOnDatesFormList"] !=
                                      null &&
                                    typeof $steps[
                                      "runActionOnDatesFormList"
                                    ] === "object" &&
                                    typeof $steps["runActionOnDatesFormList"]
                                      .then === "function"
                                  ) {
                                    $steps["runActionOnDatesFormList"] =
                                      await $steps["runActionOnDatesFormList"];
                                  }
                                }}
                              >
                                <TrashSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ivewv
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </Stack__>
                          )}
                        </DataCtxReader__>
                      </FormListWrapper>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___34O0V,
                          {
                            [sty.buttoneventStep_step2___34O0V44F2Z]:
                              hasVariant($state, "eventStep", "step2")
                          }
                        )}
                        color={"softSand"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runActionOnDatesFormList"] = true
                            ? (() => {
                                const actionArgs = {};
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnDatesFormList"] != null &&
                            typeof $steps["runActionOnDatesFormList"] ===
                              "object" &&
                            typeof $steps["runActionOnDatesFormList"].then ===
                              "function"
                          ) {
                            $steps["runActionOnDatesFormList"] = await $steps[
                              "runActionOnDatesFormList"
                            ];
                          }
                        }}
                        startIcon={
                          <PlusSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hzCjR
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__z03Gh
                          )}
                        >
                          {"Add more dates"}
                        </div>
                      </Button>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2YvSl,
                        {
                          [sty.freeBoxeventStep_step2___2YvSl44F2Z]: hasVariant(
                            $state,
                            "eventStep",
                            "step2"
                          ),
                          [sty.freeBoxeventStep_step3___2YvSlemNtK]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__xxPm,
                          {
                            [sty.buttoneventStep_step2__xxPm44F2Z]: hasVariant(
                              $state,
                              "eventStep",
                              "step2"
                            ),
                            [sty.buttoneventStep_step3__xxPmEmNtK]: hasVariant(
                              $state,
                              "eventStep",
                              "step3"
                            )
                          }
                        )}
                        color={"softSand"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateEventStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["eventStep"]
                                  },
                                  operation: 0,
                                  value: "step1"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEventStep"] != null &&
                            typeof $steps["updateEventStep"] === "object" &&
                            typeof $steps["updateEventStep"].then === "function"
                          ) {
                            $steps["updateEventStep"] = await $steps[
                              "updateEventStep"
                            ];
                          }
                        }}
                        startIcon={
                          <CheckSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lOIa,
                              {
                                [sty.svgeventStep_step2__lOIa44F2Z]: hasVariant(
                                  $state,
                                  "eventStep",
                                  "step2"
                                )
                              }
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Return"}
                      </Button>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__fbJa4,
                          {
                            [sty.buttoneventStep_step3__fbJa4EmNtK]: hasVariant(
                              $state,
                              "eventStep",
                              "step3"
                            )
                          }
                        )}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jGReF
                          )}
                        >
                          {"Go to ticket Types"}
                        </div>
                      </AntdButton>
                    </Stack__>
                  </FormWrapper>
                );
              })()}
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.eventCalendar2, {
                    [sty.eventCalendar2eventState_editStep1]: hasVariant(
                      $state,
                      "eventState",
                      "editStep1"
                    ),
                    [sty.eventCalendar2eventStep_step1]: hasVariant(
                      $state,
                      "eventStep",
                      "step1"
                    ),
                    [sty.eventCalendar2eventStep_step2]: hasVariant(
                      $state,
                      "eventStep",
                      "step2"
                    ),
                    [sty.eventCalendar2eventStep_step3]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  }),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["eventCalendar2", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["httpPost"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                              opId: "63a00493-d7b9-4876-ad49-df24ebbfa3be",
                              userArgs: {
                                body: [
                                  $state.eventName.value.name,
                                  $state.eventName.value.description,
                                  $state.eventName.value.category,
                                  $state.eventCalendar.value.EventAddress,
                                  $state.eventCalendar.value.EventVenue
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["httpPost"] != null &&
                      typeof $steps["httpPost"] === "object" &&
                      typeof $steps["httpPost"].then === "function"
                    ) {
                      $steps["httpPost"] = await $steps["httpPost"];
                    }

                    $steps["postPaid"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                              opId: "13c5ed43-6286-40d0-a437-a5ae3eb19bdc",
                              userArgs: {
                                body: [
                                  (() => {
                                    const updatedPaidFormList =
                                      $state.eventCalendar2.value[
                                        "Paid Form List"
                                      ].map(event => {
                                        return {
                                          ...event,
                                          EventId:
                                            $steps.httpPost.data.response.data
                                              .id
                                        };
                                      });
                                    return ($state.eventCalendar2.value[
                                      "Paid Form List"
                                    ] = updatedPaidFormList);
                                  })()
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postPaid"] != null &&
                      typeof $steps["postPaid"] === "object" &&
                      typeof $steps["postPaid"].then === "function"
                    ) {
                      $steps["postPaid"] = await $steps["postPaid"];
                    }

                    $steps["postFree"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                              opId: "13c5ed43-6286-40d0-a437-a5ae3eb19bdc",
                              userArgs: {
                                body: [
                                  (() => {
                                    const updatedPaidFormList =
                                      $state.eventCalendar2.value[
                                        "Free Form List"
                                      ].map(event => {
                                        return {
                                          ...event,
                                          EventId:
                                            $steps.httpPost.data.response.data
                                              .id
                                        };
                                      });
                                    return ($state.eventCalendar2.value[
                                      "Free Form List"
                                    ] = updatedPaidFormList);
                                  })()
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postFree"] != null &&
                      typeof $steps["postFree"] === "object" &&
                      typeof $steps["postFree"].then === "function"
                    ) {
                      $steps["postFree"] = await $steps["postFree"];
                    }

                    $steps["postDonation"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                              opId: "13c5ed43-6286-40d0-a437-a5ae3eb19bdc",
                              userArgs: {
                                body: [
                                  (() => {
                                    const updatedPaidFormList =
                                      $state.eventCalendar2.value[
                                        "Donation Form List"
                                      ].map(event => {
                                        return {
                                          ...event,
                                          EventId:
                                            $steps.httpPost.data.response.data
                                              .id
                                        };
                                      });
                                    return ($state.eventCalendar2.value[
                                      "Donation Form List"
                                    ] = updatedPaidFormList);
                                  })()
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postDonation"] != null &&
                      typeof $steps["postDonation"] === "object" &&
                      typeof $steps["postDonation"].then === "function"
                    ) {
                      $steps["postDonation"] = await $steps["postDonation"];
                    }

                    $steps["postDates"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                              opId: "874bd62f-d5b2-44ab-a3a9-06115fe2ccdf",
                              userArgs: {
                                body: [
                                  (() => {
                                    const formatDate = dateStr => {
                                      const date = new Date(dateStr);
                                      const year = date.getFullYear();
                                      const month = String(
                                        date.getMonth() + 1
                                      ).padStart(2, "0");
                                      const day = String(
                                        date.getDate()
                                      ).padStart(2, "0");
                                      return `${year}-${month}-${day}`;
                                    };
                                    const updatedPaidFormList =
                                      $state.eventCalendar.value[
                                        "Dates Form List"
                                      ].map(event => {
                                        return {
                                          ...event,
                                          EventId:
                                            $steps.httpPost.data.response.data
                                              .id,
                                          EndDate: formatDate(event.EndDate),
                                          EndTime: event.EndTime,
                                          StartDate: formatDate(
                                            event.StartDate
                                          ),
                                          StartTime: event.StartTime
                                        };
                                      });
                                    return ($state.eventCalendar.value[
                                      "Dates Form List"
                                    ] = updatedPaidFormList);
                                  })()
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postDates"] != null &&
                      typeof $steps["postDates"] === "object" &&
                      typeof $steps["postDates"].then === "function"
                    ) {
                      $steps["postDates"] = await $steps["postDates"];
                    }
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["eventCalendar2", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["eventCalendar2"] = ref;
                  },
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "eventCalendar2.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "eventCalendar2.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"eventCalendar2"}
                    data-plasmic-override={overrides.eventCalendar2}
                    {...child$Props}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m7Gss
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Create your ticket types"}
                        </span>
                      </React.Fragment>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__neq51)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__lTIh4
                        )}
                        color={"softSand"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runActionOnFormList"] = true
                            ? (() => {
                                const actionArgs = {};
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnFormList"] != null &&
                            typeof $steps["runActionOnFormList"] === "object" &&
                            typeof $steps["runActionOnFormList"].then ===
                              "function"
                          ) {
                            $steps["runActionOnFormList"] = await $steps[
                              "runActionOnFormList"
                            ];
                          }
                        }}
                        shape={"sharp"}
                        startIcon={
                          <CheckSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__caVdH,
                              {
                                [sty.svgeventStep_step3__caVdHemNtK]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Paid"}
                      </Button>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__etres
                        )}
                        color={"softSand"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runActionOnFreeFormList"] = true
                            ? (() => {
                                const actionArgs = {};
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnFreeFormList"] != null &&
                            typeof $steps["runActionOnFreeFormList"] ===
                              "object" &&
                            typeof $steps["runActionOnFreeFormList"].then ===
                              "function"
                          ) {
                            $steps["runActionOnFreeFormList"] = await $steps[
                              "runActionOnFreeFormList"
                            ];
                          }
                        }}
                        shape={"sharp"}
                        startIcon={
                          <CheckSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qGmup,
                              {
                                [sty.svgeventStep_step3__qGmupEmNtK]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Free"}
                      </Button>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__lQ8DS
                        )}
                        color={"softSand"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runActionOnDonationFormList"] = true
                            ? (() => {
                                const actionArgs = {};
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnDonationFormList"] != null &&
                            typeof $steps["runActionOnDonationFormList"] ===
                              "object" &&
                            typeof $steps["runActionOnDonationFormList"]
                              .then === "function"
                          ) {
                            $steps["runActionOnDonationFormList"] =
                              await $steps["runActionOnDonationFormList"];
                          }
                        }}
                        shape={"sharp"}
                        startIcon={
                          <CheckSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___4YddW,
                              {
                                [sty.svgeventStep_step3___4YddWemNtK]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Donation"}
                      </Button>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6EbTx
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xTHb1
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yOrNv
                          )}
                        >
                          {"Ticket type"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2CNsw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6InHe
                          )}
                        >
                          {"Ticket name"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gkSZ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jLovo
                          )}
                        >
                          {"Quantity"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__u72Rm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9QJi
                          )}
                        >
                          {"Price"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___13Cr4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9JIbo
                          )}
                        >
                          {"Actions"}
                        </div>
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pxQmN)}
                    >
                      <FormListWrapper
                        data-plasmic-name={"paidFormList"}
                        data-plasmic-override={overrides.paidFormList}
                        className={classNames(
                          "__wab_instance",
                          sty.paidFormList
                        )}
                        initialValue={[{}]}
                        name={"Paid Form List"}
                        ref={ref => {
                          $refs["paidFormList"] = ref;
                        }}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dS70F
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pVl2C
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bJzZj
                                  )}
                                >
                                  {"Paid"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__w2UwW
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__dIXjh
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___2Jz
                                      )}
                                    >
                                      {"Ticket name"}
                                    </div>
                                  }
                                  name={"TicketType"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input", "value"],
                                          AntdInput_Helpers
                                        ),
                                      placeholder: "eg. General Admission",
                                      value: generateStateValueProp($state, [
                                        "input",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input"}
                                        data-plasmic-override={overrides.input}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__g9DxJ
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__aQW
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bhgaJ
                                      )}
                                    >
                                      {"Quantity"}
                                    </div>
                                  }
                                  name={"TicketQuantity"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input2
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input2", "value"],
                                          AntdInput_Helpers
                                        ),
                                      placeholder: "Unlimited",
                                      value: generateStateValueProp($state, [
                                        "input2",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input2.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input2"}
                                        data-plasmic-override={overrides.input2}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qrtvl
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___4ZVlt
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__rSldN
                                      )}
                                    >
                                      {"Price"}
                                    </div>
                                  }
                                  name={"TicketPrice"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input3
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input3", "value"],
                                          AntdInput_Helpers
                                        ),
                                      placeholder: "Cost",
                                      value: generateStateValueProp($state, [
                                        "input3",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input3.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input3"}
                                        data-plasmic-override={overrides.input3}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__blv8L,
                                  {
                                    [sty.freeBoxeventStep_step2__blv8L44F2Z]:
                                      hasVariant($state, "eventStep", "step2")
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___7Nl3H,
                                    {
                                      [sty.freeBoxeventStep_step3___7Nl3HEmNtK]:
                                        hasVariant($state, "eventStep", "step3")
                                    }
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["runActionOnPaidFormList"] = true
                                      ? (() => {
                                          const actionArgs = {};
                                          return (({
                                            tplRef,
                                            action,
                                            args
                                          }) => {
                                            return $refs?.[tplRef]?.[action]?.(
                                              ...(args ?? [])
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runActionOnPaidFormList"] !=
                                        null &&
                                      typeof $steps[
                                        "runActionOnPaidFormList"
                                      ] === "object" &&
                                      typeof $steps["runActionOnPaidFormList"]
                                        .then === "function"
                                    ) {
                                      $steps["runActionOnPaidFormList"] =
                                        await $steps["runActionOnPaidFormList"];
                                    }
                                  }}
                                >
                                  <TrashSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__wn4Bx
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            </div>
                          )}
                        </DataCtxReader__>
                      </FormListWrapper>
                      <FormListWrapper
                        data-plasmic-name={"freeFormList"}
                        data-plasmic-override={overrides.freeFormList}
                        className={classNames(
                          "__wab_instance",
                          sty.freeFormList
                        )}
                        initialValue={[]}
                        name={"Free Form List"}
                        ref={ref => {
                          $refs["freeFormList"] = ref;
                        }}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wxK1B
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5WSaW
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__q2Gme
                                  )}
                                >
                                  {"Free"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kdRhf
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__twbe3
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__oZcXd
                                      )}
                                    >
                                      {"Ticket name"}
                                    </div>
                                  }
                                  name={"TicketType"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input4
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input4", "value"],
                                          AntdInput_Helpers
                                        ),
                                      placeholder: "eg. General Admission",
                                      value: generateStateValueProp($state, [
                                        "input4",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input4.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input4"}
                                        data-plasmic-override={overrides.input4}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uAiUy
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__zleBa
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__sjVxZ
                                      )}
                                    >
                                      {"Quantity"}
                                    </div>
                                  }
                                  name={"TicketQuantity"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input5
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input5", "value"],
                                          AntdInput_Helpers
                                        ),
                                      placeholder: "Unlimited",
                                      value: generateStateValueProp($state, [
                                        "input5",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input5.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input5"}
                                        data-plasmic-override={overrides.input5}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pmjk4
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___2RMwm
                                  )}
                                  initialValue={"0"}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___29Ain
                                      )}
                                    >
                                      {"Price"}
                                    </div>
                                  }
                                  name={"TicketPrice"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input6
                                      ),
                                      disabled: true,
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input6", "value"],
                                          AntdInput_Helpers
                                        ),
                                      placeholder: ``,
                                      value: generateStateValueProp($state, [
                                        "input6",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input6.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input6"}
                                        data-plasmic-override={overrides.input6}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9XbdE
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__pPeIq
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__w2Fen
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runActionOnFreeFormList"] = true
                                        ? (() => {
                                            const actionArgs = {};
                                            return (({
                                              tplRef,
                                              action,
                                              args
                                            }) => {
                                              return $refs?.[tplRef]?.[
                                                action
                                              ]?.(...(args ?? []));
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runActionOnFreeFormList"] !=
                                          null &&
                                        typeof $steps[
                                          "runActionOnFreeFormList"
                                        ] === "object" &&
                                        typeof $steps["runActionOnFreeFormList"]
                                          .then === "function"
                                      ) {
                                        $steps["runActionOnFreeFormList"] =
                                          await $steps[
                                            "runActionOnFreeFormList"
                                          ];
                                      }
                                    }}
                                  >
                                    <TrashSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___3KyVt
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              </div>
                            </div>
                          )}
                        </DataCtxReader__>
                      </FormListWrapper>
                      <FormListWrapper
                        data-plasmic-name={"donationFormList"}
                        data-plasmic-override={overrides.donationFormList}
                        className={classNames(
                          "__wab_instance",
                          sty.donationFormList
                        )}
                        initialValue={[]}
                        name={"Donation Form List"}
                        ref={ref => {
                          $refs["donationFormList"] = ref;
                        }}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hEgIc
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vveOs
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mEg2
                                  )}
                                >
                                  {"Donation"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__tSnQz
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__lXei
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__vse3Y
                                      )}
                                    >
                                      {"Ticket name"}
                                    </div>
                                  }
                                  name={"TicketType"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input7
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input7", "value"],
                                          AntdInput_Helpers
                                        ),
                                      value: generateStateValueProp($state, [
                                        "input7",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input7.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input7"}
                                        data-plasmic-override={overrides.input7}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__yZPw
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__o3VPk
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__p3TgU
                                      )}
                                    >
                                      {"Quantity"}
                                    </div>
                                  }
                                  name={"TicketQuantity"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input8
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input8", "value"],
                                          AntdInput_Helpers
                                        ),
                                      value: generateStateValueProp($state, [
                                        "input8",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input8.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input8"}
                                        data-plasmic-override={overrides.input8}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___7Flve
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__fw1FK
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___0KpA
                                      )}
                                    >
                                      {"Price"}
                                    </div>
                                  }
                                  name={"TicketPrice"}
                                >
                                  <AntdInputNumber
                                    data-plasmic-name={"numberInput"}
                                    data-plasmic-override={
                                      overrides.numberInput
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.numberInput
                                    )}
                                    min={0}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["numberInput", "value"]
                                    )}
                                    placeholder={"Min"}
                                    type={"number"}
                                    value={generateStateValueProp($state, [
                                      "numberInput",
                                      "value"
                                    ])}
                                  />
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vLpRq
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__sq5SE
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__lvs4R
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runActionOnDonationFormList"] =
                                        true
                                          ? (() => {
                                              const actionArgs = {};
                                              return (({
                                                tplRef,
                                                action,
                                                args
                                              }) => {
                                                return $refs?.[tplRef]?.[
                                                  action
                                                ]?.(...(args ?? []));
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["runActionOnDonationFormList"] !=
                                          null &&
                                        typeof $steps[
                                          "runActionOnDonationFormList"
                                        ] === "object" &&
                                        typeof $steps[
                                          "runActionOnDonationFormList"
                                        ].then === "function"
                                      ) {
                                        $steps["runActionOnDonationFormList"] =
                                          await $steps[
                                            "runActionOnDonationFormList"
                                          ];
                                      }
                                    }}
                                  >
                                    <TrashSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__ywUdF
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              </div>
                            </div>
                          )}
                        </DataCtxReader__>
                      </FormListWrapper>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__hyE9K,
                        {
                          [sty.freeBoxeventState_editStep1__hyE9KJw2KH]:
                            hasVariant($state, "eventState", "editStep1"),
                          [sty.freeBoxeventState_editStep2__hyE9KKq1Ip]:
                            hasVariant($state, "eventState", "editStep2"),
                          [sty.freeBoxeventState_editStep3__hyE9Kz0Kya]:
                            hasVariant($state, "eventState", "editStep3")
                        }
                      )}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__xQYat
                        )}
                        color={"softSand"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateEventStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["eventStep"]
                                  },
                                  operation: 0,
                                  value: "step2"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEventStep"] != null &&
                            typeof $steps["updateEventStep"] === "object" &&
                            typeof $steps["updateEventStep"].then === "function"
                          ) {
                            $steps["updateEventStep"] = await $steps[
                              "updateEventStep"
                            ];
                          }
                        }}
                        startIcon={
                          <CheckSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xxgS
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Return"}
                      </Button>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__aCbq1,
                          {
                            [sty.buttoneventStep_step1__aCbq1KwxRr]: hasVariant(
                              $state,
                              "eventStep",
                              "step1"
                            ),
                            [sty.buttoneventStep_step2__aCbq144F2Z]: hasVariant(
                              $state,
                              "eventStep",
                              "step2"
                            )
                          }
                        )}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ysYRs
                          )}
                        >
                          {"Submit event"}
                        </div>
                      </AntdButton>
                    </Stack__>
                  </FormWrapper>
                );
              })()}
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"editEvent"}
              data-plasmic-override={overrides.editEvent}
              hasGap={true}
              className={classNames(projectcss.all, sty.editEvent, {
                [sty.editEventeventState_editStep1]: hasVariant(
                  $state,
                  "eventState",
                  "editStep1"
                ),
                [sty.editEventeventState_editStep2]: hasVariant(
                  $state,
                  "eventState",
                  "editStep2"
                ),
                [sty.editEventeventState_editStep3]: hasVariant(
                  $state,
                  "eventState",
                  "editStep3"
                )
              })}
              id={"edit-event"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__chqR,
                  {
                    [sty.texteventState_editStep3__chqRz0Kya]: hasVariant(
                      $state,
                      "eventState",
                      "editStep3"
                    )
                  }
                )}
              >
                {"Edit your event"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hQcLc,
                  {
                    [sty.texteventState_editStep1__hQcLcJw2KH]: hasVariant(
                      $state,
                      "eventState",
                      "editStep1"
                    ),
                    [sty.texteventState_editStep2__hQcLcKq1Ip]: hasVariant(
                      $state,
                      "eventState",
                      "editStep2"
                    ),
                    [sty.texteventState_editStep3__hQcLcz0Kya]: hasVariant(
                      $state,
                      "eventState",
                      "editStep3"
                    )
                  }
                )}
              >
                {hasVariant($state, "eventState", "editStep3") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.selectedRow.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : hasVariant($state, "eventState", "editStep2") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.selectedRow.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : hasVariant($state, "eventState", "editStep1") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.selectedRow.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  "Enter some text"
                )}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"editEventName"}
                data-plasmic-override={overrides.editEventName}
                hasGap={true}
                className={classNames(projectcss.all, sty.editEventName, {
                  [sty.editEventNameeventState_editStep2]: hasVariant(
                    $state,
                    "eventState",
                    "editStep2"
                  ),
                  [sty.editEventNameeventState_editStep3]: hasVariant(
                    $state,
                    "eventState",
                    "editStep3"
                  )
                })}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__eNpeZ)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f6Jmt
                    )}
                  >
                    {"What is your event name?"}
                  </div>
                  <TextInput
                    data-plasmic-name={"editName"}
                    data-plasmic-override={overrides.editName}
                    className={classNames("__wab_instance", sty.editName)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["editName", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    value={
                      generateStateValueProp($state, ["editName", "value"]) ??
                      ""
                    }
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hGaLd)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d8Tfr
                    )}
                  >
                    {"Describe your event"}
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.editDescription
                      ),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["editDescription", "value"],
                        AntdTextArea_Helpers
                      ),
                      value: generateStateValueProp($state, [
                        "editDescription",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "editDescription.value"
                        }
                      ],
                      [],
                      AntdTextArea_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdTextArea
                        data-plasmic-name={"editDescription"}
                        data-plasmic-override={overrides.editDescription}
                        {...child$Props}
                      />
                    );
                  })()}
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kf2Af)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xK7D
                    )}
                  >
                    {"Select a category for your event"}
                  </div>
                  <Select
                    data-plasmic-name={"select3"}
                    data-plasmic-override={overrides.select3}
                    className={classNames("__wab_instance", sty.select3)}
                    name={"edit category"}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["select3", "value"])(
                        eventArgs[0]
                      );
                    }}
                    onTicketIdChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "select3",
                        "ticketId"
                      ])(eventArgs[0]);
                    }}
                    options={(() => {
                      const __composite = [
                        { value: null, label: null },
                        { value: null, label: null },
                        { value: null }
                      ];
                      __composite["0"]["value"] = "music";
                      __composite["0"]["label"] = "Music";
                      __composite["1"]["value"] = "sports";
                      __composite["1"]["label"] = "Sports";
                      __composite["2"]["value"] = "film";
                      return __composite;
                    })()}
                    ticketId={generateStateValueProp($state, [
                      "select3",
                      "ticketId"
                    ])}
                    value={generateStateValueProp($state, ["select3", "value"])}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5A37)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Hq0P
                    )}
                  >
                    {"Event Address"}
                  </div>
                  <TextInput
                    data-plasmic-name={"editAddress"}
                    data-plasmic-override={overrides.editAddress}
                    className={classNames("__wab_instance", sty.editAddress)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "editAddress",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    value={
                      generateStateValueProp($state, [
                        "editAddress",
                        "value"
                      ]) ?? ""
                    }
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ejg90)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4RnHu
                    )}
                  >
                    {"Venue Name"}
                  </div>
                  <TextInput
                    data-plasmic-name={"editVenue"}
                    data-plasmic-override={overrides.editVenue}
                    className={classNames("__wab_instance", sty.editVenue)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["editVenue", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    value={
                      generateStateValueProp($state, ["editVenue", "value"]) ??
                      ""
                    }
                  />
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__zz7Q6, {
                    [sty.freeBoxeventStep_step1__zz7Q6KwxRr]: hasVariant(
                      $state,
                      "eventStep",
                      "step1"
                    ),
                    [sty.freeBoxeventStep_step2__zz7Q644F2Z]: hasVariant(
                      $state,
                      "eventStep",
                      "step2"
                    ),
                    [sty.freeBoxeventStep_step3__zz7Q6EmNtK]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  })}
                >
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__ziHrH, {
                      [sty.buttoneventStep_step2__ziHrH44F2Z]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.buttoneventStep_step3__ziHrHemNtK]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                    onClick={async () => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["eventState"]
                              },
                              operation: 0,
                              value: "editStep2"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q0Asq
                      )}
                    >
                      {"Go to calendar"}
                    </div>
                  </AntdButton>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"editEventCalendar"}
                data-plasmic-override={overrides.editEventCalendar}
                hasGap={true}
                className={classNames(projectcss.all, sty.editEventCalendar, {
                  [sty.editEventCalendareventState_editStep1]: hasVariant(
                    $state,
                    "eventState",
                    "editStep1"
                  ),
                  [sty.editEventCalendareventState_editStep2]: hasVariant(
                    $state,
                    "eventState",
                    "editStep2"
                  ),
                  [sty.editEventCalendareventState_editStep3]: hasVariant(
                    $state,
                    "eventState",
                    "editStep3"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__mbXtS)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3Zsj1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rKo9C
                      )}
                    >
                      {"Start date"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vQ2G)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7Ie8V
                      )}
                    >
                      {"Start Time"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hc4My)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9KS3
                      )}
                    >
                      {"End Date"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__batr9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fgafH
                      )}
                    >
                      {"End time"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yGz58)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ph6Zk
                      )}
                    >
                      {"Actions"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"addDates"}
                  data-plasmic-override={overrides.addDates}
                  className={classNames(projectcss.all, sty.addDates)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qJmgl)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.addStartDate
                        ),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["addStartDate", "value"],
                          AntdDatePicker_Helpers
                        ),
                        popupScopeClassName:
                          sty["addStartDate__datePickerPopup"],
                        value: generateStateValueProp($state, [
                          "addStartDate",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "addStartDate.value"
                          }
                        ],
                        [],
                        AntdDatePicker_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdDatePicker
                          data-plasmic-name={"addStartDate"}
                          data-plasmic-override={overrides.addStartDate}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tGcc)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.addStartTime
                        ),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["addStartTime", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "addStartTime",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "addStartTime.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"addStartTime"}
                          data-plasmic-override={overrides.addStartTime}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__j4HJi)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.addEndDate),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["addEndDate", "value"],
                          AntdDatePicker_Helpers
                        ),
                        popupScopeClassName: sty["addEndDate__datePickerPopup"],
                        value: generateStateValueProp($state, [
                          "addEndDate",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "addEndDate.value"
                          }
                        ],
                        [],
                        AntdDatePicker_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdDatePicker
                          data-plasmic-name={"addEndDate"}
                          data-plasmic-override={overrides.addEndDate}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kR8D)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.addEndTime),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["addEndTime", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "addEndTime",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "addEndTime.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"addEndTime"}
                          data-plasmic-override={overrides.addEndTime}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q5De)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__tuirV,
                        {
                          [sty.buttoneventStep_step3__tuirVemNtK]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                      color={"blue"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["httpPost"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                  opId: "86477e4d-7a10-4f18-92f3-9684c8e34f36",
                                  userArgs: {
                                    body: [
                                      (() => {
                                        const formatDate = dateStr => {
                                          const date = new Date(dateStr);
                                          const year = date.getFullYear();
                                          const month = String(
                                            date.getMonth() + 1
                                          ).padStart(2, "0");
                                          const day = String(
                                            date.getDate()
                                          ).padStart(2, "0");
                                          return `${year}-${month}-${day}`;
                                        };
                                        return formatDate(
                                          $state.addStartDate.value
                                        );
                                      })(),
                                      $state.addStartTime.value,
                                      (() => {
                                        const formatDate = dateStr => {
                                          const date = new Date(dateStr);
                                          const year = date.getFullYear();
                                          const month = String(
                                            date.getMonth() + 1
                                          ).padStart(2, "0");
                                          const day = String(
                                            date.getDate()
                                          ).padStart(2, "0");
                                          return `${year}-${month}-${day}`;
                                        };
                                        return formatDate(
                                          $state.addEndDate.value
                                        );
                                      })(),
                                      $state.addEndTime.value,
                                      $state.selectedRow.id
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpPost"] != null &&
                          typeof $steps["httpPost"] === "object" &&
                          typeof $steps["httpPost"].then === "function"
                        ) {
                          $steps["httpPost"] = await $steps["httpPost"];
                        }
                      }}
                      size={"compact"}
                      startIcon={
                        <CheckSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5HHHb
                          )}
                          role={"img"}
                        />
                      }
                    >
                      {"Submit"}
                    </Button>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7DqxR, {
                    [sty.freeBoxeventStep_step1___7DqxRkwxRr]: hasVariant(
                      $state,
                      "eventStep",
                      "step1"
                    ),
                    [sty.freeBoxeventStep_step2___7DqxR44F2Z]: hasVariant(
                      $state,
                      "eventStep",
                      "step2"
                    ),
                    [sty.freeBoxeventStep_step3___7DqxRemNtK]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  })}
                >
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__oWEh7, {
                      [sty.buttoneventState_editStep1__oWEh7Jw2KH]: hasVariant(
                        $state,
                        "eventState",
                        "editStep1"
                      ),
                      [sty.buttoneventState_editStep2__oWEh7Kq1Ip]: hasVariant(
                        $state,
                        "eventState",
                        "editStep2"
                      ),
                      [sty.buttoneventState_editStep3__oWEh7Z0Kya]: hasVariant(
                        $state,
                        "eventState",
                        "editStep3"
                      ),
                      [sty.buttoneventStep_step2__oWEh744F2Z]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.buttoneventStep_step3__oWEh7EmNtK]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                    onClick={async () => {
                      const $steps = {};

                      $steps["httpPatch"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["eventState"]
                              },
                              operation: 0,
                              value: "editStep3"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["httpPatch"] != null &&
                        typeof $steps["httpPatch"] === "object" &&
                        typeof $steps["httpPatch"].then === "function"
                      ) {
                        $steps["httpPatch"] = await $steps["httpPatch"];
                      }
                    }}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pAMuP
                      )}
                    >
                      {"Go to tickets"}
                    </div>
                  </AntdButton>
                  <Button
                    className={classNames("__wab_instance", sty.button__qCRw, {
                      [sty.buttoneventState_editStep1__qCRwJw2KH]: hasVariant(
                        $state,
                        "eventState",
                        "editStep1"
                      )
                    })}
                    color={"softSand"}
                    size={"compact"}
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__gIZsX, {
                          [sty.svgeventState_editStep1__gIZsXJw2KH]: hasVariant(
                            $state,
                            "eventState",
                            "editStep1"
                          )
                        })}
                        role={"img"}
                      />
                    }
                  >
                    {"Return"}
                  </Button>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"editEventTickets"}
                data-plasmic-override={overrides.editEventTickets}
                hasGap={true}
                className={classNames(projectcss.all, sty.editEventTickets, {
                  [sty.editEventTicketseventState_editStep1]: hasVariant(
                    $state,
                    "eventState",
                    "editStep1"
                  ),
                  [sty.editEventTicketseventState_editStep2]: hasVariant(
                    $state,
                    "eventState",
                    "editStep2"
                  ),
                  [sty.editEventTicketseventState_editStep3]: hasVariant(
                    $state,
                    "eventState",
                    "editStep3"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rvbC1)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iz9D8)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vcJsh
                      )}
                    >
                      {"Ticket type"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rrnIq)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jlDjh
                      )}
                    >
                      {"Ticket name"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__igcdi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v9FF7
                      )}
                    >
                      {"Quantity"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zq4H7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ec7Cg
                      )}
                    >
                      {"Price"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a5Ygf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ky5Te
                      )}
                    >
                      {"Actions"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"addTickets"}
                  data-plasmic-override={overrides.addTickets}
                  className={classNames(projectcss.all, sty.addTickets)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rWEz3)}
                  >
                    <Select
                      data-plasmic-name={"addTicketType"}
                      data-plasmic-override={overrides.addTicketType}
                      className={classNames(
                        "__wab_instance",
                        sty.addTicketType
                      )}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "addTicketType",
                          "value"
                        ])(eventArgs[0]);
                      }}
                      onTicketIdChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "addTicketType",
                          "ticketId"
                        ])(eventArgs[0]);
                      }}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null },
                          { value: null, label: null },
                          { value: null, label: null }
                        ];
                        __composite["0"]["value"] = "paid";
                        __composite["0"]["label"] = "Paid";
                        __composite["1"]["value"] = "free";
                        __composite["1"]["label"] = "Free";
                        __composite["2"]["value"] = "donation";
                        __composite["2"]["label"] = "Donation";
                        return __composite;
                      })()}
                      ticketId={generateStateValueProp($state, [
                        "addTicketType",
                        "ticketId"
                      ])}
                      value={generateStateValueProp($state, [
                        "addTicketType",
                        "value"
                      ])}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yixI)}
                  >
                    <TextInput
                      data-plasmic-name={"addTicketName"}
                      data-plasmic-override={overrides.addTicketName}
                      className={classNames(
                        "__wab_instance",
                        sty.addTicketName
                      )}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "addTicketName",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      value={
                        generateStateValueProp($state, [
                          "addTicketName",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oBoL)}
                  >
                    <TextInput
                      data-plasmic-name={"addTicketQuantity"}
                      data-plasmic-override={overrides.addTicketQuantity}
                      className={classNames(
                        "__wab_instance",
                        sty.addTicketQuantity
                      )}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "addTicketQuantity",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      value={
                        generateStateValueProp($state, [
                          "addTicketQuantity",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fIlI2)}
                  >
                    <TextInput
                      data-plasmic-name={"addTicketPrice"}
                      data-plasmic-override={overrides.addTicketPrice}
                      className={classNames(
                        "__wab_instance",
                        sty.addTicketPrice
                      )}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "addTicketPrice",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      value={
                        generateStateValueProp($state, [
                          "addTicketPrice",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8LT3M)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__r0Dxg,
                        {
                          [sty.buttoneventState_editStep2__r0DxgKq1Ip]:
                            hasVariant($state, "eventState", "editStep2"),
                          [sty.buttoneventStep_step3__r0DxgEmNtK]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                      color={"blue"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["httpPost"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                  opId: "b12c0359-cdd9-4089-bb31-ee952166b32e",
                                  userArgs: {
                                    body: [
                                      $state.addTicketName.value,
                                      $state.addTicketPrice.value,
                                      $state.addTicketQuantity.value,
                                      $state.addTicketType.value,
                                      $state.selectedRow.id
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpPost"] != null &&
                          typeof $steps["httpPost"] === "object" &&
                          typeof $steps["httpPost"].then === "function"
                        ) {
                          $steps["httpPost"] = await $steps["httpPost"];
                        }
                      }}
                      size={"compact"}
                      startIcon={
                        <CheckSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4FFm3
                          )}
                          role={"img"}
                        />
                      }
                    >
                      {"Submit"}
                    </Button>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___52Gqt, {
                    [sty.freeBoxeventStep_step1___52GqtKwxRr]: hasVariant(
                      $state,
                      "eventStep",
                      "step1"
                    ),
                    [sty.freeBoxeventStep_step2___52Gqt44F2Z]: hasVariant(
                      $state,
                      "eventStep",
                      "step2"
                    ),
                    [sty.freeBoxeventStep_step3___52GqtEmNtK]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  })}
                >
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__gePrD, {
                      [sty.buttoneventStep_step2__gePrD44F2Z]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.buttoneventStep_step3__gePrDemNtK]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                    onClick={async () => {
                      const $steps = {};

                      $steps["httpPatch"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                opId: "d7f10c37-31c8-4482-99ca-304889680563",
                                userArgs: {
                                  path: [$state.selectedRow.id],
                                  body: [
                                    $state.editName.value,
                                    $state.editDescription.value,
                                    $state.editVenue.value,
                                    $state.select3.value
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["httpPatch"] != null &&
                        typeof $steps["httpPatch"] === "object" &&
                        typeof $steps["httpPatch"].then === "function"
                      ) {
                        $steps["httpPatch"] = await $steps["httpPatch"];
                      }
                    }}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Xdia
                      )}
                    >
                      {"submit changes"}
                    </div>
                  </AntdButton>
                  <Button
                    className={classNames("__wab_instance", sty.button__jBjgf, {
                      [sty.buttoneventState_editStep1__jBjgfJw2KH]: hasVariant(
                        $state,
                        "eventState",
                        "editStep1"
                      )
                    })}
                    color={"softSand"}
                    size={"compact"}
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg___4Kszs, {
                          [sty.svgeventState_editStep1___4KszsJw2KH]:
                            hasVariant($state, "eventState", "editStep1")
                        })}
                        role={"img"}
                      />
                    }
                  >
                    {"Return"}
                  </Button>
                </div>
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__qLBk)} />
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "options",
    "newEvent",
    "eventName",
    "textInput",
    "textArea",
    "select",
    "textInput2",
    "textInput3",
    "eventCalendar",
    "datesFormList",
    "dateTimePicker",
    "textInput7",
    "dateTimePicker2",
    "textInput8",
    "eventCalendar2",
    "paidFormList",
    "input",
    "input2",
    "input3",
    "freeFormList",
    "input4",
    "input5",
    "input6",
    "donationFormList",
    "input7",
    "input8",
    "numberInput",
    "editEvent",
    "editEventName",
    "editName",
    "editDescription",
    "select3",
    "editAddress",
    "editVenue",
    "editEventCalendar",
    "addDates",
    "addStartDate",
    "addStartTime",
    "addEndDate",
    "addEndTime",
    "editEventTickets",
    "addTickets",
    "addTicketType",
    "addTicketName",
    "addTicketQuantity",
    "addTicketPrice"
  ],
  options: ["options"],
  newEvent: [
    "newEvent",
    "eventName",
    "textInput",
    "textArea",
    "select",
    "textInput2",
    "textInput3",
    "eventCalendar",
    "datesFormList",
    "dateTimePicker",
    "textInput7",
    "dateTimePicker2",
    "textInput8",
    "eventCalendar2",
    "paidFormList",
    "input",
    "input2",
    "input3",
    "freeFormList",
    "input4",
    "input5",
    "input6",
    "donationFormList",
    "input7",
    "input8",
    "numberInput"
  ],
  eventName: [
    "eventName",
    "textInput",
    "textArea",
    "select",
    "textInput2",
    "textInput3"
  ],
  textInput: ["textInput"],
  textArea: ["textArea"],
  select: ["select"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  eventCalendar: [
    "eventCalendar",
    "datesFormList",
    "dateTimePicker",
    "textInput7",
    "dateTimePicker2",
    "textInput8"
  ],
  datesFormList: [
    "datesFormList",
    "dateTimePicker",
    "textInput7",
    "dateTimePicker2",
    "textInput8"
  ],
  dateTimePicker: ["dateTimePicker"],
  textInput7: ["textInput7"],
  dateTimePicker2: ["dateTimePicker2"],
  textInput8: ["textInput8"],
  eventCalendar2: [
    "eventCalendar2",
    "paidFormList",
    "input",
    "input2",
    "input3",
    "freeFormList",
    "input4",
    "input5",
    "input6",
    "donationFormList",
    "input7",
    "input8",
    "numberInput"
  ],
  paidFormList: ["paidFormList", "input", "input2", "input3"],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  freeFormList: ["freeFormList", "input4", "input5", "input6"],
  input4: ["input4"],
  input5: ["input5"],
  input6: ["input6"],
  donationFormList: ["donationFormList", "input7", "input8", "numberInput"],
  input7: ["input7"],
  input8: ["input8"],
  numberInput: ["numberInput"],
  editEvent: [
    "editEvent",
    "editEventName",
    "editName",
    "editDescription",
    "select3",
    "editAddress",
    "editVenue",
    "editEventCalendar",
    "addDates",
    "addStartDate",
    "addStartTime",
    "addEndDate",
    "addEndTime",
    "editEventTickets",
    "addTickets",
    "addTicketType",
    "addTicketName",
    "addTicketQuantity",
    "addTicketPrice"
  ],
  editEventName: [
    "editEventName",
    "editName",
    "editDescription",
    "select3",
    "editAddress",
    "editVenue"
  ],
  editName: ["editName"],
  editDescription: ["editDescription"],
  select3: ["select3"],
  editAddress: ["editAddress"],
  editVenue: ["editVenue"],
  editEventCalendar: [
    "editEventCalendar",
    "addDates",
    "addStartDate",
    "addStartTime",
    "addEndDate",
    "addEndTime"
  ],
  addDates: [
    "addDates",
    "addStartDate",
    "addStartTime",
    "addEndDate",
    "addEndTime"
  ],
  addStartDate: ["addStartDate"],
  addStartTime: ["addStartTime"],
  addEndDate: ["addEndDate"],
  addEndTime: ["addEndTime"],
  editEventTickets: [
    "editEventTickets",
    "addTickets",
    "addTicketType",
    "addTicketName",
    "addTicketQuantity",
    "addTicketPrice"
  ],
  addTickets: [
    "addTickets",
    "addTicketType",
    "addTicketName",
    "addTicketQuantity",
    "addTicketPrice"
  ],
  addTicketType: ["addTicketType"],
  addTicketName: ["addTicketName"],
  addTicketQuantity: ["addTicketQuantity"],
  addTicketPrice: ["addTicketPrice"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  options: typeof Options;
  newEvent: "div";
  eventName: typeof FormWrapper;
  textInput: typeof TextInput;
  textArea: typeof AntdTextArea;
  select: typeof Select;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  eventCalendar: typeof FormWrapper;
  datesFormList: typeof FormListWrapper;
  dateTimePicker: typeof AntdDatePicker;
  textInput7: typeof TextInput;
  dateTimePicker2: typeof AntdDatePicker;
  textInput8: typeof TextInput;
  eventCalendar2: typeof FormWrapper;
  paidFormList: typeof FormListWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  freeFormList: typeof FormListWrapper;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  input6: typeof AntdInput;
  donationFormList: typeof FormListWrapper;
  input7: typeof AntdInput;
  input8: typeof AntdInput;
  numberInput: typeof AntdInputNumber;
  editEvent: "div";
  editEventName: "div";
  editName: typeof TextInput;
  editDescription: typeof AntdTextArea;
  select3: typeof Select;
  editAddress: typeof TextInput;
  editVenue: typeof TextInput;
  editEventCalendar: "div";
  addDates: "div";
  addStartDate: typeof AntdDatePicker;
  addStartTime: typeof AntdInput;
  addEndDate: typeof AntdDatePicker;
  addEndTime: typeof AntdInput;
  editEventTickets: "div";
  addTickets: "div";
  addTicketType: typeof Select;
  addTicketName: typeof TextInput;
  addTicketQuantity: typeof TextInput;
  addTicketPrice: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateEvent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateEvent__VariantsArgs;
    args?: PlasmicCreateEvent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateEvent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCreateEvent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateEvent__ArgProps,
          internalVariantPropNames: PlasmicCreateEvent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateEvent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCreateEvent";
  } else {
    func.displayName = `PlasmicCreateEvent.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateEvent = Object.assign(
  // Top-level PlasmicCreateEvent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    options: makeNodeComponent("options"),
    newEvent: makeNodeComponent("newEvent"),
    eventName: makeNodeComponent("eventName"),
    textInput: makeNodeComponent("textInput"),
    textArea: makeNodeComponent("textArea"),
    select: makeNodeComponent("select"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    eventCalendar: makeNodeComponent("eventCalendar"),
    datesFormList: makeNodeComponent("datesFormList"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    textInput7: makeNodeComponent("textInput7"),
    dateTimePicker2: makeNodeComponent("dateTimePicker2"),
    textInput8: makeNodeComponent("textInput8"),
    eventCalendar2: makeNodeComponent("eventCalendar2"),
    paidFormList: makeNodeComponent("paidFormList"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    freeFormList: makeNodeComponent("freeFormList"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    donationFormList: makeNodeComponent("donationFormList"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    numberInput: makeNodeComponent("numberInput"),
    editEvent: makeNodeComponent("editEvent"),
    editEventName: makeNodeComponent("editEventName"),
    editName: makeNodeComponent("editName"),
    editDescription: makeNodeComponent("editDescription"),
    select3: makeNodeComponent("select3"),
    editAddress: makeNodeComponent("editAddress"),
    editVenue: makeNodeComponent("editVenue"),
    editEventCalendar: makeNodeComponent("editEventCalendar"),
    addDates: makeNodeComponent("addDates"),
    addStartDate: makeNodeComponent("addStartDate"),
    addStartTime: makeNodeComponent("addStartTime"),
    addEndDate: makeNodeComponent("addEndDate"),
    addEndTime: makeNodeComponent("addEndTime"),
    editEventTickets: makeNodeComponent("editEventTickets"),
    addTickets: makeNodeComponent("addTickets"),
    addTicketType: makeNodeComponent("addTicketType"),
    addTicketName: makeNodeComponent("addTicketName"),
    addTicketQuantity: makeNodeComponent("addTicketQuantity"),
    addTicketPrice: makeNodeComponent("addTicketPrice"),

    // Metadata about props expected for PlasmicCreateEvent
    internalVariantProps: PlasmicCreateEvent__VariantProps,
    internalArgProps: PlasmicCreateEvent__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCreateEvent;
/* prettier-ignore-end */
