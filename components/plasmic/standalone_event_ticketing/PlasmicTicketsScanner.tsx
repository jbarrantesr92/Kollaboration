// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: MtmcKR1GuwbKEBJfYkVdj
// Component: VKlp-7xSYxqT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar2 from "../../Navbar2"; // plasmic-import: PlAJ5tJMUQMz/component
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import QrScanner from "../../QrScanner"; // plasmic-import: yok5nEYnb6DD/component
import Footer2 from "../../Footer2"; // plasmic-import: afuzx2tfyuUz/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: MtmcKR1GuwbKEBJfYkVdj/projectcss
import sty from "./PlasmicTicketsScanner.module.css"; // plasmic-import: VKlp-7xSYxqT/css

createPlasmicElementProxy;

export type PlasmicTicketsScanner__VariantMembers = {};
export type PlasmicTicketsScanner__VariantsArgs = {};
type VariantPropType = keyof PlasmicTicketsScanner__VariantsArgs;
export const PlasmicTicketsScanner__VariantProps = new Array<VariantPropType>();

export type PlasmicTicketsScanner__ArgsType = {};
type ArgPropType = keyof PlasmicTicketsScanner__ArgsType;
export const PlasmicTicketsScanner__ArgProps = new Array<ArgPropType>();

export type PlasmicTicketsScanner__OverridesType = {
  root?: Flex__<"div">;
  navbar2?: Flex__<typeof Navbar2>;
  conditionGuard?: Flex__<typeof ConditionGuard>;
  text?: Flex__<"div">;
  qrScanner?: Flex__<typeof QrScanner>;
  footer2?: Flex__<typeof Footer2>;
};

export interface DefaultTicketsScannerProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTicketsScanner__RenderFunc(props: {
  variants: PlasmicTicketsScanner__VariantsArgs;
  args: PlasmicTicketsScanner__ArgsType;
  overrides: PlasmicTicketsScanner__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const dataSourcesCtx = usePlasmicDataSourceContext();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getTicketId: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "62eafe43-5a02-4930-8eb9-8caf48985810",
        userArgs: {
          path: [$ctx.query.uuid]
        },
        cacheKey: `plasmic.$.62eafe43-5a02-4930-8eb9-8caf48985810.$.`,
        invalidatedKeys: null,
        roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
      };
    }),
    getTicketPurchaseId: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "db4bb7a8-a2b3-4bbc-b52d-41f5df52d87e",
        userArgs: {
          path: [$queries.getTicketId.data.response.data.PurchaseTicketId]
        },
        cacheKey: `plasmic.$.db4bb7a8-a2b3-4bbc-b52d-41f5df52d87e.$.`,
        invalidatedKeys: null,
        roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
      };
    }),
    getTicketInformation: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "6b4f7237-6da0-4376-8587-b23300a9197e",
        userArgs: {
          path: [$queries.getTicketPurchaseId.data.response.data.TicketId]
        },
        cacheKey: `plasmic.$.6b4f7237-6da0-4376-8587-b23300a9197e.$.`,
        invalidatedKeys: null,
        roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
      };
    }),
    getEventInformation: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "7a82dac9-a15d-4f17-99d8-acbd40e65051",
        userArgs: {
          path: [$queries.getTicketInformation.data.response.data.EventId]
        },
        cacheKey: `plasmic.$.7a82dac9-a15d-4f17-99d8-acbd40e65051.$.`,
        invalidatedKeys: null,
        roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
      };
    }),
    currentDomain: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "e7b72039-5d29-482a-a512-fac90415c7a3",
        userArgs: {
          path: [window.location.hostname]
        },
        cacheKey: `plasmic.$.e7b72039-5d29-482a-a512-fac90415c7a3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar2
            data-plasmic-name={"navbar2"}
            data-plasmic-override={overrides.navbar2}
            className={classNames("__wab_instance", sty.navbar2)}
          />

          <ConditionGuard
            data-plasmic-name={"conditionGuard"}
            data-plasmic-override={overrides.conditionGuard}
            className={classNames("__wab_instance", sty.conditionGuard)}
            condition={(() => {
              try {
                return (
                  currentUser.customProperties.role ==
                    "1ceacb7a-f026-46ef-9daa-13f8c86f89a3" ||
                  currentUser.customProperties.role ==
                    "07b345f2-a68e-4456-ae77-6fced8ee7cb7"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            onNotSatisfied={async () => {
              const $steps = {};

              $steps["goToLogin"] = true
                ? (() => {
                    const actionArgs = { destination: `/login` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToLogin"] != null &&
                typeof $steps["goToLogin"] === "object" &&
                typeof $steps["goToLogin"].then === "function"
              ) {
                $steps["goToLogin"] = await $steps["goToLogin"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uYUgR)}>
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Scan the QR code to validate the ticket"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__g6UtN)}>
                <QrScanner
                  data-plasmic-name={"qrScanner"}
                  data-plasmic-override={overrides.qrScanner}
                  className={classNames("__wab_instance", sty.qrScanner)}
                />
              </div>
            </div>
          </ConditionGuard>
          <Footer2
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            className={classNames("__wab_instance", sty.footer2)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar2", "conditionGuard", "text", "qrScanner", "footer2"],
  navbar2: ["navbar2"],
  conditionGuard: ["conditionGuard", "text", "qrScanner"],
  text: ["text"],
  qrScanner: ["qrScanner"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar2: typeof Navbar2;
  conditionGuard: typeof ConditionGuard;
  text: "div";
  qrScanner: typeof QrScanner;
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTicketsScanner__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTicketsScanner__VariantsArgs;
    args?: PlasmicTicketsScanner__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTicketsScanner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTicketsScanner__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTicketsScanner__ArgProps,
          internalVariantPropNames: PlasmicTicketsScanner__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTicketsScanner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTicketsScanner";
  } else {
    func.displayName = `PlasmicTicketsScanner.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"}
      appId={"MtmcKR1GuwbKEBJfYkVdj"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicTicketsScanner = Object.assign(
  // Top-level PlasmicTicketsScanner renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar2: makeNodeComponent("navbar2"),
    conditionGuard: makeNodeComponent("conditionGuard"),
    text: makeNodeComponent("text"),
    qrScanner: makeNodeComponent("qrScanner"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicTicketsScanner
    internalVariantProps: PlasmicTicketsScanner__VariantProps,
    internalArgProps: PlasmicTicketsScanner__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTicketsScanner;
/* prettier-ignore-end */
