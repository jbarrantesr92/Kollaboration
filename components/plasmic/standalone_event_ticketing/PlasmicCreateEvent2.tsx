// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: MtmcKR1GuwbKEBJfYkVdj
// Component: ZGxg8HRG_-ut

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import Options from "../../Options"; // plasmic-import: eW-v92peeoVq/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: KfDAmu4lid5o/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Select from "../../Select"; // plasmic-import: iiMExIyx9xlD/component
import Button from "../../Button"; // plasmic-import: 7c1YDuGGoKuq/component
import { FormListWrapper } from "@plasmicpkgs/antd5/skinny/FormList";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: MtmcKR1GuwbKEBJfYkVdj/projectcss
import sty from "./PlasmicCreateEvent2.module.css"; // plasmic-import: ZGxg8HRG_-ut/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: mFdXj3H03u7X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: V9lHh1c0c7g6/icon
import CalendarDotsDuotone1SvgIcon from "./icons/PlasmicIcon__CalendarDotsDuotone1Svg"; // plasmic-import: SG0SFfjUmVKv/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _VJXnu9sySb9/icon
import TrashSvgIcon from "./icons/PlasmicIcon__TrashSvg"; // plasmic-import: dKZ8ZQGn2s_e/icon
import PlusSvgIcon from "./icons/PlasmicIcon__PlusSvg"; // plasmic-import: 8gLchf1ApTDC/icon
import TicketSvgIcon from "./icons/PlasmicIcon__TicketSvg"; // plasmic-import: OxvLqJub0eBw/icon
import SealCheckDuotoneSvgIcon from "./icons/PlasmicIcon__SealCheckDuotoneSvg"; // plasmic-import: cbGOkv0a0q56/icon

createPlasmicElementProxy;

export type PlasmicCreateEvent2__VariantMembers = {
  eventStep: "step1" | "step2" | "step3";
  eventState: "editStep1" | "editStep2" | "editStep3";
};
export type PlasmicCreateEvent2__VariantsArgs = {
  eventStep?: SingleChoiceArg<"step1" | "step2" | "step3">;
  eventState?: SingleChoiceArg<"editStep1" | "editStep2" | "editStep3">;
};
type VariantPropType = keyof PlasmicCreateEvent2__VariantsArgs;
export const PlasmicCreateEvent2__VariantProps = new Array<VariantPropType>(
  "eventStep",
  "eventState"
);

export type PlasmicCreateEvent2__ArgsType = {};
type ArgPropType = keyof PlasmicCreateEvent2__ArgsType;
export const PlasmicCreateEvent2__ArgProps = new Array<ArgPropType>();

export type PlasmicCreateEvent2__OverridesType = {
  root?: Flex__<"div">;
  conditionGuard?: Flex__<typeof ConditionGuard>;
  options?: Flex__<typeof Options>;
  newEvent?: Flex__<"div">;
  eventName?: Flex__<typeof FormWrapper>;
  textInput?: Flex__<typeof TextInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  select?: Flex__<typeof Select>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  eventCalendar?: Flex__<typeof FormWrapper>;
  datesFormList?: Flex__<typeof FormListWrapper>;
  dateTimePicker?: Flex__<typeof AntdDatePicker>;
  textInput7?: Flex__<typeof TextInput>;
  dateTimePicker2?: Flex__<typeof AntdDatePicker>;
  textInput8?: Flex__<typeof TextInput>;
  eventCalendar2?: Flex__<typeof FormWrapper>;
  paidFormList?: Flex__<typeof FormListWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  freeFormList?: Flex__<typeof FormListWrapper>;
  input4?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  donationFormList?: Flex__<typeof FormListWrapper>;
  input7?: Flex__<typeof AntdInput>;
  input8?: Flex__<typeof AntdInput>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  editEvent?: Flex__<"div">;
  editEventName?: Flex__<"div">;
  editName?: Flex__<typeof TextInput>;
  editDescription?: Flex__<typeof AntdTextArea>;
  select3?: Flex__<typeof Select>;
  editAddress?: Flex__<typeof TextInput>;
  editVenue?: Flex__<typeof TextInput>;
  editEventCalendar?: Flex__<"div">;
  addDates?: Flex__<"div">;
  addStartDate?: Flex__<typeof AntdDatePicker>;
  addStartTime?: Flex__<typeof AntdInput>;
  addEndDate?: Flex__<typeof AntdDatePicker>;
  addEndTime?: Flex__<typeof AntdInput>;
  editEventTickets?: Flex__<"div">;
  addTickets?: Flex__<"div">;
  addTicketType?: Flex__<typeof Select>;
  addTicketName?: Flex__<typeof TextInput>;
  addTicketQuantity?: Flex__<typeof TextInput>;
  addTicketPrice?: Flex__<typeof TextInput>;
};

export interface DefaultCreateEvent2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateEvent2__RenderFunc(props: {
  variants: PlasmicCreateEvent2__VariantsArgs;
  args: PlasmicCreateEvent2__ArgsType;
  overrides: PlasmicCreateEvent2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "eventName.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "eventName",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "eventName.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "eventName",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "eventCalendar.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "eventCalendar",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "eventCalendar.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "eventCalendar",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "eventCalendar2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "eventCalendar2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "eventCalendar2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "eventCalendar2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "paid",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "free",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "donation",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "eventStep",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.eventStep
      },
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "dateTimePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectedRow",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "editName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editDescription.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventDescription;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editAddress.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventAddress;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editVenue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventVenue;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedRow.EventCategory;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "eventState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.eventState
      },
      {
        path: "addStartDate.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "addStartTime.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "addEndDate.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "addEndTime.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "addTicketName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "addTicketQuantity.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "addTicketPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "addTicketType.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "paid"
      },
      {
        path: "select.ticketId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select3.ticketId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "addTicketType.ticketId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    currentDomainId: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "b78fd612-3418-4931-ad25-f4d8df4d76c3",
        userArgs: {
          path: [window.location.hostname]
        },
        cacheKey: `plasmic.$.b78fd612-3418-4931-ad25-f4d8df4d76c3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rooteventState_editStep1]: hasVariant(
                $state,
                "eventState",
                "editStep1"
              ),
              [sty.rooteventState_editStep3]: hasVariant(
                $state,
                "eventState",
                "editStep3"
              ),
              [sty.rooteventStep_step1]: hasVariant(
                $state,
                "eventStep",
                "step1"
              ),
              [sty.rooteventStep_step2]: hasVariant(
                $state,
                "eventStep",
                "step2"
              ),
              [sty.rooteventStep_step3]: hasVariant(
                $state,
                "eventStep",
                "step3"
              )
            }
          )}
        >
          <ConditionGuard
            data-plasmic-name={"conditionGuard"}
            data-plasmic-override={overrides.conditionGuard}
            className={classNames("__wab_instance", sty.conditionGuard)}
            condition={(() => {
              try {
                return (
                  currentUser.customProperties.role ==
                    "07b345f2-a68e-4456-ae77-6fced8ee7cb7" ||
                  currentUser.customProperties.role ==
                    "1ceacb7a-f026-46ef-9daa-13f8c86f89a3"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            onNotSatisfied={async () => {
              const $steps = {};
            }}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___89UqU, {
                [sty.freeBoxeventState_editStep1___89UqUAkWDr]: hasVariant(
                  $state,
                  "eventState",
                  "editStep1"
                ),
                [sty.freeBoxeventState_editStep2___89UqUdlZzG]: hasVariant(
                  $state,
                  "eventState",
                  "editStep2"
                ),
                [sty.freeBoxeventState_editStep3___89UqUb9HH]: hasVariant(
                  $state,
                  "eventState",
                  "editStep3"
                ),
                [sty.freeBoxeventStep_step1___89UqUrTowq]: hasVariant(
                  $state,
                  "eventStep",
                  "step1"
                ),
                [sty.freeBoxeventStep_step2___89UqUv0YbL]: hasVariant(
                  $state,
                  "eventStep",
                  "step2"
                ),
                [sty.freeBoxeventStep_step3___89UqUZfQlj]: hasVariant(
                  $state,
                  "eventStep",
                  "step3"
                )
              })}
            >
              <Options
                data-plasmic-name={"options"}
                data-plasmic-override={overrides.options}
                className={classNames("__wab_instance", sty.options, {
                  [sty.optionseventState_editStep1]: hasVariant(
                    $state,
                    "eventState",
                    "editStep1"
                  )
                })}
              />

              <div
                data-plasmic-name={"newEvent"}
                data-plasmic-override={overrides.newEvent}
                className={classNames(projectcss.all, sty.newEvent, {
                  [sty.newEventeventState_editStep1]: hasVariant(
                    $state,
                    "eventState",
                    "editStep1"
                  ),
                  [sty.newEventeventState_editStep2]: hasVariant(
                    $state,
                    "eventState",
                    "editStep2"
                  ),
                  [sty.newEventeventState_editStep3]: hasVariant(
                    $state,
                    "eventState",
                    "editStep3"
                  )
                })}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.eventName, {
                      [sty.eventNameeventState_editStep1]: hasVariant(
                        $state,
                        "eventState",
                        "editStep1"
                      ),
                      [sty.eventNameeventState_editStep3]: hasVariant(
                        $state,
                        "eventState",
                        "editStep3"
                      ),
                      [sty.eventNameeventStep_step1]: hasVariant(
                        $state,
                        "eventStep",
                        "step1"
                      ),
                      [sty.eventNameeventStep_step2]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.eventNameeventStep_step3]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    }),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["eventName", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["updateEventStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["eventStep"]
                              },
                              operation: 0,
                              value: "step2"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEventStep"] != null &&
                        typeof $steps["updateEventStep"] === "object" &&
                        typeof $steps["updateEventStep"].then === "function"
                      ) {
                        $steps["updateEventStep"] = await $steps[
                          "updateEventStep"
                        ];
                      }
                    },
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["eventName", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["eventName"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "eventName.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "eventName.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"eventName"}
                      data-plasmic-override={overrides.eventName}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___67MdN
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Tell the world about your event"}
                          </span>
                        </React.Fragment>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__dwcsb,
                          {
                            [sty.formFieldeventStep_step1__dwcsbrTowq]:
                              hasVariant($state, "eventStep", "step1")
                          }
                        )}
                        label={"What is your event name?"}
                        name={
                          hasVariant($state, "eventStep", "step1")
                            ? "EventName"
                            : "name"
                        }
                      >
                        <TextInput
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={overrides.textInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput
                          )}
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "textInput",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          value={
                            generateStateValueProp($state, [
                              "textInput",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__gkEk8,
                          {
                            [sty.formFieldeventStep_step1__gkEk8RTowq]:
                              hasVariant($state, "eventStep", "step1"),
                            [sty.formFieldeventStep_step3__gkEk8ZfQlj]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                        label={"Describe your event"}
                        name={
                          hasVariant($state, "eventStep", "step1")
                            ? "EventDescription"
                            : "description"
                        }
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.textArea,
                              {
                                [sty.textAreaeventStep_step1]: hasVariant(
                                  $state,
                                  "eventStep",
                                  "step1"
                                )
                              }
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea", "value"],
                                AntdTextArea_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "textArea",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea.value"
                              }
                            ],
                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea"}
                              data-plasmic-override={overrides.textArea}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___8D1IR,
                          {
                            [sty.formFieldeventStep_step1___8D1IRrTowq]:
                              hasVariant($state, "eventStep", "step1"),
                            [sty.formFieldeventStep_step2___8D1IRv0YbL]:
                              hasVariant($state, "eventStep", "step2"),
                            [sty.formFieldeventStep_step3___8D1IRZfQlj]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                        label={"Select a category for your event"}
                        name={
                          hasVariant($state, "eventStep", "step1")
                            ? "EventCategory"
                            : "category"
                        }
                      >
                        <Select
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          className={classNames("__wab_instance", sty.select)}
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ])(eventArgs[0]);
                          }}
                          onTicketIdChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "ticketId"
                            ])(eventArgs[0]);
                          }}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null },
                              { value: null, label: null },
                              { value: null, label: null }
                            ];
                            __composite["0"]["value"] = "music";
                            __composite["0"]["label"] = "Music";
                            __composite["1"]["value"] = "sports";
                            __composite["1"]["label"] = "Sports";
                            __composite["2"]["value"] = "film";
                            __composite["2"]["label"] = "Film";
                            return __composite;
                          })()}
                          ticketId={generateStateValueProp($state, [
                            "select",
                            "ticketId"
                          ])}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__okdA
                        )}
                        label={"Address"}
                        name={"EventAddress"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput2"}
                          data-plasmic-override={overrides.textInput2}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput2
                          )}
                          endIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__fP49P
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "textInput2",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          value={
                            generateStateValueProp($state, [
                              "textInput2",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__xF0Qn
                        )}
                        label={"Venue name"}
                        name={"EventVenue"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput3"}
                          data-plasmic-override={overrides.textInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput3
                          )}
                          endIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___2IeFs
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "textInput3",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          value={
                            generateStateValueProp($state, [
                              "textInput3",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5GpAi,
                          {
                            [sty.freeBoxeventStep_step1___5GpAirTowq]:
                              hasVariant($state, "eventStep", "step1"),
                            [sty.freeBoxeventStep_step2___5GpAiV0YbL]:
                              hasVariant($state, "eventStep", "step2"),
                            [sty.freeBoxeventStep_step3___5GpAiZfQlj]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___02Pdl
                          )}
                          color={"blue"}
                          startIcon={
                            <CalendarDotsDuotone1SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___2Qrqo
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          {"Go calendar"}
                        </Button>
                      </div>
                    </FormWrapper>
                  );
                })()}
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.eventCalendar, {
                      [sty.eventCalendareventStep_step1]: hasVariant(
                        $state,
                        "eventStep",
                        "step1"
                      ),
                      [sty.eventCalendareventStep_step2]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.eventCalendareventStep_step3]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    }),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["eventCalendar", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["updateEventStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["eventStep"]
                              },
                              operation: 0,
                              value: "step3"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEventStep"] != null &&
                        typeof $steps["updateEventStep"] === "object" &&
                        typeof $steps["updateEventStep"].then === "function"
                      ) {
                        $steps["updateEventStep"] = await $steps[
                          "updateEventStep"
                        ];
                      }
                    },
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["eventCalendar", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["eventCalendar"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "eventCalendar.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "eventCalendar.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"eventCalendar"}
                      data-plasmic-override={overrides.eventCalendar}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uSjmq
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Choose a time and place for your event"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jd6PM
                        )}
                      >
                        <FormListWrapper
                          data-plasmic-name={"datesFormList"}
                          data-plasmic-override={overrides.datesFormList}
                          className={classNames(
                            "__wab_instance",
                            sty.datesFormList,
                            {
                              [sty.datesFormListeventStep_step2]: hasVariant(
                                $state,
                                "eventStep",
                                "step2"
                              )
                            }
                          )}
                          initialValue={(() => {
                            try {
                              return (() => {
                                const today = new Date();
                                const formattedDate =
                                  today.getMonth() +
                                  1 +
                                  "/" +
                                  today.getDate() +
                                  "/" +
                                  today.getFullYear();
                                return [
                                  {
                                    StartDate: formattedDate,
                                    EndDate: formattedDate
                                  }
                                ];
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [
                                  { StartDate: "1/1/2024", EndDate: "1/2/2024" }
                                ];
                              }
                              throw e;
                            }
                          })()}
                          name={"Dates Form List"}
                          ref={ref => {
                            $refs["datesFormList"] = ref;
                          }}
                        >
                          <DataCtxReader__>
                            {$ctx => (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___6FquU,
                                  {
                                    [sty.freeBoxeventState_editStep2___6FquUdlZzG]:
                                      hasVariant(
                                        $state,
                                        "eventState",
                                        "editStep2"
                                      )
                                  }
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__kemdO,
                                    {
                                      [sty.formFieldeventStep_step3__kemdOZfQlj]:
                                        hasVariant($state, "eventStep", "step3")
                                    }
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__txPgG
                                      )}
                                    >
                                      {"Start Date"}
                                    </div>
                                  }
                                  name={"StartDate"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.dateTimePicker,
                                        {
                                          [sty.dateTimePickereventStep_step2]:
                                            hasVariant(
                                              $state,
                                              "eventStep",
                                              "step2"
                                            )
                                        }
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["dateTimePicker", "value"],
                                          AntdDatePicker_Helpers
                                        ),
                                      picker: "date",
                                      popupScopeClassName:
                                        sty["dateTimePicker__datePickerPopup"],
                                      showTime: false,
                                      value: generateStateValueProp($state, [
                                        "dateTimePicker",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName:
                                            "dateTimePicker.value"
                                        }
                                      ],
                                      [],
                                      AntdDatePicker_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdDatePicker
                                        data-plasmic-name={"dateTimePicker"}
                                        data-plasmic-override={
                                          overrides.dateTimePicker
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__r1NQ,
                                    {
                                      [sty.formFieldeventStep_step2__r1NQv0YbL]:
                                        hasVariant(
                                          $state,
                                          "eventStep",
                                          "step2"
                                        ),
                                      [sty.formFieldeventStep_step3__r1NQZfQlj]:
                                        hasVariant($state, "eventStep", "step3")
                                    }
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bkCGc
                                      )}
                                    >
                                      {"Start Time"}
                                    </div>
                                  }
                                  name={"StartTime"}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput7"}
                                    data-plasmic-override={overrides.textInput7}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput7,
                                      {
                                        [sty.textInput7eventStep_step2]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step2"
                                          )
                                      }
                                    )}
                                    endIcon={
                                      <CheckSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__xfAS
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput7",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }}
                                    type={"time"}
                                    value={
                                      generateStateValueProp($state, [
                                        "textInput7",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___5N4A7,
                                    {
                                      [sty.formFieldeventStep_step3___5N4A7ZfQlj]:
                                        hasVariant($state, "eventStep", "step3")
                                    }
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__czXy
                                      )}
                                    >
                                      {"End Date"}
                                    </div>
                                  }
                                  name={"EndDate"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.dateTimePicker2,
                                        {
                                          [sty.dateTimePicker2eventStep_step2]:
                                            hasVariant(
                                              $state,
                                              "eventStep",
                                              "step2"
                                            )
                                        }
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["dateTimePicker2", "value"],
                                          AntdDatePicker_Helpers
                                        ),
                                      picker: "date",
                                      popupScopeClassName:
                                        sty["dateTimePicker2__datePickerPopup"],
                                      showTime: false,
                                      value: generateStateValueProp($state, [
                                        "dateTimePicker2",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName:
                                            "dateTimePicker2.value"
                                        }
                                      ],
                                      [],
                                      AntdDatePicker_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdDatePicker
                                        data-plasmic-name={"dateTimePicker2"}
                                        data-plasmic-override={
                                          overrides.dateTimePicker2
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___7Xisd,
                                    {
                                      [sty.formFieldeventStep_step2___7XisdV0YbL]:
                                        hasVariant(
                                          $state,
                                          "eventStep",
                                          "step2"
                                        ),
                                      [sty.formFieldeventStep_step3___7XisdZfQlj]:
                                        hasVariant($state, "eventStep", "step3")
                                    }
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___4Zpw
                                      )}
                                    >
                                      {"End Time"}
                                    </div>
                                  }
                                  name={"EndTime"}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput8"}
                                    data-plasmic-override={overrides.textInput8}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput8,
                                      {
                                        [sty.textInput8eventStep_step2]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step2"
                                          )
                                      }
                                    )}
                                    endIcon={
                                      <CheckSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__x3Lxu
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput8",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }}
                                    type={"time"}
                                    value={
                                      generateStateValueProp($state, [
                                        "textInput8",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </FormItemWrapper>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kaKk,
                                    {
                                      [sty.freeBoxeventStep_step3__kaKkZfQlj]:
                                        hasVariant($state, "eventStep", "step3")
                                    }
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["runActionOnDatesFormList"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            tplRef: "datesFormList",
                                            action: "remove",
                                            args: [
                                              (() => {
                                                try {
                                                  return $ctx.currentFieldIndex;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return (({
                                            tplRef,
                                            action,
                                            args
                                          }) => {
                                            return $refs?.[tplRef]?.[action]?.(
                                              ...(args ?? [])
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runActionOnDatesFormList"] !=
                                        null &&
                                      typeof $steps[
                                        "runActionOnDatesFormList"
                                      ] === "object" &&
                                      typeof $steps["runActionOnDatesFormList"]
                                        .then === "function"
                                    ) {
                                      $steps["runActionOnDatesFormList"] =
                                        await $steps[
                                          "runActionOnDatesFormList"
                                        ];
                                    }
                                  }}
                                >
                                  <TrashSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__cwFxi
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            )}
                          </DataCtxReader__>
                        </FormListWrapper>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__d7X4,
                            {
                              [sty.buttoneventStep_step2__d7X4V0YbL]:
                                hasVariant($state, "eventStep", "step2")
                            }
                          )}
                          color={"softSand"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runActionOnDatesFormList"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "datesFormList",
                                    action: "add",
                                    args: [
                                      (() => {
                                        try {
                                          return (() => {
                                            const today = new Date();
                                            const formattedDate =
                                              today.getMonth() +
                                              1 +
                                              "/" +
                                              today.getDate() +
                                              "/" +
                                              today.getFullYear();
                                            return [
                                              {
                                                StartDate: formattedDate,
                                                EndDate: formattedDate
                                              }
                                            ];
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnDatesFormList"] != null &&
                              typeof $steps["runActionOnDatesFormList"] ===
                                "object" &&
                              typeof $steps["runActionOnDatesFormList"].then ===
                                "function"
                            ) {
                              $steps["runActionOnDatesFormList"] = await $steps[
                                "runActionOnDatesFormList"
                              ];
                            }
                          }}
                          startIcon={
                            <PlusSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qI31E
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__l2M0L
                            )}
                          >
                            {"Add more dates"}
                          </div>
                        </Button>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sxYfF,
                          {
                            [sty.freeBoxeventStep_step2__sxYfFv0YbL]:
                              hasVariant($state, "eventStep", "step2"),
                            [sty.freeBoxeventStep_step3__sxYfFZfQlj]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__dlRiM,
                            {
                              [sty.buttoneventStep_step2__dlRiMv0YbL]:
                                hasVariant($state, "eventStep", "step2"),
                              [sty.buttoneventStep_step3__dlRiMZfQlj]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                          color={"softSand"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateEventStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["eventStep"]
                                    },
                                    operation: 0,
                                    value: "step1"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateEventStep"] != null &&
                              typeof $steps["updateEventStep"] === "object" &&
                              typeof $steps["updateEventStep"].then ===
                                "function"
                            ) {
                              $steps["updateEventStep"] = await $steps[
                                "updateEventStep"
                              ];
                            }
                          }}
                          startIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___8Uavg,
                                {
                                  [sty.svgeventStep_step2___8Uavgv0YbL]:
                                    hasVariant($state, "eventStep", "step2")
                                }
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Return"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__vSmQ
                          )}
                          color={"blue"}
                          startIcon={
                            <TicketSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yjMsu
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          {"Go to tickets"}
                        </Button>
                      </Stack__>
                    </FormWrapper>
                  );
                })()}
                {(() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      sty.eventCalendar2,
                      {
                        [sty.eventCalendar2eventState_editStep1]: hasVariant(
                          $state,
                          "eventState",
                          "editStep1"
                        ),
                        [sty.eventCalendar2eventStep_step1]: hasVariant(
                          $state,
                          "eventStep",
                          "step1"
                        ),
                        [sty.eventCalendar2eventStep_step2]: hasVariant(
                          $state,
                          "eventStep",
                          "step2"
                        ),
                        [sty.eventCalendar2eventStep_step3]: hasVariant(
                          $state,
                          "eventStep",
                          "step3"
                        )
                      }
                    ),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["eventCalendar2", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["httpPost"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                opId: "dfdc2c27-4541-4e57-aaa6-2f17af3dd878",
                                userArgs: {
                                  body: [
                                    $state.eventName.value.name,
                                    $state.eventName.value.description,
                                    $state.eventName.value.category,
                                    $state.eventCalendar.value.EventAddress,
                                    $state.eventCalendar.value.EventVenue
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["httpPost"] != null &&
                        typeof $steps["httpPost"] === "object" &&
                        typeof $steps["httpPost"].then === "function"
                      ) {
                        $steps["httpPost"] = await $steps["httpPost"];
                      }

                      $steps["postPaid"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                opId: "e093b13c-a66e-48dc-89e2-116969ff9fd9",
                                userArgs: {
                                  body: [
                                    (() => {
                                      const updatedPaidFormList =
                                        $state.eventCalendar2.value[
                                          "Paid Form List"
                                        ].map(event => {
                                          return {
                                            ...event,
                                            EventId:
                                              $steps.httpPost.data.response.data
                                                .id
                                          };
                                        });
                                      return ($state.eventCalendar2.value[
                                        "Paid Form List"
                                      ] = updatedPaidFormList);
                                    })()
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postPaid"] != null &&
                        typeof $steps["postPaid"] === "object" &&
                        typeof $steps["postPaid"].then === "function"
                      ) {
                        $steps["postPaid"] = await $steps["postPaid"];
                      }

                      $steps["postFree"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                opId: "e093b13c-a66e-48dc-89e2-116969ff9fd9",
                                userArgs: {
                                  body: [
                                    (() => {
                                      const updatedPaidFormList =
                                        $state.eventCalendar2.value[
                                          "Free Form List"
                                        ].map(event => {
                                          return {
                                            ...event,
                                            EventId:
                                              $steps.httpPost.data.response.data
                                                .id
                                          };
                                        });
                                      return ($state.eventCalendar2.value[
                                        "Free Form List"
                                      ] = updatedPaidFormList);
                                    })()
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postFree"] != null &&
                        typeof $steps["postFree"] === "object" &&
                        typeof $steps["postFree"].then === "function"
                      ) {
                        $steps["postFree"] = await $steps["postFree"];
                      }

                      $steps["postDonation"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                opId: "e093b13c-a66e-48dc-89e2-116969ff9fd9",
                                userArgs: {
                                  body: [
                                    (() => {
                                      const updatedPaidFormList =
                                        $state.eventCalendar2.value[
                                          "Donation Form List"
                                        ].map(event => {
                                          return {
                                            ...event,
                                            EventId:
                                              $steps.httpPost.data.response.data
                                                .id
                                          };
                                        });
                                      return ($state.eventCalendar2.value[
                                        "Donation Form List"
                                      ] = updatedPaidFormList);
                                    })()
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postDonation"] != null &&
                        typeof $steps["postDonation"] === "object" &&
                        typeof $steps["postDonation"].then === "function"
                      ) {
                        $steps["postDonation"] = await $steps["postDonation"];
                      }

                      $steps["postDates"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                opId: "8cd44196-d57c-4969-88f0-bed8cfb14a67",
                                userArgs: {
                                  body: [
                                    (() => {
                                      const formatDate = dateStr => {
                                        const date = new Date(dateStr);
                                        const year = date.getFullYear();
                                        const month = String(
                                          date.getMonth() + 1
                                        ).padStart(2, "0");
                                        const day = String(
                                          date.getDate()
                                        ).padStart(2, "0");
                                        return `${year}-${month}-${day}`;
                                      };
                                      const updatedPaidFormList =
                                        $state.eventCalendar.value[
                                          "Dates Form List"
                                        ].map(event => {
                                          return {
                                            ...event,
                                            EventId:
                                              $steps.httpPost.data.response.data
                                                .id,
                                            EndDate: formatDate(event.EndDate),
                                            EndTime: event.EndTime,
                                            StartDate: formatDate(
                                              event.StartDate
                                            ),
                                            StartTime: event.StartTime
                                          };
                                        });
                                      return ($state.eventCalendar.value[
                                        "Dates Form List"
                                      ] = updatedPaidFormList);
                                    })()
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postDates"] != null &&
                        typeof $steps["postDates"] === "object" &&
                        typeof $steps["postDates"].then === "function"
                      ) {
                        $steps["postDates"] = await $steps["postDates"];
                      }
                    },
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["eventCalendar2", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["eventCalendar2"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "eventCalendar2.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "eventCalendar2.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"eventCalendar2"}
                      data-plasmic-override={overrides.eventCalendar2}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__trQhs
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Create your ticket types"}
                          </span>
                        </React.Fragment>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pfQnz
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__clDv
                          )}
                          color={"softSand"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runActionOnFormList"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "paidFormList",
                                    action: "add"
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnFormList"] != null &&
                              typeof $steps["runActionOnFormList"] ===
                                "object" &&
                              typeof $steps["runActionOnFormList"].then ===
                                "function"
                            ) {
                              $steps["runActionOnFormList"] = await $steps[
                                "runActionOnFormList"
                              ];
                            }
                          }}
                          startIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kZgaw,
                                {
                                  [sty.svgeventStep_step3__kZgawZfQlj]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Paid"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__u4TNr
                          )}
                          color={"softSand"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runActionOnFreeFormList"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "freeFormList",
                                    action: "add"
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnFreeFormList"] != null &&
                              typeof $steps["runActionOnFreeFormList"] ===
                                "object" &&
                              typeof $steps["runActionOnFreeFormList"].then ===
                                "function"
                            ) {
                              $steps["runActionOnFreeFormList"] = await $steps[
                                "runActionOnFreeFormList"
                              ];
                            }
                          }}
                          startIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4Ibb,
                                {
                                  [sty.svgeventStep_step3___4IbbZfQlj]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Free"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__jBmwv
                          )}
                          color={"softSand"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runActionOnDonationFormList"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "donationFormList",
                                    action: "add"
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnDonationFormList"] != null &&
                              typeof $steps["runActionOnDonationFormList"] ===
                                "object" &&
                              typeof $steps["runActionOnDonationFormList"]
                                .then === "function"
                            ) {
                              $steps["runActionOnDonationFormList"] =
                                await $steps["runActionOnDonationFormList"];
                            }
                          }}
                          startIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qmU1,
                                {
                                  [sty.svgeventStep_step3__qmU1ZfQlj]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Donation"}
                        </Button>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hwumw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__a9Km
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ntm3L
                            )}
                          >
                            {"Ticket type"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mXs13
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gFPo0
                            )}
                          >
                            {"Ticket name"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___94NCe
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nQ3Cf
                            )}
                          >
                            {"Quantity"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ynpBj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__imTq1
                            )}
                          >
                            {"Price"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hld9U
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mbgny
                            )}
                          >
                            {"Actions"}
                          </div>
                        </div>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hTkV
                        )}
                      >
                        <FormListWrapper
                          data-plasmic-name={"paidFormList"}
                          data-plasmic-override={overrides.paidFormList}
                          className={classNames(
                            "__wab_instance",
                            sty.paidFormList
                          )}
                          initialValue={[{}]}
                          name={"Paid Form List"}
                          ref={ref => {
                            $refs["paidFormList"] = ref;
                          }}
                        >
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uELaa
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__oFcxS
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jv1JY
                                    )}
                                  >
                                    {"Paid"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__w9S
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField___9F5Jl
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__kfLm
                                        )}
                                      >
                                        {"Ticket name"}
                                      </div>
                                    }
                                    name={"TicketType"}
                                    noLabel={true}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        bordered: true,
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input", "value"],
                                            AntdInput_Helpers
                                          ),
                                        placeholder: "eg. General Admission",
                                        value: generateStateValueProp($state, [
                                          "input",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input"}
                                          data-plasmic-override={
                                            overrides.input
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__zm66W
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__ifuXk
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__dDsFd
                                        )}
                                      >
                                        {"Quantity"}
                                      </div>
                                    }
                                    name={"TicketQuantity"}
                                    noLabel={true}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input2
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input2", "value"],
                                            AntdInput_Helpers
                                          ),
                                        placeholder: "Unlimited",
                                        value: generateStateValueProp($state, [
                                          "input2",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input2.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input2"}
                                          data-plasmic-override={
                                            overrides.input2
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__eddLe
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__ng1Xk
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__npJ0J
                                        )}
                                      >
                                        {"Price"}
                                      </div>
                                    }
                                    name={"TicketPrice"}
                                    noLabel={true}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input3
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input3", "value"],
                                            AntdInput_Helpers
                                          ),
                                        placeholder: "Cost",
                                        value: generateStateValueProp($state, [
                                          "input3",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input3.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input3"}
                                          data-plasmic-override={
                                            overrides.input3
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                </div>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qhyJy,
                                    {
                                      [sty.freeBoxeventStep_step2__qhyJyv0YbL]:
                                        hasVariant($state, "eventStep", "step2")
                                    }
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___2ZlDo,
                                      {
                                        [sty.freeBoxeventStep_step3___2ZlDoZfQlj]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step3"
                                          )
                                      }
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runActionOnPaidFormList"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              tplRef: "paidFormList",
                                              action: "remove",
                                              args: [
                                                (() => {
                                                  try {
                                                    return $ctx.currentFieldIndex;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return (({
                                              tplRef,
                                              action,
                                              args
                                            }) => {
                                              return $refs?.[tplRef]?.[
                                                action
                                              ]?.(...(args ?? []));
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runActionOnPaidFormList"] !=
                                          null &&
                                        typeof $steps[
                                          "runActionOnPaidFormList"
                                        ] === "object" &&
                                        typeof $steps["runActionOnPaidFormList"]
                                          .then === "function"
                                      ) {
                                        $steps["runActionOnPaidFormList"] =
                                          await $steps[
                                            "runActionOnPaidFormList"
                                          ];
                                      }
                                    }}
                                  >
                                    <TrashSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__ga4Nl
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              </div>
                            )}
                          </DataCtxReader__>
                        </FormListWrapper>
                        <FormListWrapper
                          data-plasmic-name={"freeFormList"}
                          data-plasmic-override={overrides.freeFormList}
                          className={classNames(
                            "__wab_instance",
                            sty.freeFormList
                          )}
                          initialValue={[]}
                          name={"Free Form List"}
                          ref={ref => {
                            $refs["freeFormList"] = ref;
                          }}
                        >
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__o5XRc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__napU
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mt7Bc
                                    )}
                                  >
                                    {"Free"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__geoH
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__h3WgT
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ezVWf
                                        )}
                                      >
                                        {"Ticket name"}
                                      </div>
                                    }
                                    name={"TicketType"}
                                    noLabel={true}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input4
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input4", "value"],
                                            AntdInput_Helpers
                                          ),
                                        placeholder: "eg. General Admission",
                                        value: generateStateValueProp($state, [
                                          "input4",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input4.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input4"}
                                          data-plasmic-override={
                                            overrides.input4
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__irRtO
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField___6V76F
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___7GCWv
                                        )}
                                      >
                                        {"Quantity"}
                                      </div>
                                    }
                                    name={"TicketQuantity"}
                                    noLabel={true}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input5
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input5", "value"],
                                            AntdInput_Helpers
                                          ),
                                        placeholder: "Unlimited",
                                        value: generateStateValueProp($state, [
                                          "input5",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input5.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input5"}
                                          data-plasmic-override={
                                            overrides.input5
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___5QlKv
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__f0FDy
                                    )}
                                    initialValue={"0"}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__g0Dqy
                                        )}
                                      >
                                        {"Price"}
                                      </div>
                                    }
                                    name={"TicketPrice"}
                                    noLabel={true}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input6
                                        ),
                                        disabled: true,
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input6", "value"],
                                            AntdInput_Helpers
                                          ),
                                        placeholder: ``,
                                        value: generateStateValueProp($state, [
                                          "input6",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input6.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input6"}
                                          data-plasmic-override={
                                            overrides.input6
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__a2XfI
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__nRa7Y
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__j8Vi8
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["runActionOnFreeFormList"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                tplRef: "freeFormList",
                                                action: "remove",
                                                args: [
                                                  (() => {
                                                    try {
                                                      return $ctx.currentFieldIndex;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return (({
                                                tplRef,
                                                action,
                                                args
                                              }) => {
                                                return $refs?.[tplRef]?.[
                                                  action
                                                ]?.(...(args ?? []));
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runActionOnFreeFormList"] !=
                                            null &&
                                          typeof $steps[
                                            "runActionOnFreeFormList"
                                          ] === "object" &&
                                          typeof $steps[
                                            "runActionOnFreeFormList"
                                          ].then === "function"
                                        ) {
                                          $steps["runActionOnFreeFormList"] =
                                            await $steps[
                                              "runActionOnFreeFormList"
                                            ];
                                        }
                                      }}
                                    >
                                      <TrashSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__bXwPj
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </Stack__>
                                </div>
                              </div>
                            )}
                          </DataCtxReader__>
                        </FormListWrapper>
                        <FormListWrapper
                          data-plasmic-name={"donationFormList"}
                          data-plasmic-override={overrides.donationFormList}
                          className={classNames(
                            "__wab_instance",
                            sty.donationFormList
                          )}
                          initialValue={[]}
                          name={"Donation Form List"}
                          ref={ref => {
                            $refs["donationFormList"] = ref;
                          }}
                        >
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4YuQe
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__zMbzq
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ar5Lj
                                    )}
                                  >
                                    {"Donation"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ifQeZ
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField___9MJsi
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___3SuTk
                                        )}
                                      >
                                        {"Ticket name"}
                                      </div>
                                    }
                                    name={"TicketType"}
                                    noLabel={true}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input7
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input7", "value"],
                                            AntdInput_Helpers
                                          ),
                                        value: generateStateValueProp($state, [
                                          "input7",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input7.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input7"}
                                          data-plasmic-override={
                                            overrides.input7
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___1Opud
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__yxeyi
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___96MwB
                                        )}
                                      >
                                        {"Quantity"}
                                      </div>
                                    }
                                    name={"TicketQuantity"}
                                    noLabel={true}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input8
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input8", "value"],
                                            AntdInput_Helpers
                                          ),
                                        value: generateStateValueProp($state, [
                                          "input8",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input8.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input8"}
                                          data-plasmic-override={
                                            overrides.input8
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__z8Ww6
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__lFuhX
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__v1HHa
                                        )}
                                      >
                                        {"Price"}
                                      </div>
                                    }
                                    name={"TicketPrice"}
                                    noLabel={true}
                                  >
                                    <AntdInputNumber
                                      data-plasmic-name={"numberInput"}
                                      data-plasmic-override={
                                        overrides.numberInput
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.numberInput
                                      )}
                                      min={0}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["numberInput", "value"]
                                      )}
                                      placeholder={"Min"}
                                      type={"number"}
                                      value={generateStateValueProp($state, [
                                        "numberInput",
                                        "value"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fexcO
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__uc8Dc
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__zbC1I
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["runActionOnDonationFormList"] =
                                          true
                                            ? (() => {
                                                const actionArgs = {
                                                  tplRef: "donationFormList",
                                                  action: "remove",
                                                  args: [
                                                    (() => {
                                                      try {
                                                        return $ctx.currentFieldIndex;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return (({
                                                  tplRef,
                                                  action,
                                                  args
                                                }) => {
                                                  return $refs?.[tplRef]?.[
                                                    action
                                                  ]?.(...(args ?? []));
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps[
                                            "runActionOnDonationFormList"
                                          ] != null &&
                                          typeof $steps[
                                            "runActionOnDonationFormList"
                                          ] === "object" &&
                                          typeof $steps[
                                            "runActionOnDonationFormList"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "runActionOnDonationFormList"
                                          ] = await $steps[
                                            "runActionOnDonationFormList"
                                          ];
                                        }
                                      }}
                                    >
                                      <TrashSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___9WGsu
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </Stack__>
                                </div>
                              </div>
                            )}
                          </DataCtxReader__>
                        </FormListWrapper>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dTpa1,
                          {
                            [sty.freeBoxeventState_editStep1__dTpa1AkWDr]:
                              hasVariant($state, "eventState", "editStep1"),
                            [sty.freeBoxeventState_editStep2__dTpa1DlZzG]:
                              hasVariant($state, "eventState", "editStep2"),
                            [sty.freeBoxeventState_editStep3__dTpa1B9HH]:
                              hasVariant($state, "eventState", "editStep3")
                          }
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___4L2GY
                          )}
                          color={"softSand"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateEventStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["eventStep"]
                                    },
                                    operation: 0,
                                    value: "step2"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateEventStep"] != null &&
                              typeof $steps["updateEventStep"] === "object" &&
                              typeof $steps["updateEventStep"].then ===
                                "function"
                            ) {
                              $steps["updateEventStep"] = await $steps[
                                "updateEventStep"
                              ];
                            }
                          }}
                          startIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__o10Tc
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Return"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___2H6H
                          )}
                          color={"blue"}
                          startIcon={
                            <SealCheckDuotoneSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jD3L8
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          {"Submit event"}
                        </Button>
                      </Stack__>
                    </FormWrapper>
                  );
                })()}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"editEvent"}
                data-plasmic-override={overrides.editEvent}
                hasGap={true}
                className={classNames(projectcss.all, sty.editEvent, {
                  [sty.editEventeventState_editStep1]: hasVariant(
                    $state,
                    "eventState",
                    "editStep1"
                  ),
                  [sty.editEventeventState_editStep2]: hasVariant(
                    $state,
                    "eventState",
                    "editStep2"
                  ),
                  [sty.editEventeventState_editStep3]: hasVariant(
                    $state,
                    "eventState",
                    "editStep3"
                  )
                })}
                id={"edit-event"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__haGoA,
                    {
                      [sty.texteventState_editStep3__haGoAb9HH]: hasVariant(
                        $state,
                        "eventState",
                        "editStep3"
                      )
                    }
                  )}
                >
                  {"Edit your event"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yXskS,
                    {
                      [sty.texteventState_editStep1__yXskSAkWDr]: hasVariant(
                        $state,
                        "eventState",
                        "editStep1"
                      ),
                      [sty.texteventState_editStep2__yXskSdlZzG]: hasVariant(
                        $state,
                        "eventState",
                        "editStep2"
                      ),
                      [sty.texteventState_editStep3__yXskSb9HH]: hasVariant(
                        $state,
                        "eventState",
                        "editStep3"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "eventState", "editStep3") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.selectedRow.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : hasVariant($state, "eventState", "editStep2") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.selectedRow.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : hasVariant($state, "eventState", "editStep1") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.selectedRow.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "Enter some text"
                  )}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"editEventName"}
                  data-plasmic-override={overrides.editEventName}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.editEventName, {
                    [sty.editEventNameeventState_editStep2]: hasVariant(
                      $state,
                      "eventState",
                      "editStep2"
                    ),
                    [sty.editEventNameeventState_editStep3]: hasVariant(
                      $state,
                      "eventState",
                      "editStep3"
                    )
                  })}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__aCoLe)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pb2R2
                      )}
                    >
                      {"What is your event name?"}
                    </div>
                    <TextInput
                      data-plasmic-name={"editName"}
                      data-plasmic-override={overrides.editName}
                      className={classNames("__wab_instance", sty.editName)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editName",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      value={
                        generateStateValueProp($state, ["editName", "value"]) ??
                        ""
                      }
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rkeqF)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rfsIb
                      )}
                    >
                      {"Describe your event"}
                    </div>
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.editDescription
                        ),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["editDescription", "value"],
                          AntdTextArea_Helpers
                        ),
                        value: generateStateValueProp($state, [
                          "editDescription",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "editDescription.value"
                          }
                        ],
                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdTextArea
                          data-plasmic-name={"editDescription"}
                          data-plasmic-override={overrides.editDescription}
                          {...child$Props}
                        />
                      );
                    })()}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hMjFi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zXs9Z
                      )}
                    >
                      {"Select a category for your event"}
                    </div>
                    <Select
                      data-plasmic-name={"select3"}
                      data-plasmic-override={overrides.select3}
                      className={classNames("__wab_instance", sty.select3)}
                      name={"edit category"}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, ["select3", "value"])(
                          eventArgs[0]
                        );
                      }}
                      onTicketIdChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "select3",
                          "ticketId"
                        ])(eventArgs[0]);
                      }}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null },
                          { value: null, label: null },
                          { value: null }
                        ];
                        __composite["0"]["value"] = "music";
                        __composite["0"]["label"] = "Music";
                        __composite["1"]["value"] = "sports";
                        __composite["1"]["label"] = "Sports";
                        __composite["2"]["value"] = "film";
                        return __composite;
                      })()}
                      ticketId={generateStateValueProp($state, [
                        "select3",
                        "ticketId"
                      ])}
                      value={generateStateValueProp($state, [
                        "select3",
                        "value"
                      ])}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___50GWb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oJwNq
                      )}
                    >
                      {"Event Address"}
                    </div>
                    <TextInput
                      data-plasmic-name={"editAddress"}
                      data-plasmic-override={overrides.editAddress}
                      className={classNames("__wab_instance", sty.editAddress)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editAddress",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      value={
                        generateStateValueProp($state, [
                          "editAddress",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__brVLn)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ztfDg
                      )}
                    >
                      {"Venue Name"}
                    </div>
                    <TextInput
                      data-plasmic-name={"editVenue"}
                      data-plasmic-override={overrides.editVenue}
                      className={classNames("__wab_instance", sty.editVenue)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editVenue",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      value={
                        generateStateValueProp($state, [
                          "editVenue",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ft3B2, {
                      [sty.freeBoxeventStep_step1__ft3B2RTowq]: hasVariant(
                        $state,
                        "eventStep",
                        "step1"
                      ),
                      [sty.freeBoxeventStep_step2__ft3B2V0YbL]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.freeBoxeventStep_step3__ft3B2ZfQlj]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button___8Zlb,
                        {
                          [sty.buttoneventStep_step2___8ZlbV0YbL]: hasVariant(
                            $state,
                            "eventStep",
                            "step2"
                          ),
                          [sty.buttoneventStep_step3___8ZlbZfQlj]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["eventState"]
                                },
                                operation: 0,
                                value: "editStep2"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qMrKr
                        )}
                      >
                        {"Go to calendar"}
                      </div>
                    </AntdButton>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"editEventCalendar"}
                  data-plasmic-override={overrides.editEventCalendar}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.editEventCalendar, {
                    [sty.editEventCalendareventState_editStep1]: hasVariant(
                      $state,
                      "eventState",
                      "editStep1"
                    ),
                    [sty.editEventCalendareventState_editStep2]: hasVariant(
                      $state,
                      "eventState",
                      "editStep2"
                    ),
                    [sty.editEventCalendareventState_editStep3]: hasVariant(
                      $state,
                      "eventState",
                      "editStep3"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mz8Fw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pkFoP)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nVhG2
                        )}
                      >
                        {"Start date"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xVws5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5Nlgl
                        )}
                      >
                        {"Start Time"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__k7Un7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v0Jqf
                        )}
                      >
                        {"End Date"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ojya9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7HOo3
                        )}
                      >
                        {"End time"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fW1R)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3Gw8H
                        )}
                      >
                        {"Actions"}
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"addDates"}
                    data-plasmic-override={overrides.addDates}
                    className={classNames(projectcss.all, sty.addDates)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bkX8)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.addStartDate
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["addStartDate", "value"],
                            AntdDatePicker_Helpers
                          ),
                          popupScopeClassName:
                            sty["addStartDate__datePickerPopup"],
                          value: generateStateValueProp($state, [
                            "addStartDate",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "addStartDate.value"
                            }
                          ],
                          [],
                          AntdDatePicker_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdDatePicker
                            data-plasmic-name={"addStartDate"}
                            data-plasmic-override={overrides.addStartDate}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1F51Q
                      )}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.addStartTime
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["addStartTime", "value"],
                            AntdInput_Helpers
                          ),
                          type: "time",
                          value: generateStateValueProp($state, [
                            "addStartTime",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "addStartTime.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"addStartTime"}
                            data-plasmic-override={overrides.addStartTime}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oioSg)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.addEndDate
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["addEndDate", "value"],
                            AntdDatePicker_Helpers
                          ),
                          popupScopeClassName:
                            sty["addEndDate__datePickerPopup"],
                          value: generateStateValueProp($state, [
                            "addEndDate",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "addEndDate.value"
                            }
                          ],
                          [],
                          AntdDatePicker_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdDatePicker
                            data-plasmic-name={"addEndDate"}
                            data-plasmic-override={overrides.addEndDate}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__x6SCd)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.addEndTime
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["addEndTime", "value"],
                            AntdInput_Helpers
                          ),
                          type: "time",
                          value: generateStateValueProp($state, [
                            "addEndTime",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "addEndTime.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"addEndTime"}
                            data-plasmic-override={overrides.addEndTime}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kuRKe)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__j7727,
                          {
                            [sty.buttoneventStep_step3__j7727ZfQlj]: hasVariant(
                              $state,
                              "eventStep",
                              "step3"
                            )
                          }
                        )}
                        color={"blue"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["httpPost"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                    opId: "86477e4d-7a10-4f18-92f3-9684c8e34f36",
                                    userArgs: {
                                      body: [
                                        (() => {
                                          const formatDate = dateStr => {
                                            const date = new Date(dateStr);
                                            const year = date.getFullYear();
                                            const month = String(
                                              date.getMonth() + 1
                                            ).padStart(2, "0");
                                            const day = String(
                                              date.getDate()
                                            ).padStart(2, "0");
                                            return `${year}-${month}-${day}`;
                                          };
                                          return formatDate(
                                            $state.addStartDate.value
                                          );
                                        })(),
                                        $state.addStartTime.value,
                                        (() => {
                                          const formatDate = dateStr => {
                                            const date = new Date(dateStr);
                                            const year = date.getFullYear();
                                            const month = String(
                                              date.getMonth() + 1
                                            ).padStart(2, "0");
                                            const day = String(
                                              date.getDate()
                                            ).padStart(2, "0");
                                            return `${year}-${month}-${day}`;
                                          };
                                          return formatDate(
                                            $state.addEndDate.value
                                          );
                                        })(),
                                        $state.addEndTime.value,
                                        $state.selectedRow.id
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["httpPost"] != null &&
                            typeof $steps["httpPost"] === "object" &&
                            typeof $steps["httpPost"].then === "function"
                          ) {
                            $steps["httpPost"] = await $steps["httpPost"];
                          }
                        }}
                        size={"compact"}
                        startIcon={
                          <CheckSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vpRgh
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Submit"}
                      </Button>
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___5F1Hm, {
                      [sty.freeBoxeventStep_step1___5F1HMrTowq]: hasVariant(
                        $state,
                        "eventStep",
                        "step1"
                      ),
                      [sty.freeBoxeventStep_step2___5F1Hmv0YbL]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.freeBoxeventStep_step3___5F1HmZfQlj]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__ahaN1,
                        {
                          [sty.buttoneventState_editStep1__ahaN1AkWDr]:
                            hasVariant($state, "eventState", "editStep1"),
                          [sty.buttoneventState_editStep2__ahaN1DlZzG]:
                            hasVariant($state, "eventState", "editStep2"),
                          [sty.buttoneventState_editStep3__ahaN1B9HH]:
                            hasVariant($state, "eventState", "editStep3"),
                          [sty.buttoneventStep_step2__ahaN1V0YbL]: hasVariant(
                            $state,
                            "eventStep",
                            "step2"
                          ),
                          [sty.buttoneventStep_step3__ahaN1ZfQlj]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["httpPatch"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["eventState"]
                                },
                                operation: 0,
                                value: "editStep3"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpPatch"] != null &&
                          typeof $steps["httpPatch"] === "object" &&
                          typeof $steps["httpPatch"].then === "function"
                        ) {
                          $steps["httpPatch"] = await $steps["httpPatch"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hV4Mi
                        )}
                      >
                        {"Go to tickets"}
                      </div>
                    </AntdButton>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__lKzf9,
                        {
                          [sty.buttoneventState_editStep1__lKzf9AkWDr]:
                            hasVariant($state, "eventState", "editStep1")
                        }
                      )}
                      color={"softSand"}
                      size={"compact"}
                      startIcon={
                        <CheckSvgIcon
                          className={classNames(projectcss.all, sty.svg__iLdW, {
                            [sty.svgeventState_editStep1__iLdWAkWDr]:
                              hasVariant($state, "eventState", "editStep1")
                          })}
                          role={"img"}
                        />
                      }
                    >
                      {"Return"}
                    </Button>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"editEventTickets"}
                  data-plasmic-override={overrides.editEventTickets}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.editEventTickets, {
                    [sty.editEventTicketseventState_editStep1]: hasVariant(
                      $state,
                      "eventState",
                      "editStep1"
                    ),
                    [sty.editEventTicketseventState_editStep2]: hasVariant(
                      $state,
                      "eventState",
                      "editStep2"
                    ),
                    [sty.editEventTicketseventState_editStep3]: hasVariant(
                      $state,
                      "eventState",
                      "editStep3"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qr0IB)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jyOg0)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rfQae
                        )}
                      >
                        {"Ticket type"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ksDlx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__prRk3
                        )}
                      >
                        {"Ticket name"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qPf89)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Mpli
                        )}
                      >
                        {"Quantity"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kncSd)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0YzJg
                        )}
                      >
                        {"Price"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox___6CJf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___88Ja
                        )}
                      >
                        {"Actions"}
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"addTickets"}
                    data-plasmic-override={overrides.addTickets}
                    className={classNames(projectcss.all, sty.addTickets)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4Fb7E
                      )}
                    >
                      <Select
                        data-plasmic-name={"addTicketType"}
                        data-plasmic-override={overrides.addTicketType}
                        className={classNames(
                          "__wab_instance",
                          sty.addTicketType
                        )}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "addTicketType",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        onTicketIdChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "addTicketType",
                            "ticketId"
                          ])(eventArgs[0]);
                        }}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null },
                            { value: null, label: null },
                            { value: null, label: null }
                          ];
                          __composite["0"]["value"] = "paid";
                          __composite["0"]["label"] = "Paid";
                          __composite["1"]["value"] = "free";
                          __composite["1"]["label"] = "Free";
                          __composite["2"]["value"] = "donation";
                          __composite["2"]["label"] = "Donation";
                          return __composite;
                        })()}
                        ticketId={generateStateValueProp($state, [
                          "addTicketType",
                          "ticketId"
                        ])}
                        value={generateStateValueProp($state, [
                          "addTicketType",
                          "value"
                        ])}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pLzX)}
                    >
                      <TextInput
                        data-plasmic-name={"addTicketName"}
                        data-plasmic-override={overrides.addTicketName}
                        className={classNames(
                          "__wab_instance",
                          sty.addTicketName
                        )}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "addTicketName",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        value={
                          generateStateValueProp($state, [
                            "addTicketName",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6QQoB
                      )}
                    >
                      <TextInput
                        data-plasmic-name={"addTicketQuantity"}
                        data-plasmic-override={overrides.addTicketQuantity}
                        className={classNames(
                          "__wab_instance",
                          sty.addTicketQuantity
                        )}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "addTicketQuantity",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        value={
                          generateStateValueProp($state, [
                            "addTicketQuantity",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xoqSb)}
                    >
                      <TextInput
                        data-plasmic-name={"addTicketPrice"}
                        data-plasmic-override={overrides.addTicketPrice}
                        className={classNames(
                          "__wab_instance",
                          sty.addTicketPrice
                        )}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "addTicketPrice",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        value={
                          generateStateValueProp($state, [
                            "addTicketPrice",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ldeHe)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__dNeCi,
                          {
                            [sty.buttoneventState_editStep2__dNeCiDlZzG]:
                              hasVariant($state, "eventState", "editStep2"),
                            [sty.buttoneventStep_step3__dNeCiZfQlj]: hasVariant(
                              $state,
                              "eventStep",
                              "step3"
                            )
                          }
                        )}
                        color={"blue"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["httpPost"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                    opId: "b12c0359-cdd9-4089-bb31-ee952166b32e",
                                    userArgs: {
                                      body: [
                                        $state.addTicketName.value,
                                        $state.addTicketPrice.value,
                                        $state.addTicketQuantity.value,
                                        $state.addTicketType.value,
                                        $state.selectedRow.id
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["httpPost"] != null &&
                            typeof $steps["httpPost"] === "object" &&
                            typeof $steps["httpPost"].then === "function"
                          ) {
                            $steps["httpPost"] = await $steps["httpPost"];
                          }
                        }}
                        size={"compact"}
                        startIcon={
                          <CheckSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qOoB9
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Submit"}
                      </Button>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5Uv2W, {
                      [sty.freeBoxeventStep_step1___5Uv2WrTowq]: hasVariant(
                        $state,
                        "eventStep",
                        "step1"
                      ),
                      [sty.freeBoxeventStep_step2___5Uv2Wv0YbL]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.freeBoxeventStep_step3___5Uv2WZfQlj]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__peIfl,
                        {
                          [sty.buttoneventStep_step2__peIflv0YbL]: hasVariant(
                            $state,
                            "eventStep",
                            "step2"
                          ),
                          [sty.buttoneventStep_step3__peIflZfQlj]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["httpPatch"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                  opId: "d7f10c37-31c8-4482-99ca-304889680563",
                                  userArgs: {
                                    path: [$state.selectedRow.id],
                                    body: [
                                      $state.editName.value,
                                      $state.editDescription.value,
                                      $state.editVenue.value,
                                      $state.select3.value
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpPatch"] != null &&
                          typeof $steps["httpPatch"] === "object" &&
                          typeof $steps["httpPatch"].then === "function"
                        ) {
                          $steps["httpPatch"] = await $steps["httpPatch"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bJyKz
                        )}
                      >
                        {"submit changes"}
                      </div>
                    </AntdButton>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__t4QkY,
                        {
                          [sty.buttoneventState_editStep1__t4QkYAkWDr]:
                            hasVariant($state, "eventState", "editStep1")
                        }
                      )}
                      color={"softSand"}
                      size={"compact"}
                      startIcon={
                        <CheckSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7GSed,
                            {
                              [sty.svgeventState_editStep1___7GSedAkWDr]:
                                hasVariant($state, "eventState", "editStep1")
                            }
                          )}
                          role={"img"}
                        />
                      }
                    >
                      {"Return"}
                    </Button>
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
          </ConditionGuard>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "conditionGuard",
    "options",
    "newEvent",
    "eventName",
    "textInput",
    "textArea",
    "select",
    "textInput2",
    "textInput3",
    "eventCalendar",
    "datesFormList",
    "dateTimePicker",
    "textInput7",
    "dateTimePicker2",
    "textInput8",
    "eventCalendar2",
    "paidFormList",
    "input",
    "input2",
    "input3",
    "freeFormList",
    "input4",
    "input5",
    "input6",
    "donationFormList",
    "input7",
    "input8",
    "numberInput",
    "editEvent",
    "editEventName",
    "editName",
    "editDescription",
    "select3",
    "editAddress",
    "editVenue",
    "editEventCalendar",
    "addDates",
    "addStartDate",
    "addStartTime",
    "addEndDate",
    "addEndTime",
    "editEventTickets",
    "addTickets",
    "addTicketType",
    "addTicketName",
    "addTicketQuantity",
    "addTicketPrice"
  ],
  conditionGuard: [
    "conditionGuard",
    "options",
    "newEvent",
    "eventName",
    "textInput",
    "textArea",
    "select",
    "textInput2",
    "textInput3",
    "eventCalendar",
    "datesFormList",
    "dateTimePicker",
    "textInput7",
    "dateTimePicker2",
    "textInput8",
    "eventCalendar2",
    "paidFormList",
    "input",
    "input2",
    "input3",
    "freeFormList",
    "input4",
    "input5",
    "input6",
    "donationFormList",
    "input7",
    "input8",
    "numberInput",
    "editEvent",
    "editEventName",
    "editName",
    "editDescription",
    "select3",
    "editAddress",
    "editVenue",
    "editEventCalendar",
    "addDates",
    "addStartDate",
    "addStartTime",
    "addEndDate",
    "addEndTime",
    "editEventTickets",
    "addTickets",
    "addTicketType",
    "addTicketName",
    "addTicketQuantity",
    "addTicketPrice"
  ],
  options: ["options"],
  newEvent: [
    "newEvent",
    "eventName",
    "textInput",
    "textArea",
    "select",
    "textInput2",
    "textInput3",
    "eventCalendar",
    "datesFormList",
    "dateTimePicker",
    "textInput7",
    "dateTimePicker2",
    "textInput8",
    "eventCalendar2",
    "paidFormList",
    "input",
    "input2",
    "input3",
    "freeFormList",
    "input4",
    "input5",
    "input6",
    "donationFormList",
    "input7",
    "input8",
    "numberInput"
  ],
  eventName: [
    "eventName",
    "textInput",
    "textArea",
    "select",
    "textInput2",
    "textInput3"
  ],
  textInput: ["textInput"],
  textArea: ["textArea"],
  select: ["select"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  eventCalendar: [
    "eventCalendar",
    "datesFormList",
    "dateTimePicker",
    "textInput7",
    "dateTimePicker2",
    "textInput8"
  ],
  datesFormList: [
    "datesFormList",
    "dateTimePicker",
    "textInput7",
    "dateTimePicker2",
    "textInput8"
  ],
  dateTimePicker: ["dateTimePicker"],
  textInput7: ["textInput7"],
  dateTimePicker2: ["dateTimePicker2"],
  textInput8: ["textInput8"],
  eventCalendar2: [
    "eventCalendar2",
    "paidFormList",
    "input",
    "input2",
    "input3",
    "freeFormList",
    "input4",
    "input5",
    "input6",
    "donationFormList",
    "input7",
    "input8",
    "numberInput"
  ],
  paidFormList: ["paidFormList", "input", "input2", "input3"],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  freeFormList: ["freeFormList", "input4", "input5", "input6"],
  input4: ["input4"],
  input5: ["input5"],
  input6: ["input6"],
  donationFormList: ["donationFormList", "input7", "input8", "numberInput"],
  input7: ["input7"],
  input8: ["input8"],
  numberInput: ["numberInput"],
  editEvent: [
    "editEvent",
    "editEventName",
    "editName",
    "editDescription",
    "select3",
    "editAddress",
    "editVenue",
    "editEventCalendar",
    "addDates",
    "addStartDate",
    "addStartTime",
    "addEndDate",
    "addEndTime",
    "editEventTickets",
    "addTickets",
    "addTicketType",
    "addTicketName",
    "addTicketQuantity",
    "addTicketPrice"
  ],
  editEventName: [
    "editEventName",
    "editName",
    "editDescription",
    "select3",
    "editAddress",
    "editVenue"
  ],
  editName: ["editName"],
  editDescription: ["editDescription"],
  select3: ["select3"],
  editAddress: ["editAddress"],
  editVenue: ["editVenue"],
  editEventCalendar: [
    "editEventCalendar",
    "addDates",
    "addStartDate",
    "addStartTime",
    "addEndDate",
    "addEndTime"
  ],
  addDates: [
    "addDates",
    "addStartDate",
    "addStartTime",
    "addEndDate",
    "addEndTime"
  ],
  addStartDate: ["addStartDate"],
  addStartTime: ["addStartTime"],
  addEndDate: ["addEndDate"],
  addEndTime: ["addEndTime"],
  editEventTickets: [
    "editEventTickets",
    "addTickets",
    "addTicketType",
    "addTicketName",
    "addTicketQuantity",
    "addTicketPrice"
  ],
  addTickets: [
    "addTickets",
    "addTicketType",
    "addTicketName",
    "addTicketQuantity",
    "addTicketPrice"
  ],
  addTicketType: ["addTicketType"],
  addTicketName: ["addTicketName"],
  addTicketQuantity: ["addTicketQuantity"],
  addTicketPrice: ["addTicketPrice"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  conditionGuard: typeof ConditionGuard;
  options: typeof Options;
  newEvent: "div";
  eventName: typeof FormWrapper;
  textInput: typeof TextInput;
  textArea: typeof AntdTextArea;
  select: typeof Select;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  eventCalendar: typeof FormWrapper;
  datesFormList: typeof FormListWrapper;
  dateTimePicker: typeof AntdDatePicker;
  textInput7: typeof TextInput;
  dateTimePicker2: typeof AntdDatePicker;
  textInput8: typeof TextInput;
  eventCalendar2: typeof FormWrapper;
  paidFormList: typeof FormListWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  freeFormList: typeof FormListWrapper;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  input6: typeof AntdInput;
  donationFormList: typeof FormListWrapper;
  input7: typeof AntdInput;
  input8: typeof AntdInput;
  numberInput: typeof AntdInputNumber;
  editEvent: "div";
  editEventName: "div";
  editName: typeof TextInput;
  editDescription: typeof AntdTextArea;
  select3: typeof Select;
  editAddress: typeof TextInput;
  editVenue: typeof TextInput;
  editEventCalendar: "div";
  addDates: "div";
  addStartDate: typeof AntdDatePicker;
  addStartTime: typeof AntdInput;
  addEndDate: typeof AntdDatePicker;
  addEndTime: typeof AntdInput;
  editEventTickets: "div";
  addTickets: "div";
  addTicketType: typeof Select;
  addTicketName: typeof TextInput;
  addTicketQuantity: typeof TextInput;
  addTicketPrice: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateEvent2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateEvent2__VariantsArgs;
    args?: PlasmicCreateEvent2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateEvent2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCreateEvent2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateEvent2__ArgProps,
          internalVariantPropNames: PlasmicCreateEvent2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateEvent2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCreateEvent2";
  } else {
    func.displayName = `PlasmicCreateEvent2.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateEvent2 = Object.assign(
  // Top-level PlasmicCreateEvent2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    conditionGuard: makeNodeComponent("conditionGuard"),
    options: makeNodeComponent("options"),
    newEvent: makeNodeComponent("newEvent"),
    eventName: makeNodeComponent("eventName"),
    textInput: makeNodeComponent("textInput"),
    textArea: makeNodeComponent("textArea"),
    select: makeNodeComponent("select"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    eventCalendar: makeNodeComponent("eventCalendar"),
    datesFormList: makeNodeComponent("datesFormList"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    textInput7: makeNodeComponent("textInput7"),
    dateTimePicker2: makeNodeComponent("dateTimePicker2"),
    textInput8: makeNodeComponent("textInput8"),
    eventCalendar2: makeNodeComponent("eventCalendar2"),
    paidFormList: makeNodeComponent("paidFormList"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    freeFormList: makeNodeComponent("freeFormList"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    donationFormList: makeNodeComponent("donationFormList"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    numberInput: makeNodeComponent("numberInput"),
    editEvent: makeNodeComponent("editEvent"),
    editEventName: makeNodeComponent("editEventName"),
    editName: makeNodeComponent("editName"),
    editDescription: makeNodeComponent("editDescription"),
    select3: makeNodeComponent("select3"),
    editAddress: makeNodeComponent("editAddress"),
    editVenue: makeNodeComponent("editVenue"),
    editEventCalendar: makeNodeComponent("editEventCalendar"),
    addDates: makeNodeComponent("addDates"),
    addStartDate: makeNodeComponent("addStartDate"),
    addStartTime: makeNodeComponent("addStartTime"),
    addEndDate: makeNodeComponent("addEndDate"),
    addEndTime: makeNodeComponent("addEndTime"),
    editEventTickets: makeNodeComponent("editEventTickets"),
    addTickets: makeNodeComponent("addTickets"),
    addTicketType: makeNodeComponent("addTicketType"),
    addTicketName: makeNodeComponent("addTicketName"),
    addTicketQuantity: makeNodeComponent("addTicketQuantity"),
    addTicketPrice: makeNodeComponent("addTicketPrice"),

    // Metadata about props expected for PlasmicCreateEvent2
    internalVariantProps: PlasmicCreateEvent2__VariantProps,
    internalArgProps: PlasmicCreateEvent2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCreateEvent2;
/* prettier-ignore-end */
