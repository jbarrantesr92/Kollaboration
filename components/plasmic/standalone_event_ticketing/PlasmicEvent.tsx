// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: MtmcKR1GuwbKEBJfYkVdj
// Component: hkFkrKhsZlzP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import Navbar2 from "../../Navbar2"; // plasmic-import: PlAJ5tJMUQMz/component
import Button from "../../Button"; // plasmic-import: 7c1YDuGGoKuq/component
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import MapComponent from "../../MapComponent"; // plasmic-import: stW4pBlbWOJb/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import Drawer from "../../Drawer"; // plasmic-import: TYvzrA570afD/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSwitch } from "@plasmicpkgs/antd5/skinny/registerSwitch";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: KfDAmu4lid5o/component
import CheckoutPage from "../../CheckoutPage"; // plasmic-import: PMnZ1e74obKC/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import Footer from "../../Footer"; // plasmic-import: THeG5BcdbXeZ/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantswiZsHgbT5CnT } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wiZSHgbT5cnT/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: MtmcKR1GuwbKEBJfYkVdj/projectcss
import sty from "./PlasmicEvent.module.css"; // plasmic-import: hkFkrKhsZlzP/css

import QrCodeSvgIcon from "./icons/PlasmicIcon__QrCodeSvg"; // plasmic-import: 0HW0x7mc2coQ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _VJXnu9sySb9/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: V9lHh1c0c7g6/icon
import ShoppingBagOpenSvgIcon from "./icons/PlasmicIcon__ShoppingBagOpenSvg"; // plasmic-import: bGcuTnz_rqjr/icon
import TimerSvgIcon from "./icons/PlasmicIcon__TimerSvg"; // plasmic-import: iVtDgIulrNC8/icon
import TicketSvgIcon from "./icons/PlasmicIcon__TicketSvg"; // plasmic-import: OxvLqJub0eBw/icon
import TrashSvgIcon from "./icons/PlasmicIcon__TrashSvg"; // plasmic-import: dKZ8ZQGn2s_e/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: mFdXj3H03u7X/icon

createPlasmicElementProxy;

export type PlasmicEvent__VariantMembers = {};
export type PlasmicEvent__VariantsArgs = {};
type VariantPropType = keyof PlasmicEvent__VariantsArgs;
export const PlasmicEvent__VariantProps = new Array<VariantPropType>();

export type PlasmicEvent__ArgsType = {};
type ArgPropType = keyof PlasmicEvent__ArgsType;
export const PlasmicEvent__ArgProps = new Array<ArgPropType>();

export type PlasmicEvent__OverridesType = {
  root?: Flex__<"div">;
  navbar2?: Flex__<typeof Navbar2>;
  image?: Flex__<"div">;
  title?: Flex__<"div">;
  selectEventDate?: Flex__<typeof AntdRadioGroup>;
  description?: Flex__<"div">;
  location?: Flex__<"div">;
  mapComponent?: Flex__<typeof MapComponent>;
  tickets?: Flex__<"div">;
  ticketsQuantity?: Flex__<typeof AntdSelect>;
  createPurchase?: Flex__<typeof Drawer>;
  donationValue2?: Flex__<typeof AntdInputNumber>;
  roundUp?: Flex__<typeof AntdSwitch>;
  clearCart?: Flex__<typeof Button>;
  contactInfoForm?: Flex__<typeof FormWrapper>;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  checkoutPage?: Flex__<typeof CheckoutPage>;
  lottie?: Flex__<typeof LottieWrapper>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultEventProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEvent__RenderFunc(props: {
  variants: PlasmicEvent__VariantsArgs;
  args: PlasmicEvent__ArgsType;
  overrides: PlasmicEvent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loadingCart",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "ticketsQuantity[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "selectors",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "purchaseid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "createPurchase.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "roundUp.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cartLoader",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "donationValue2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "timer",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "purchaseTime",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 5
      },
      {
        path: "timesUpMessage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectEventDate.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.eventDates.data.response.data.map(date => ({
                label: date.StartDate,
                value: date.id
              }))[0].value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "0cfa50af-a399-46e8-9643-e54773de9988";
              }
              throw e;
            }
          })()
      },
      {
        path: "ticketsAvailable",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const tickets_limit =
                  $queries.getTickets.data.response.data || [];
                let TicketPurchases =
                  $queries.purchasedTickets.data.response.data || [];
                const CurrentTicketsPurchase =
                  $queries.getCart.data.response.data || [];
                const PurchaseFilter =
                  $queries.purchasedByDate.data.response.data || [];
                TicketPurchases = TicketPurchases.filter(purchase =>
                  PurchaseFilter.some(
                    filterItem => filterItem.id === purchase.PurchaseId
                  )
                );
                const ticketLimits = {};
                tickets_limit.forEach(item => {
                  ticketLimits[item.id] = item.TicketQuantity || 0;
                });
                const purchaseSums = {};
                TicketPurchases.forEach(purchase => {
                  if (purchase.TicketId in purchaseSums) {
                    purchaseSums[purchase.TicketId] +=
                      purchase.TicketQuantity || 0;
                  } else {
                    purchaseSums[purchase.TicketId] =
                      purchase.TicketQuantity || 0;
                  }
                });
                const currentPurchaseSums = {};
                CurrentTicketsPurchase.forEach(purchase => {
                  if (purchase.TicketId in currentPurchaseSums) {
                    currentPurchaseSums[purchase.TicketId] +=
                      purchase.TicketQuantity || 0;
                  } else {
                    currentPurchaseSums[purchase.TicketId] =
                      purchase.TicketQuantity || 0;
                  }
                });
                const responseDetails = [];
                tickets_limit.forEach(item => {
                  const ticketId = item.id;
                  const purchasedSoFar = purchaseSums[ticketId] || 0;
                  const purchasingNow = currentPurchaseSums[ticketId] || 0;
                  const limit = ticketLimits[ticketId] || 0;
                  const ticketDetails = {
                    ticketId: ticketId,
                    purchasedSoFar: purchasedSoFar,
                    purchasingNow: purchasingNow,
                    limit: limit,
                    message: `Purchasing ${purchasingNow} tickets, Limit ${limit} tickets, Purchased so far ${purchasedSoFar} tickets.`
                  };
                  if (purchasedSoFar + purchasingNow > limit) {
                    ticketDetails.exceedsLimit = true;
                    ticketDetails.error = `TicketId ${ticketId} exceeds the allowed quantity.`;
                  } else {
                    ticketDetails.exceedsLimit = false;
                  }
                  responseDetails.push(ticketDetails);
                });
                return {
                  success: true,
                  details: responseDetails
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "contactInfoForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "contactInfoForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "contactInfoForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "contactInfoForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "totalFees",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const subtotal = $state.subTotal;
                const transaction_fee =
                  0.3 +
                  subtotal * 0.029 +
                  $queries.getCart.data.response.data.reduce(
                    (acc, ticket) =>
                      acc +
                      ticket.TicketQuantity *
                        ticket.TicketPrice *
                        (ticket.TicketFee / 100),
                    0
                  );
                const transaction_fee_rounded =
                  Math.ceil(transaction_fee * 100) / 100;
                return transaction_fee_rounded;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "subTotal",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const transaction_fee =
                  $queries.getCart.data.response.data.reduce(
                    (acc, ticket) =>
                      acc + ticket.TicketQuantity * ticket.TicketPrice,
                    0
                  );
                return transaction_fee;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getEvent: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "723260f8-6de6-44e0-9dee-0654a816e578",
        userArgs: {
          path: [$ctx.params.eventId]
        },
        cacheKey: `plasmic.$.723260f8-6de6-44e0-9dee-0654a816e578.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getTickets: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "07defa4d-f699-40ad-8c34-cb1a95feec0a",
        userArgs: {
          path: [$state.selectEventDate.value]
        },
        cacheKey: `plasmic.$.07defa4d-f699-40ad-8c34-cb1a95feec0a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPurchases: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "1ae0bf37-539b-4ed3-b1e0-6c762a2c2586",
        userArgs: {
          path: [localStorage.getItem("PurchaseId")]
        },
        cacheKey: `plasmic.$.1ae0bf37-539b-4ed3-b1e0-6c762a2c2586.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCart: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "0cc6a39e-f808-4bf3-9d06-951fa0e68d3a",
        userArgs: {
          path: [localStorage.getItem("PurchaseId")]
        },
        cacheKey: `plasmic.$.0cc6a39e-f808-4bf3-9d06-951fa0e68d3a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    eventDates: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "1890dbd3-76f5-416d-b1ff-c69825ef5cdf",
        userArgs: {
          path: [$ctx.params.eventId]
        },
        cacheKey: `plasmic.$.1890dbd3-76f5-416d-b1ff-c69825ef5cdf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    purchasedByDate: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "ccdf9225-a742-4324-b663-f82fa33e998e",
        userArgs: {
          path: [$state.selectEventDate.value]
        },
        cacheKey: `plasmic.$.ccdf9225-a742-4324-b663-f82fa33e998e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    purchasedTickets: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "b895aa89-cd9e-48f4-84d1-e42992d31c7f",
        userArgs: {
          params: [
            (() => {
              {
                TicketId: {
                  _in: $queries.getTickets.data.response.data.map(
                    ticket => ticket.id
                  );
                }
              }
            })()
          ]
        },
        cacheKey: `plasmic.$.b895aa89-cd9e-48f4-84d1-e42992d31c7f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentDomain: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "b78fd612-3418-4931-ad25-f4d8df4d76c3",
        userArgs: {
          path: [window.location.hostname]
        },
        cacheKey: `plasmic.$.b78fd612-3418-4931-ad25-f4d8df4d76c3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswiZsHgbT5CnT()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <ConditionGuard
            className={classNames("__wab_instance", sty.conditionGuard__f1DfN)}
            condition={(() => {
              try {
                return (
                  $queries.getEvent.data.response.data.DomainId ==
                  $queries.currentDomain.data.response.data[0].id
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
          >
            <Navbar2
              data-plasmic-name={"navbar2"}
              data-plasmic-override={overrides.navbar2}
              className={classNames("__wab_instance", sty.navbar2)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__jZaQz)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bsCaq)}
              >
                <div
                  data-plasmic-name={"image"}
                  data-plasmic-override={overrides.image}
                  className={classNames(projectcss.all, sty.image)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__gjrpl)}
                    displayHeight={"350px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return (
                          "https://events-db-directus.6sizjj.easypanel.host/assets/" +
                          $queries.getEvent.data.response.data.Hero
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
                <ConditionGuard
                  className={classNames(
                    "__wab_instance",
                    sty.conditionGuard___0OQRa
                  )}
                  condition={(() => {
                    try {
                      return (
                        currentUser.customProperties.role ==
                          "1ceacb7a-f026-46ef-9daa-13f8c86f89a3" ||
                        currentUser.customProperties.role ==
                          "07b345f2-a68e-4456-ae77-6fced8ee7cb7"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__ioVzq)}
                    link={(() => {
                      try {
                        return (
                          "/tickets-scanner?eventId=" + $ctx.params.eventId
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};
                    }}
                    startIcon={
                      <QrCodeSvgIcon
                        className={classNames(projectcss.all, sty.svg__m0Gla)}
                        role={"img"}
                      />
                    }
                  >
                    {"Scan Tickets"}
                  </Button>
                </ConditionGuard>
                <div
                  data-plasmic-name={"title"}
                  data-plasmic-override={overrides.title}
                  className={classNames(projectcss.all, sty.title)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___40MBo
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getEvent.data.response.data.EventName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0M1Ex
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getEvent.data.response.data
                            .EventLocation;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__r1Y6C)}
                  >
                    {(() => {
                      try {
                        return (
                          $queries.eventDates.data.response.data.map(date => ({
                            label: date.StartDate,
                            value: date.id
                          })).length > 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <AntdRadioGroup
                        data-plasmic-name={"selectEventDate"}
                        data-plasmic-override={overrides.selectEventDate}
                        children={null}
                        className={classNames(
                          "__wab_instance",
                          sty.selectEventDate
                        )}
                        defaultValue={(() => {
                          try {
                            return $queries.eventDates.data.response.data.map(
                              date => ({
                                label: date.StartDate,
                                value: date.id
                              })
                            )[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "0cfa50af-a399-46e8-9643-e54773de9988";
                            }
                            throw e;
                          }
                        })()}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "selectEventDate",
                            "value"
                          ]).apply(null, eventArgs);
                          (async value => {
                            const $steps = {};

                            $steps["refreshData"] = true
                              ? (() => {
                                  const actionArgs = {
                                    queryInvalidation: [
                                      "1890dbd3-76f5-416d-b1ff-c69825ef5cdf",
                                      "1ae0bf37-539b-4ed3-b1e0-6c762a2c2586"
                                    ]
                                  };
                                  return (async ({ queryInvalidation }) => {
                                    if (!queryInvalidation) {
                                      return;
                                    }
                                    await plasmicInvalidate(queryInvalidation);
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["refreshData"] != null &&
                              typeof $steps["refreshData"] === "object" &&
                              typeof $steps["refreshData"].then === "function"
                            ) {
                              $steps["refreshData"] = await $steps[
                                "refreshData"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        optionType={"default"}
                        options={(() => {
                          try {
                            return $queries.eventDates.data.response.data.map(
                              date => ({
                                label: date.StartDate,
                                value: date.id
                              })
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [
                                { value: "option1", label: "Option 1" },
                                { value: "option2", label: "Option 2" }
                              ];
                            }
                            throw e;
                          }
                        })()}
                        value={generateStateValueProp($state, [
                          "selectEventDate",
                          "value"
                        ])}
                      />
                    ) : null}
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iOgoX)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jKpFw)}
                  >
                    <div
                      data-plasmic-name={"description"}
                      data-plasmic-override={overrides.description}
                      className={classNames(projectcss.all, sty.description)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h74Gj
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Event Description"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jnuGy
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Acerca del evento"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eg9CA
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.getEvent.data.response.data
                                .EventDescription;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"location"}
                      data-plasmic-override={overrides.location}
                      className={classNames(projectcss.all, sty.location)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fXYa3
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Event Location"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o1JOk
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Ubicaci\u00f3n"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q1O
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.getEvent.data.response.data
                                .EventVenue;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__d8AxN
                        )}
                      >
                        <MapComponent
                          data-plasmic-name={"mapComponent"}
                          data-plasmic-override={overrides.mapComponent}
                          className={classNames(
                            "__wab_instance",
                            sty.mapComponent
                          )}
                          location={(() => {
                            try {
                              return {
                                lng: $queries.getEvent.data.response.data.lng,
                                lat: $queries.getEvent.data.response.data.lat
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"tickets"}
                    data-plasmic-override={overrides.tickets}
                    className={classNames(projectcss.all, sty.tickets)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__f7XW)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.getTickets.data.response.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ooaXn
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__s0H4G
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.TicketType;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__erUar
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "$" + currentItem.TicketPrice.toFixed(2)
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(() => {
                              const child$Props = {
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.ticketsQuantity
                                ),
                                defaultStylesClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                ),
                                defaultValue: (() => {
                                  try {
                                    return $queries.getCart.data.response.data.filter(
                                      ticket =>
                                        ticket.TicketId == currentItem.id
                                    )[0].TicketQuantity;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "ticketsQuantity",
                                    __plasmic_idx_0,
                                    "value"
                                  ]).apply(null, eventArgs);
                                  (async (value, option) => {
                                    const $steps = {};

                                    $steps["updateSelectors"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["selectors"]
                                            },
                                            operation: 0,
                                            value: ($state.selectors = [
                                              ...$state.selectors.filter(
                                                item =>
                                                  item.TicketId !==
                                                  currentItem.id
                                              ),
                                              ...($state.ticketsQuantity[
                                                currentIndex
                                              ].value > 0
                                                ? [
                                                    {
                                                      TicketId: currentItem.id,
                                                      TicketQuantity:
                                                        $state.ticketsQuantity[
                                                          currentIndex
                                                        ].value,
                                                      TicketPrice:
                                                        currentItem.TicketPrice,
                                                      TicketFee:
                                                        currentItem.TicketFee
                                                    }
                                                  ]
                                                : [])
                                            ])
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateSelectors"] != null &&
                                      typeof $steps["updateSelectors"] ===
                                        "object" &&
                                      typeof $steps["updateSelectors"].then ===
                                        "function"
                                    ) {
                                      $steps["updateSelectors"] = await $steps[
                                        "updateSelectors"
                                      ];
                                    }
                                  }).apply(null, eventArgs);
                                },
                                options: (() => {
                                  try {
                                    return (() => {
                                      const generateOptions = ticket => {
                                        const availableTickets =
                                          ticket.limit -
                                          ticket.purchasedSoFar +
                                          ticket.purchasingNow;
                                        const maxOptions = Math.min(
                                          availableTickets,
                                          10
                                        );
                                        return Array.from(
                                          { length: maxOptions },
                                          (_, index) => ({
                                            label: index + 1,
                                            value: index + 1
                                          })
                                        );
                                      };
                                      const optionsArray =
                                        $state.ticketsAvailable.details
                                          .filter(
                                            ticket =>
                                              ticket.ticketId == currentItem.id
                                          )
                                          .map(ticket =>
                                            generateOptions(ticket)
                                          )[0];
                                      return optionsArray;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [
                                        {
                                          value: "option1",
                                          label: "Option 1",
                                          type: "option"
                                        },
                                        {
                                          value: "option2",
                                          label: "Option 2",
                                          type: "option"
                                        }
                                      ];
                                    }
                                    throw e;
                                  }
                                })(),
                                placeholder: "Select...",
                                popupScopeClassName:
                                  sty["ticketsQuantity__popup"],
                                value: generateStateValueProp($state, [
                                  "ticketsQuantity",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "ticketsQuantity[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "ticketsQuantity[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $queries.getCart.data.response.data.filter(
                                            ticket =>
                                              ticket.TicketId == currentItem.id
                                          )[0].TicketQuantity;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdSelect
                                  data-plasmic-name={"ticketsQuantity"}
                                  data-plasmic-override={
                                    overrides.ticketsQuantity
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                          </Stack__>
                        );
                      })}
                      <Drawer
                        data-plasmic-name={"createPurchase"}
                        data-plasmic-override={overrides.createPurchase}
                        className={classNames(
                          "__wab_instance",
                          sty.createPurchase
                        )}
                        onOpenChange={generateStateOnChangeProp($state, [
                          "createPurchase",
                          "open"
                        ])}
                        open={generateStateValueProp($state, [
                          "createPurchase",
                          "open"
                        ])}
                        slot={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__us5Bw
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___8PErm
                              )}
                            >
                              {(() => {
                                try {
                                  return (() => {
                                    const targetDate = new Date(
                                      $queries.getPurchases.data.response.data[0].date_created
                                    );
                                    const now = new Date().getTime();
                                    const difference =
                                      300000 - (now - targetDate.getTime());
                                    return difference > 0;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <TimerSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__n9VfC
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uepWg
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.timer.minutes
                                        ? $state.timer.minutes + ":"
                                        : "";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ub3Jx
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.timer.seconds;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <Timer
                                className={classNames(
                                  "__wab_instance",
                                  sty.timer___3TZ0V
                                )}
                                intervalSeconds={1}
                                isRunning={(() => {
                                  try {
                                    return (
                                      $queries.getPurchases.data.response.data
                                        .length > 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()}
                                onTick={async () => {
                                  const $steps = {};

                                  $steps["updateTimer"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["timer"]
                                          },
                                          operation: 0,
                                          value: (() => {
                                            const targetDate = new Date(
                                              $queries.getPurchases.data.response.data[0].date_created
                                            );
                                            const now = new Date().getTime();
                                            const difference =
                                              $state.purchaseTime * 60000 -
                                              (now - targetDate.getTime());
                                            let minutes, seconds;
                                            if (difference < 0) {
                                              minutes = 0;
                                              seconds = 0;
                                            } else {
                                              minutes = Math.floor(
                                                (difference %
                                                  (1000 * 60 * 60)) /
                                                  (1000 * 60)
                                              );
                                              seconds = Math.floor(
                                                (difference % (1000 * 60)) /
                                                  1000
                                              );
                                            }
                                            const timer = {
                                              minutes: minutes,
                                              seconds: seconds
                                            };
                                            return timer;
                                          })()
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateTimer"] != null &&
                                    typeof $steps["updateTimer"] === "object" &&
                                    typeof $steps["updateTimer"].then ===
                                      "function"
                                  ) {
                                    $steps["updateTimer"] = await $steps[
                                      "updateTimer"
                                    ];
                                  }

                                  $steps["updateTimesUpMessage"] = (() => {
                                    const targetDate = new Date(
                                      $queries.getPurchases.data.response.data[0].date_created
                                    );
                                    const now = new Date().getTime();
                                    const difference =
                                      $state.purchaseTime * 60000 -
                                      (now - targetDate.getTime());
                                    return difference == 0 || difference < 0;
                                  })()
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["timesUpMessage"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateTimesUpMessage"] != null &&
                                    typeof $steps["updateTimesUpMessage"] ===
                                      "object" &&
                                    typeof $steps["updateTimesUpMessage"]
                                      .then === "function"
                                  ) {
                                    $steps["updateTimesUpMessage"] =
                                      await $steps["updateTimesUpMessage"];
                                  }

                                  $steps["runCode"] = (() => {
                                    const targetDate = new Date(
                                      $queries.getPurchases.data.response.data[0].date_created
                                    );
                                    const now = new Date().getTime();
                                    const difference =
                                      $state.purchaseTime * 60000 -
                                      (now - targetDate.getTime());
                                    return difference == 0 || difference < 0;
                                  })()
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return localStorage.removeItem(
                                              "PurchaseId"
                                            );
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }
                                }}
                                runWhileEditing={false}
                              />
                            </Stack__>
                            {(() => {
                              try {
                                return $state.cartLoader == false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___3SyDv
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.getCart.data.response
                                        .data;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__wyYMe
                                      )}
                                      key={currentIndex}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__c7Tr
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $queries.getTickets.data.response.data.filter(
                                                ticket =>
                                                  ticket.id ==
                                                  currentItem.TicketId
                                              )[0].TicketType;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__xlPb8
                                        )}
                                      >
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__dzH4A
                                          )}
                                        >
                                          <TicketSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__uKvUn
                                            )}
                                            role={"img"}
                                          />

                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__l6T22
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    "x" +
                                                    currentItem.TicketQuantity
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </Stack__>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__ilX2X
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__bQkDp
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    "$" +
                                                    currentItem.TicketPrice
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__fWH5
                                          )}
                                        >
                                          <TrashSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__svwTs
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["httpDelete"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      dataOp: {
                                                        sourceId:
                                                          "2jPYjgtJgbD3LaNLTLfSHG",
                                                        opId: "5e722670-92fb-4762-85fb-83e1119d2ae1",
                                                        userArgs: {
                                                          path: [currentItem.id]
                                                        },
                                                        cacheKey: null,
                                                        invalidatedKeys: [
                                                          "plasmic_refresh_all"
                                                        ],
                                                        roleId: null
                                                      }
                                                    };
                                                    return (async ({
                                                      dataOp,
                                                      continueOnError
                                                    }) => {
                                                      try {
                                                        const response =
                                                          await executePlasmicDataOp(
                                                            dataOp,
                                                            {
                                                              userAuthToken:
                                                                dataSourcesCtx?.userAuthToken,
                                                              user: dataSourcesCtx?.user
                                                            }
                                                          );
                                                        await plasmicInvalidate(
                                                          dataOp.invalidatedKeys
                                                        );
                                                        return response;
                                                      } catch (e) {
                                                        if (!continueOnError) {
                                                          throw e;
                                                        }
                                                        return e;
                                                      }
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["httpDelete"] != null &&
                                                typeof $steps["httpDelete"] ===
                                                  "object" &&
                                                typeof $steps["httpDelete"]
                                                  .then === "function"
                                              ) {
                                                $steps["httpDelete"] =
                                                  await $steps["httpDelete"];
                                              }

                                              $steps["updateSelectors"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "selectors"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value:
                                                        $state.selectors.filter(
                                                          item =>
                                                            item.TicketId !==
                                                            currentItem.TicketId
                                                        )
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateSelectors"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateSelectors"
                                                ] === "object" &&
                                                typeof $steps["updateSelectors"]
                                                  .then === "function"
                                              ) {
                                                $steps["updateSelectors"] =
                                                  await $steps[
                                                    "updateSelectors"
                                                  ];
                                              }

                                              $steps["refreshData"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      queryInvalidation: [
                                                        "ccdf9225-a742-4324-b663-f82fa33e998e",
                                                        "b895aa89-cd9e-48f4-84d1-e42992d31c7f",
                                                        "0cc6a39e-f808-4bf3-9d06-951fa0e68d3a"
                                                      ]
                                                    };
                                                    return (async ({
                                                      queryInvalidation
                                                    }) => {
                                                      if (!queryInvalidation) {
                                                        return;
                                                      }
                                                      await plasmicInvalidate(
                                                        queryInvalidation
                                                      );
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["refreshData"] != null &&
                                                typeof $steps["refreshData"] ===
                                                  "object" &&
                                                typeof $steps["refreshData"]
                                                  .then === "function"
                                              ) {
                                                $steps["refreshData"] =
                                                  await $steps["refreshData"];
                                              }
                                            }}
                                            role={"img"}
                                          />
                                        </div>
                                      </div>
                                    </Stack__>
                                  );
                                })}
                                {(() => {
                                  try {
                                    return (
                                      $queries.getCart.data.response.data
                                        .length > 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__vbqBh
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__zo7Qa
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__gZ4Vu
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bJeK
                                          )}
                                        >
                                          {"Total Fees"}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__q6P7V
                                        )}
                                      >
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__ju3KF
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xaJl5
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return "$";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__eXWa
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return $state.totalFees;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </Stack__>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__ugXgy
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___8ZGi6
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__lYxa
                                          )}
                                        >
                                          {"Donation"}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__jvuI0
                                        )}
                                      >
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__uGlx0
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__x4VW
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return "$";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <AntdInputNumber
                                            data-plasmic-name={"donationValue2"}
                                            data-plasmic-override={
                                              overrides.donationValue2
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.donationValue2
                                            )}
                                            min={0}
                                            onChange={generateStateOnChangeProp(
                                              $state,
                                              ["donationValue2", "value"]
                                            )}
                                            type={"number"}
                                            value={generateStateValueProp(
                                              $state,
                                              ["donationValue2", "value"]
                                            )}
                                          />
                                        </Stack__>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__lj614
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__nduqX
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__xDOrt
                                          )}
                                        >
                                          {"Round up?"}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__hCjtg
                                        )}
                                      >
                                        <AntdSwitch
                                          data-plasmic-name={"roundUp"}
                                          data-plasmic-override={
                                            overrides.roundUp
                                          }
                                          checked={generateStateValueProp(
                                            $state,
                                            ["roundUp", "checked"]
                                          )}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.roundUp
                                          )}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["roundUp", "checked"]
                                          )}
                                        />
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__vBtCa
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__hNdGy
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__p9Eo
                                          )}
                                        >
                                          {"Total"}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___2Lr4J
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__kw0Eo
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $state.roundUp.checked
                                                  ? Math.ceil(
                                                      $state.subTotal +
                                                        $state.totalFees
                                                    ) +
                                                      $state.donationValue2
                                                        .value
                                                  : Math.ceil(
                                                      ($state.subTotal +
                                                        $state.totalFees) *
                                                        100
                                                    ) /
                                                      100 +
                                                      $state.donationValue2
                                                        .value;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__cirKf
                                      )}
                                    >
                                      <Button
                                        data-plasmic-name={"clearCart"}
                                        data-plasmic-override={
                                          overrides.clearCart
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.clearCart
                                        )}
                                        color={"softSand"}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["httpDelete"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "2jPYjgtJgbD3LaNLTLfSHG",
                                                    opId: "1c5cc07c-d4df-41bc-9757-b0f688246ed3",
                                                    userArgs: {
                                                      body: [
                                                        $queries.getPurchases
                                                          .data.response.data[0]
                                                          .id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["httpDelete"] != null &&
                                            typeof $steps["httpDelete"] ===
                                              "object" &&
                                            typeof $steps["httpDelete"].then ===
                                              "function"
                                          ) {
                                            $steps["httpDelete"] = await $steps[
                                              "httpDelete"
                                            ];
                                          }

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return localStorage.removeItem(
                                                      "PurchaseId"
                                                    );
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }

                                          $steps["refreshData"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  queryInvalidation: [
                                                    "ccdf9225-a742-4324-b663-f82fa33e998e",
                                                    "b895aa89-cd9e-48f4-84d1-e42992d31c7f",
                                                    "1ae0bf37-539b-4ed3-b1e0-6c762a2c2586",
                                                    "0cc6a39e-f808-4bf3-9d06-951fa0e68d3a"
                                                  ]
                                                };
                                                return (async ({
                                                  queryInvalidation
                                                }) => {
                                                  if (!queryInvalidation) {
                                                    return;
                                                  }
                                                  await plasmicInvalidate(
                                                    queryInvalidation
                                                  );
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["refreshData"] != null &&
                                            typeof $steps["refreshData"] ===
                                              "object" &&
                                            typeof $steps["refreshData"]
                                              .then === "function"
                                          ) {
                                            $steps["refreshData"] =
                                              await $steps["refreshData"];
                                          }
                                        }}
                                        startIcon={
                                          <TrashSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__ze2Jo
                                            )}
                                            role={"img"}
                                          />
                                        }
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___24Uxq
                                          )}
                                        >
                                          {"Clear Cart"}
                                        </div>
                                      </Button>
                                    </div>
                                  </Stack__>
                                ) : null}
                                {(() => {
                                  try {
                                    return (
                                      $queries.getCart.data.response.data
                                        .length > 0 &&
                                      (!$queries.getPurchases.data.response
                                        .data[0].CustomerEmailAddress ||
                                        $queries.getPurchases.data.response
                                          .data[0].CustomerEmailAddress
                                          .length == 0)
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__oOwet
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__aGrjE
                                      )}
                                    >
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{ fontWeight: 700 }}
                                        >
                                          {
                                            "Add your contact information to deliver the tickets"
                                          }
                                        </span>
                                      </React.Fragment>
                                    </div>
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.contactInfoForm
                                        ),
                                        extendedOnValuesChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["contactInfoForm", "value"],
                                            FormWrapper_Helpers
                                          ),
                                        formItems: [
                                          {
                                            label: "Name",
                                            name: "name",
                                            inputType: "Text"
                                          },
                                          {
                                            label: "Message",
                                            name: "message",
                                            inputType: "Text Area"
                                          }
                                        ],
                                        labelCol: {
                                          span: 8,
                                          horizontalOnly: true
                                        },
                                        layout: "vertical",
                                        mode: "advanced",
                                        onFinish: async values => {
                                          const $steps = {};

                                          $steps["httpPatch"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "2jPYjgtJgbD3LaNLTLfSHG",
                                                    opId: "27ff2ba2-5fab-4105-856a-a998bfebd0ac",
                                                    userArgs: {
                                                      path: [
                                                        localStorage.getItem(
                                                          "PurchaseId"
                                                        )
                                                      ],
                                                      body: [
                                                        $state.contactInfoForm
                                                          .value
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "1ae0bf37-539b-4ed3-b1e0-6c762a2c2586"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["httpPatch"] != null &&
                                            typeof $steps["httpPatch"] ===
                                              "object" &&
                                            typeof $steps["httpPatch"].then ===
                                              "function"
                                          ) {
                                            $steps["httpPatch"] = await $steps[
                                              "httpPatch"
                                            ];
                                          }
                                        },
                                        onIsSubmittingChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "isSubmitting",
                                            ["contactInfoForm", "isSubmitting"],
                                            FormWrapper_Helpers
                                          ),
                                        ref: ref => {
                                          $refs["contactInfoForm"] = ref;
                                        },
                                        submitSlot: null,
                                        wrapperCol: {
                                          span: 16,
                                          horizontalOnly: true
                                        }
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName:
                                              "contactInfoForm.value"
                                          },
                                          {
                                            name: "isSubmitting",
                                            plasmicStateName:
                                              "contactInfoForm.isSubmitting"
                                          }
                                        ],
                                        [],
                                        FormWrapper_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <FormWrapper
                                          data-plasmic-name={"contactInfoForm"}
                                          data-plasmic-override={
                                            overrides.contactInfoForm
                                          }
                                          {...child$Props}
                                        >
                                          <FormItemWrapper
                                            className={classNames(
                                              "__wab_instance",
                                              sty.formField__sZiCs
                                            )}
                                            label={
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__jZSe9
                                                )}
                                              >
                                                {"Name"}
                                              </div>
                                            }
                                            name={"CustomerName"}
                                            rules={[
                                              {
                                                ruleType: "required",
                                                message:
                                                  "Please enter your name"
                                              }
                                            ]}
                                          >
                                            <TextInput
                                              data-plasmic-name={"textInput"}
                                              data-plasmic-override={
                                                overrides.textInput
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.textInput
                                              )}
                                              endIcon={
                                                <CheckSvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg___9FpMf
                                                  )}
                                                  role={"img"}
                                                />
                                              }
                                              onChange={(...eventArgs) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["textInput", "value"]
                                                )(
                                                  (e => e.target?.value).apply(
                                                    null,
                                                    eventArgs
                                                  )
                                                );
                                              }}
                                              value={
                                                generateStateValueProp($state, [
                                                  "textInput",
                                                  "value"
                                                ]) ?? ""
                                              }
                                            />
                                          </FormItemWrapper>
                                          <FormItemWrapper
                                            className={classNames(
                                              "__wab_instance",
                                              sty.formField__koOaW
                                            )}
                                            label={
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ujVCl
                                                )}
                                              >
                                                {"Email address"}
                                              </div>
                                            }
                                            name={"CustomerEmailAddress"}
                                            rules={[
                                              {
                                                ruleType: "required",
                                                message:
                                                  "Please enter your email address"
                                              },

                                              {
                                                ruleType: "advanced",
                                                custom: (rule, value) => {
                                                  return (() => {
                                                    const emailPattern =
                                                      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                                                    return emailPattern.test(
                                                      $state.contactInfoForm
                                                        .value
                                                        .CustomerEmailAddress
                                                    );
                                                  })();
                                                },
                                                message:
                                                  "The enter email address is not valid"
                                              }
                                            ]}
                                          >
                                            <TextInput
                                              data-plasmic-name={"textInput2"}
                                              data-plasmic-override={
                                                overrides.textInput2
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.textInput2
                                              )}
                                              endIcon={
                                                <CheckSvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__gXwk1
                                                  )}
                                                  role={"img"}
                                                />
                                              }
                                              onChange={(...eventArgs) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["textInput2", "value"]
                                                )(
                                                  (e => e.target?.value).apply(
                                                    null,
                                                    eventArgs
                                                  )
                                                );
                                              }}
                                              value={
                                                generateStateValueProp($state, [
                                                  "textInput2",
                                                  "value"
                                                ]) ?? ""
                                              }
                                            />
                                          </FormItemWrapper>
                                          <FormItemWrapper
                                            className={classNames(
                                              "__wab_instance",
                                              sty.formField__hRqXa
                                            )}
                                            label={
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__b8Dcy
                                                )}
                                              >
                                                {"Validate email address"}
                                              </div>
                                            }
                                            name={"ValidateEmailAddress"}
                                            rules={[
                                              {
                                                ruleType: "required",
                                                message:
                                                  "Please validate your email address"
                                              },

                                              {
                                                ruleType: "advanced",
                                                custom: (rule, value) => {
                                                  return (
                                                    $state.contactInfoForm.value
                                                      .CustomerEmailAddress ==
                                                    $state.contactInfoForm.value
                                                      .ValidateEmailAddress
                                                  );
                                                },
                                                message:
                                                  "Email values do not match"
                                              },

                                              {
                                                ruleType: "advanced",
                                                custom: (rule, value) => {
                                                  return (() => {
                                                    const emailPattern =
                                                      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                                                    return emailPattern.test(
                                                      $state.contactInfoForm
                                                        .value
                                                        .ValidateEmailAddress
                                                    );
                                                  })();
                                                },
                                                message:
                                                  "The enter email address is not valid"
                                              }
                                            ]}
                                          >
                                            <TextInput
                                              data-plasmic-name={"textInput3"}
                                              data-plasmic-override={
                                                overrides.textInput3
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.textInput3
                                              )}
                                              endIcon={
                                                <CheckSvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__ufDqz
                                                  )}
                                                  role={"img"}
                                                />
                                              }
                                              onChange={(...eventArgs) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  ["textInput3", "value"]
                                                )(
                                                  (e => e.target?.value).apply(
                                                    null,
                                                    eventArgs
                                                  )
                                                );
                                              }}
                                              value={
                                                generateStateValueProp($state, [
                                                  "textInput3",
                                                  "value"
                                                ]) ?? ""
                                              }
                                            />
                                          </FormItemWrapper>
                                          <Button
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__tv5C0
                                            )}
                                            color={"blue"}
                                            startIcon={
                                              <CheckSvgIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__imhxK
                                                )}
                                                role={"img"}
                                              />
                                            }
                                            submitsForm={true}
                                          >
                                            {"Submit"}
                                          </Button>
                                        </FormWrapper>
                                      );
                                    })()}
                                  </Stack__>
                                ) : null}
                                {(() => {
                                  try {
                                    return (
                                      $queries.getCart.data.response.data
                                        .length > 0 &&
                                      $queries.getPurchases.data.response
                                        .data[0].CustomerEmailAddress.length > 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cBf9R
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gfMvX
                                      )}
                                    >
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{ fontWeight: 700 }}
                                        >
                                          {"Tickets delivery information"}
                                        </span>
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__km9Gs
                                      )}
                                    >
                                      {"Name"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___3NFfk
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.getPurchases.data
                                              .response.data[0].CustomerName;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___2QKcL
                                      )}
                                    >
                                      {"Email address"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__uiHeC
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.getPurchases.data
                                              .response.data[0]
                                              .CustomerEmailAddress;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__lyDm5
                                      )}
                                      color={"softSand"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["httpPatch"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "2jPYjgtJgbD3LaNLTLfSHG",
                                                  opId: "27ff2ba2-5fab-4105-856a-a998bfebd0ac",
                                                  userArgs: {
                                                    path: [
                                                      localStorage.getItem(
                                                        "PurchaseId"
                                                      )
                                                    ],
                                                    body: [
                                                      {
                                                        CustomerName: "",
                                                        CustomerEmailAddress: ""
                                                      }
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["httpPatch"] != null &&
                                          typeof $steps["httpPatch"] ===
                                            "object" &&
                                          typeof $steps["httpPatch"].then ===
                                            "function"
                                        ) {
                                          $steps["httpPatch"] = await $steps[
                                            "httpPatch"
                                          ];
                                        }
                                      }}
                                      startIcon={
                                        <CheckSvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg___1YwEx
                                          )}
                                          role={"img"}
                                        />
                                      }
                                    >
                                      {"Edit"}
                                    </Button>
                                  </Stack__>
                                ) : null}
                              </Stack__>
                            ) : null}
                            {(() => {
                              try {
                                return (
                                  $queries.getCart.data.response.data.length >
                                    0 &&
                                  $state.cartLoader == false &&
                                  $queries.getPurchases.data.response.data[0]
                                    .CustomerEmailAddress.length > 0
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__adQKo
                                )}
                              >
                                <CheckoutPage
                                  data-plasmic-name={"checkoutPage"}
                                  data-plasmic-override={overrides.checkoutPage}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.checkoutPage
                                  )}
                                  donation={(() => {
                                    try {
                                      return $state.donationValue2.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  roundUp={(() => {
                                    try {
                                      return $state.roundUp.checked;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  ticketPurchasesArray={(() => {
                                    try {
                                      return $state.selectors;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return (
                                  $queries.getCart.data.response.data.length ==
                                    0 &&
                                  $state.cartLoader == false &&
                                  $state.timesUpMessage == false
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mmEy
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__ivHvs)}
                                  displayHeight={"100px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"100px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/standalone_event_ticketing/images/asset1Svg.svg",
                                    fullWidth: 784.07,
                                    fullHeight: 675.51,
                                    aspectRatio: 1.160708
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dlHi6
                                  )}
                                >
                                  {
                                    "Your order is empty, let's add some tickets"
                                  }
                                </div>
                              </Stack__>
                            ) : null}
                            {(() => {
                              try {
                                return $state.timesUpMessage;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4YPgD
                                )}
                              >
                                <TimerSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__vXnx
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__aXu3Z
                                  )}
                                >
                                  {
                                    "The time for completing your order has expired. Please start again"
                                  }
                                </div>
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__yz79N
                                  )}
                                  color={"softSand"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateTimesUpMessage"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["timesUpMessage"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateTimesUpMessage"] != null &&
                                      typeof $steps["updateTimesUpMessage"] ===
                                        "object" &&
                                      typeof $steps["updateTimesUpMessage"]
                                        .then === "function"
                                    ) {
                                      $steps["updateTimesUpMessage"] =
                                        await $steps["updateTimesUpMessage"];
                                    }
                                  }}
                                  startIcon={
                                    <CheckSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__b7Sbm
                                      )}
                                      role={"img"}
                                    />
                                  }
                                >
                                  {"Return"}
                                </Button>
                                <Timer
                                  className={classNames(
                                    "__wab_instance",
                                    sty.timer__jgw9S
                                  )}
                                  intervalSeconds={3}
                                  isRunning={(() => {
                                    try {
                                      return $state.timesUpMessage;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  onTick={async () => {
                                    const $steps = {};

                                    $steps["updateTimesUpMessage"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["timesUpMessage"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateTimesUpMessage"] != null &&
                                      typeof $steps["updateTimesUpMessage"] ===
                                        "object" &&
                                      typeof $steps["updateTimesUpMessage"]
                                        .then === "function"
                                    ) {
                                      $steps["updateTimesUpMessage"] =
                                        await $steps["updateTimesUpMessage"];
                                    }

                                    $steps["refreshData"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            queryInvalidation: [
                                              "b895aa89-cd9e-48f4-84d1-e42992d31c7f",
                                              "ccdf9225-a742-4324-b663-f82fa33e998e",
                                              "1ae0bf37-539b-4ed3-b1e0-6c762a2c2586",
                                              "0cc6a39e-f808-4bf3-9d06-951fa0e68d3a"
                                            ]
                                          };
                                          return (async ({
                                            queryInvalidation
                                          }) => {
                                            if (!queryInvalidation) {
                                              return;
                                            }
                                            await plasmicInvalidate(
                                              queryInvalidation
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["refreshData"] != null &&
                                      typeof $steps["refreshData"] ===
                                        "object" &&
                                      typeof $steps["refreshData"].then ===
                                        "function"
                                    ) {
                                      $steps["refreshData"] = await $steps[
                                        "refreshData"
                                      ];
                                    }
                                  }}
                                  runWhileEditing={false}
                                />
                              </Stack__>
                            ) : null}
                            {(() => {
                              try {
                                return $state.cartLoader;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mi85G
                                )}
                              >
                                <LottieWrapper
                                  data-plasmic-name={"lottie"}
                                  data-plasmic-override={overrides.lottie}
                                  animationData={{
                                    v: "5.1.8",
                                    fr: 29.9700012207031,
                                    ip: 0,
                                    op: 60.0000024438501,
                                    w: 100,
                                    h: 100,
                                    nm: "Spinner",
                                    ddd: 0,
                                    assets: [],
                                    layers: [
                                      {
                                        ddd: 0,
                                        ind: 1,
                                        ty: 4,
                                        nm: "spinner Outlines",
                                        sr: 1,
                                        ks: {
                                          o: { a: 0, k: 100, ix: 11 },
                                          r: { a: 0, k: 0, ix: 10 },
                                          p: { a: 0, k: [50, 50, 0], ix: 2 },
                                          a: { a: 0, k: [160, 284, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100, 100], ix: 6 }
                                        },
                                        ao: 0,
                                        shapes: [
                                          {
                                            ty: "gr",
                                            it: [
                                              {
                                                ind: 0,
                                                ty: "sh",
                                                ix: 1,
                                                ks: {
                                                  a: 0,
                                                  k: {
                                                    i: [
                                                      [0, 19.882],
                                                      [19.882, 0],
                                                      [0, -19.882],
                                                      [-19.882, 0]
                                                    ],
                                                    o: [
                                                      [0, -19.882],
                                                      [-19.882, 0],
                                                      [0, 19.882],
                                                      [19.882, 0]
                                                    ],
                                                    v: [
                                                      [36, 0],
                                                      [0, -36],
                                                      [-36, 0],
                                                      [0, 36]
                                                    ],
                                                    c: true
                                                  },
                                                  ix: 2
                                                },
                                                nm: "Path 1",
                                                mn: "ADBE Vector Shape - Group",
                                                hd: false
                                              },
                                              {
                                                ty: "tm",
                                                s: {
                                                  a: 1,
                                                  k: [
                                                    {
                                                      i: { x: [0.667], y: [1] },
                                                      o: {
                                                        x: [0.167],
                                                        y: [0.167]
                                                      },
                                                      n: [
                                                        "0p667_1_0p167_0p167"
                                                      ],
                                                      t: 0,
                                                      s: [100],
                                                      e: [0]
                                                    },
                                                    {
                                                      i: { x: [0.833], y: [1] },
                                                      o: { x: [0.167], y: [0] },
                                                      n: ["0p833_1_0p167_0"],
                                                      t: 29,
                                                      s: [0],
                                                      e: [0]
                                                    },
                                                    { t: 51.0000020772726 }
                                                  ],
                                                  ix: 1
                                                },
                                                e: {
                                                  a: 1,
                                                  k: [
                                                    {
                                                      i: {
                                                        x: [0.833],
                                                        y: [0.833]
                                                      },
                                                      o: { x: [0.333], y: [0] },
                                                      n: [
                                                        "0p833_0p833_0p333_0"
                                                      ],
                                                      t: 20,
                                                      s: [100],
                                                      e: [1]
                                                    },
                                                    { t: 60.0000024438501 }
                                                  ],
                                                  ix: 2
                                                },
                                                o: { a: 0, k: 0, ix: 3 },
                                                m: 1,
                                                ix: 2,
                                                nm: "Trim Paths 1",
                                                mn: "ADBE Vector Filter - Trim",
                                                hd: false
                                              },
                                              {
                                                ty: "st",
                                                c: {
                                                  a: 0,
                                                  k: [0, 0.541, 0.824, 1],
                                                  ix: 3
                                                },
                                                o: { a: 0, k: 100, ix: 4 },
                                                w: { a: 0, k: 10, ix: 5 },
                                                lc: 2,
                                                lj: 1,
                                                ml: 10,
                                                nm: "Stroke 1",
                                                mn: "ADBE Vector Graphic - Stroke",
                                                hd: false
                                              },
                                              {
                                                ty: "tr",
                                                p: {
                                                  a: 0,
                                                  k: [160, 284],
                                                  ix: 2
                                                },
                                                a: { a: 0, k: [0, 0], ix: 1 },
                                                s: {
                                                  a: 0,
                                                  k: [100, 100],
                                                  ix: 3
                                                },
                                                r: {
                                                  a: 1,
                                                  k: [
                                                    {
                                                      i: { x: [0.667], y: [1] },
                                                      o: {
                                                        x: [0.167],
                                                        y: [0.167]
                                                      },
                                                      n: [
                                                        "0p667_1_0p167_0p167"
                                                      ],
                                                      t: 0,
                                                      s: [-90],
                                                      e: [270]
                                                    },
                                                    { t: 59.0000024031193 }
                                                  ],
                                                  ix: 6
                                                },
                                                o: { a: 0, k: 100, ix: 7 },
                                                sk: { a: 0, k: 0, ix: 4 },
                                                sa: { a: 0, k: 0, ix: 5 },
                                                nm: "Transform"
                                              }
                                            ],
                                            nm: "Group 1",
                                            np: 3,
                                            cix: 2,
                                            ix: 1,
                                            mn: "ADBE Vector Group",
                                            hd: false
                                          }
                                        ],
                                        ip: 0,
                                        op: 60.0000024438501,
                                        st: 0,
                                        bm: 0
                                      }
                                    ],
                                    markers: []
                                  }}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.lottie
                                  )}
                                  preview={true}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qCoEj
                                  )}
                                >
                                  {"Loading..."}
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                        }
                        trigger={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9WLjB
                            )}
                            onClick={async event => {
                              const $steps = {};
                            }}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__g8LVw
                              )}
                              color={"blue"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCartLoader"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["cartLoader"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCartLoader"] != null &&
                                  typeof $steps["updateCartLoader"] ===
                                    "object" &&
                                  typeof $steps["updateCartLoader"].then ===
                                    "function"
                                ) {
                                  $steps["updateCartLoader"] = await $steps[
                                    "updateCartLoader"
                                  ];
                                }

                                $steps["createPurchase"] =
                                  $queries.getPurchases.data.response.data
                                    .length == 0
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                            opId: "b9ea73de-f2ff-4949-ae64-e33d93b53a46",
                                            userArgs: {
                                              body: [
                                                $state.selectEventDate.value
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "1ae0bf37-539b-4ed3-b1e0-6c762a2c2586"
                                            ],
                                            roleId: null
                                          },
                                          continueOnError: false
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["createPurchase"] != null &&
                                  typeof $steps["createPurchase"] ===
                                    "object" &&
                                  typeof $steps["createPurchase"].then ===
                                    "function"
                                ) {
                                  $steps["createPurchase"] = await $steps[
                                    "createPurchase"
                                  ];
                                }

                                $steps["runCode"] =
                                  $queries.getPurchases.data.response.data
                                    .length == 0
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return localStorage.setItem(
                                              "PurchaseId",
                                              $steps.createPurchase.data
                                                .response.data.id
                                            );
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["refreshData"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        queryInvalidation: [
                                          "0cc6a39e-f808-4bf3-9d06-951fa0e68d3a"
                                        ]
                                      };
                                      return (async ({ queryInvalidation }) => {
                                        if (!queryInvalidation) {
                                          return;
                                        }
                                        await plasmicInvalidate(
                                          queryInvalidation
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["refreshData"] != null &&
                                  typeof $steps["refreshData"] === "object" &&
                                  typeof $steps["refreshData"].then ===
                                    "function"
                                ) {
                                  $steps["refreshData"] = await $steps[
                                    "refreshData"
                                  ];
                                }

                                $steps["createCart"] = (() => {
                                  const Cart =
                                    $queries.getCart.data.response.data;
                                  return (
                                    $state.selectors.filter(
                                      item =>
                                        item.TicketQuantity > 0 &&
                                        !Cart.some(
                                          cartItem =>
                                            cartItem.PurchaseTicketId ==
                                            localStorage.getItem("PurchaseId") +
                                              item.TicketId
                                        )
                                    ).length > 0 &&
                                    localStorage.getItem("PurchaseId").length >
                                      0
                                  );
                                })()
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                          opId: "aa4d9c1d-2bb3-4ecf-ab09-cce96cd0a16b",
                                          userArgs: {
                                            body: [
                                              (() => {
                                                const cart =
                                                  $queries.getCart.data.response
                                                    .data;
                                                return $state.selectors
                                                  .filter(
                                                    item =>
                                                      item.TicketQuantity > 0 &&
                                                      !cart.some(
                                                        cartItem =>
                                                          cartItem.PurchaseTicketId ==
                                                          localStorage.getItem(
                                                            "PurchaseId"
                                                          ) +
                                                            item.TicketId
                                                      )
                                                  )
                                                  .map(new_cart => ({
                                                    ...new_cart,
                                                    PurchaseId:
                                                      localStorage.getItem(
                                                        "PurchaseId"
                                                      ),
                                                    PurchaseTicketId:
                                                      localStorage.getItem(
                                                        "PurchaseId"
                                                      ) + new_cart.TicketId
                                                  }));
                                              })(),
                                              localStorage.getItem("PurchaseId")
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "0cc6a39e-f808-4bf3-9d06-951fa0e68d3a"
                                          ],
                                          roleId: null
                                        },
                                        continueOnError: false
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["createCart"] != null &&
                                  typeof $steps["createCart"] === "object" &&
                                  typeof $steps["createCart"].then ===
                                    "function"
                                ) {
                                  $steps["createCart"] = await $steps[
                                    "createCart"
                                  ];
                                }

                                $steps["httpPatch"] =
                                  $state.selectors
                                    .map(ticket => {
                                      const matchedCart =
                                        $queries.getCart.data.response.data.find(
                                          n =>
                                            n.PurchaseTicketId ===
                                            localStorage.getItem("PurchaseId") +
                                              ticket.TicketId
                                        );
                                      return {
                                        ...ticket,
                                        id: matchedCart
                                          ? matchedCart
                                          : undefined
                                      };
                                    })
                                    .filter(ticket => ticket.id).length > 0 &&
                                  localStorage.getItem("PurchaseId").length > 0
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                            opId: "fc500074-fd26-48e0-8bd2-4813b65db5cd",
                                            userArgs: {
                                              body: [
                                                (() => {
                                                  const updatedTickets =
                                                    $state.selectors
                                                      .map(ticket => {
                                                        const matchedCart =
                                                          $queries.getCart.data.response.data.find(
                                                            cartItem =>
                                                              cartItem.PurchaseTicketId ===
                                                              localStorage.getItem(
                                                                "PurchaseId"
                                                              ) +
                                                                ticket.TicketId
                                                          );
                                                        return {
                                                          ...ticket,
                                                          id: matchedCart
                                                            ? matchedCart.id
                                                            : undefined
                                                        };
                                                      })
                                                      .filter(
                                                        ticket => ticket.id
                                                      );
                                                  return updatedTickets;
                                                })(),
                                                localStorage.getItem(
                                                  "PurchaseId"
                                                )
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "b895aa89-cd9e-48f4-84d1-e42992d31c7f",
                                              "ccdf9225-a742-4324-b663-f82fa33e998e",
                                              "0cc6a39e-f808-4bf3-9d06-951fa0e68d3a"
                                            ],
                                            roleId: null
                                          },
                                          continueOnError: false
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["httpPatch"] != null &&
                                  typeof $steps["httpPatch"] === "object" &&
                                  typeof $steps["httpPatch"].then === "function"
                                ) {
                                  $steps["httpPatch"] = await $steps[
                                    "httpPatch"
                                  ];
                                }

                                $steps["updateLoadingCart2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["cartLoader"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateLoadingCart2"] != null &&
                                  typeof $steps["updateLoadingCart2"] ===
                                    "object" &&
                                  typeof $steps["updateLoadingCart2"].then ===
                                    "function"
                                ) {
                                  $steps["updateLoadingCart2"] = await $steps[
                                    "updateLoadingCart2"
                                  ];
                                }
                              }}
                              startIcon={
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__bbtPv
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Add Tickets"}
                            </Button>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__utvE
                              )}
                              color={"blue"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["createPurchase"] =
                                  $queries.getPurchases.data.response.data
                                    .length == 0
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                            opId: "58990097-b1e7-4c8d-afe8-839d7c2ada78",
                                            userArgs: {},
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "plasmic_refresh_all"
                                            ],
                                            roleId:
                                              "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
                                          },
                                          continueOnError: false
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["createPurchase"] != null &&
                                  typeof $steps["createPurchase"] ===
                                    "object" &&
                                  typeof $steps["createPurchase"].then ===
                                    "function"
                                ) {
                                  $steps["createPurchase"] = await $steps[
                                    "createPurchase"
                                  ];
                                }

                                $steps["refreshData2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        queryInvalidation: [
                                          "1ae0bf37-539b-4ed3-b1e0-6c762a2c2586"
                                        ]
                                      };
                                      return (async ({ queryInvalidation }) => {
                                        if (!queryInvalidation) {
                                          return;
                                        }
                                        await plasmicInvalidate(
                                          queryInvalidation
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["refreshData2"] != null &&
                                  typeof $steps["refreshData2"] === "object" &&
                                  typeof $steps["refreshData2"].then ===
                                    "function"
                                ) {
                                  $steps["refreshData2"] = await $steps[
                                    "refreshData2"
                                  ];
                                }

                                $steps["runCode"] =
                                  $queries.getPurchases.data.response.data
                                    .length == 0
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return localStorage.setItem(
                                              "PurchaseId",
                                              $steps.createPurchase.data
                                                .response.data.id
                                            );
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["refreshData"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        queryInvalidation: [
                                          "0cc6a39e-f808-4bf3-9d06-951fa0e68d3a"
                                        ]
                                      };
                                      return (async ({ queryInvalidation }) => {
                                        if (!queryInvalidation) {
                                          return;
                                        }
                                        await plasmicInvalidate(
                                          queryInvalidation
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["refreshData"] != null &&
                                  typeof $steps["refreshData"] === "object" &&
                                  typeof $steps["refreshData"].then ===
                                    "function"
                                ) {
                                  $steps["refreshData"] = await $steps[
                                    "refreshData"
                                  ];
                                }

                                $steps["createCart"] = (() => {
                                  const Cart =
                                    $queries.getCart.data.response.data;
                                  return (
                                    $state.selectors.filter(
                                      item =>
                                        item.TicketQuantity > 0 &&
                                        !Cart.some(
                                          cartItem =>
                                            cartItem.PurchaseTicketId ==
                                            localStorage.getItem("PurchaseId") +
                                              item.TicketId
                                        )
                                    ).length > 0 &&
                                    localStorage.getItem("PurchaseId").length >
                                      0
                                  );
                                })()
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                          opId: "e6ab777b-7ea6-4d84-a021-f086c3cab1b5",
                                          userArgs: {
                                            body: [
                                              (() => {
                                                const cart =
                                                  $queries.getCart.data.response
                                                    .data;
                                                return $state.selectors
                                                  .filter(
                                                    item =>
                                                      item.TicketQuantity > 0 &&
                                                      !cart.some(
                                                        cartItem =>
                                                          cartItem.PurchaseTicketId ==
                                                          localStorage.getItem(
                                                            "PurchaseId"
                                                          ) +
                                                            item.TicketId
                                                      )
                                                  )
                                                  .map(new_cart => ({
                                                    ...new_cart,
                                                    PurchaseId:
                                                      localStorage.getItem(
                                                        "PurchaseId"
                                                      ),
                                                    PurchaseTicketId:
                                                      localStorage.getItem(
                                                        "PurchaseId"
                                                      ) + new_cart.TicketId
                                                  }));
                                              })()
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId:
                                            "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
                                        },
                                        continueOnError: false
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["createCart"] != null &&
                                  typeof $steps["createCart"] === "object" &&
                                  typeof $steps["createCart"].then ===
                                    "function"
                                ) {
                                  $steps["createCart"] = await $steps[
                                    "createCart"
                                  ];
                                }

                                $steps["httpPatch"] =
                                  $state.selectors
                                    .map(ticket => {
                                      const matchedCart =
                                        $queries.getCart.data.response.data.find(
                                          n =>
                                            n.PurchaseTicketId ===
                                            localStorage.getItem("PurchaseId") +
                                              ticket.TicketId
                                        );
                                      return {
                                        ...ticket,
                                        id: matchedCart
                                          ? matchedCart
                                          : undefined
                                      };
                                    })
                                    .filter(ticket => ticket.id).length > 0 &&
                                  localStorage.getItem("PurchaseId").length > 0
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                            opId: "b33287b7-282f-4484-9176-607f6c8e25e5",
                                            userArgs: {
                                              body: [
                                                (() => {
                                                  const updatedTickets =
                                                    $state.selectors
                                                      .map(ticket => {
                                                        const matchedCart =
                                                          $queries.getCart.data.response.data.find(
                                                            n =>
                                                              n.PurchaseTicketId ===
                                                              localStorage.getItem(
                                                                "PurchaseId"
                                                              ) +
                                                                ticket.TicketId
                                                          ).id;
                                                        return {
                                                          ...ticket,
                                                          id: matchedCart
                                                            ? matchedCart
                                                            : undefined
                                                        };
                                                      })
                                                      .filter(
                                                        ticket => ticket.id
                                                      );
                                                  return updatedTickets;
                                                })()
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "plasmic_refresh_all"
                                            ],
                                            roleId:
                                              "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
                                          },
                                          continueOnError: false
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["httpPatch"] != null &&
                                  typeof $steps["httpPatch"] === "object" &&
                                  typeof $steps["httpPatch"].then === "function"
                                ) {
                                  $steps["httpPatch"] = await $steps[
                                    "httpPatch"
                                  ];
                                }
                              }}
                              startIcon={
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__i9Gep
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Agregar"}
                            </Button>
                            <ShoppingBagOpenSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rmwPb
                              )}
                              role={"img"}
                            />
                          </Stack__>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hgve5
                          )}
                        >
                          {"Review your order"}
                        </div>
                      </Drawer>
                    </Stack__>
                  </div>
                </Stack__>
              </Stack__>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </ConditionGuard>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar2",
    "image",
    "title",
    "selectEventDate",
    "description",
    "location",
    "mapComponent",
    "tickets",
    "ticketsQuantity",
    "createPurchase",
    "donationValue2",
    "roundUp",
    "clearCart",
    "contactInfoForm",
    "textInput",
    "textInput2",
    "textInput3",
    "checkoutPage",
    "lottie",
    "footer"
  ],
  navbar2: ["navbar2"],
  image: ["image"],
  title: ["title", "selectEventDate"],
  selectEventDate: ["selectEventDate"],
  description: ["description"],
  location: ["location", "mapComponent"],
  mapComponent: ["mapComponent"],
  tickets: [
    "tickets",
    "ticketsQuantity",
    "createPurchase",
    "donationValue2",
    "roundUp",
    "clearCart",
    "contactInfoForm",
    "textInput",
    "textInput2",
    "textInput3",
    "checkoutPage",
    "lottie"
  ],
  ticketsQuantity: ["ticketsQuantity"],
  createPurchase: [
    "createPurchase",
    "donationValue2",
    "roundUp",
    "clearCart",
    "contactInfoForm",
    "textInput",
    "textInput2",
    "textInput3",
    "checkoutPage",
    "lottie"
  ],
  donationValue2: ["donationValue2"],
  roundUp: ["roundUp"],
  clearCart: ["clearCart"],
  contactInfoForm: ["contactInfoForm", "textInput", "textInput2", "textInput3"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  checkoutPage: ["checkoutPage"],
  lottie: ["lottie"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar2: typeof Navbar2;
  image: "div";
  title: "div";
  selectEventDate: typeof AntdRadioGroup;
  description: "div";
  location: "div";
  mapComponent: typeof MapComponent;
  tickets: "div";
  ticketsQuantity: typeof AntdSelect;
  createPurchase: typeof Drawer;
  donationValue2: typeof AntdInputNumber;
  roundUp: typeof AntdSwitch;
  clearCart: typeof Button;
  contactInfoForm: typeof FormWrapper;
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  checkoutPage: typeof CheckoutPage;
  lottie: typeof LottieWrapper;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEvent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEvent__VariantsArgs;
    args?: PlasmicEvent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEvent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEvent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEvent__ArgProps,
          internalVariantPropNames: PlasmicEvent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEvent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEvent";
  } else {
    func.displayName = `PlasmicEvent.${nodeName}`;
  }
  return func;
}

export const PlasmicEvent = Object.assign(
  // Top-level PlasmicEvent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar2: makeNodeComponent("navbar2"),
    image: makeNodeComponent("image"),
    title: makeNodeComponent("title"),
    selectEventDate: makeNodeComponent("selectEventDate"),
    description: makeNodeComponent("description"),
    location: makeNodeComponent("location"),
    mapComponent: makeNodeComponent("mapComponent"),
    tickets: makeNodeComponent("tickets"),
    ticketsQuantity: makeNodeComponent("ticketsQuantity"),
    createPurchase: makeNodeComponent("createPurchase"),
    donationValue2: makeNodeComponent("donationValue2"),
    roundUp: makeNodeComponent("roundUp"),
    clearCart: makeNodeComponent("clearCart"),
    contactInfoForm: makeNodeComponent("contactInfoForm"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    checkoutPage: makeNodeComponent("checkoutPage"),
    lottie: makeNodeComponent("lottie"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicEvent
    internalVariantProps: PlasmicEvent__VariantProps,
    internalArgProps: PlasmicEvent__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEvent;
/* prettier-ignore-end */
