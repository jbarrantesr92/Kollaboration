// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: MtmcKR1GuwbKEBJfYkVdj
// Component: XvN-JGL7hHok

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar2 from "../../Navbar2"; // plasmic-import: PlAJ5tJMUQMz/component
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import Options from "../../Options"; // plasmic-import: eW-v92peeoVq/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: KfDAmu4lid5o/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Select from "../../Select"; // plasmic-import: iiMExIyx9xlD/component
import AddressAutocomplete from "../../AddressAutocomplete"; // plasmic-import: -iO7aBgdbUWd/component
import Button from "../../Button"; // plasmic-import: 7c1YDuGGoKuq/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { FormListWrapper } from "@plasmicpkgs/antd5/skinny/FormList";
import Footer from "../../Footer"; // plasmic-import: THeG5BcdbXeZ/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { LocaleValue, useLocale } from "./PlasmicGlobalVariant__Locale"; // plasmic-import: IjXfRSRLVt5J/globalVariant
import { useScreenVariants as useScreenVariantswiZsHgbT5CnT } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wiZSHgbT5cnT/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: MtmcKR1GuwbKEBJfYkVdj/projectcss
import sty from "./PlasmicEditEvent.module.css"; // plasmic-import: XvN-JGL7hHok/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: mFdXj3H03u7X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: V9lHh1c0c7g6/icon
import CalendarDotsDuotone1SvgIcon from "./icons/PlasmicIcon__CalendarDotsDuotone1Svg"; // plasmic-import: SG0SFfjUmVKv/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _VJXnu9sySb9/icon
import TrashSvgIcon from "./icons/PlasmicIcon__TrashSvg"; // plasmic-import: dKZ8ZQGn2s_e/icon
import PlusSvgIcon from "./icons/PlasmicIcon__PlusSvg"; // plasmic-import: 8gLchf1ApTDC/icon
import TicketSvgIcon from "./icons/PlasmicIcon__TicketSvg"; // plasmic-import: OxvLqJub0eBw/icon

import {
  parseISO as __lib_dateFns__parseISO,
  isValid as __lib_dateFns__isValid,
  format as __lib_dateFns__format
} from "date-fns";

createPlasmicElementProxy;

export type PlasmicEditEvent__VariantMembers = {
  eventStep: "step1" | "step2" | "step3";
};
export type PlasmicEditEvent__VariantsArgs = {
  eventStep?: SingleChoiceArg<"step1" | "step2" | "step3">;
};
type VariantPropType = keyof PlasmicEditEvent__VariantsArgs;
export const PlasmicEditEvent__VariantProps = new Array<VariantPropType>(
  "eventStep"
);

export type PlasmicEditEvent__ArgsType = {};
type ArgPropType = keyof PlasmicEditEvent__ArgsType;
export const PlasmicEditEvent__ArgProps = new Array<ArgPropType>();

export type PlasmicEditEvent__OverridesType = {
  root?: Flex__<"div">;
  navbar2?: Flex__<typeof Navbar2>;
  conditionGuard?: Flex__<typeof ConditionGuard>;
  options?: Flex__<typeof Options>;
  newEvent?: Flex__<"div">;
  eventName?: Flex__<typeof FormWrapper>;
  textInput?: Flex__<typeof TextInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  select?: Flex__<typeof Select>;
  addressAutocomplete?: Flex__<typeof AddressAutocomplete>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  selectStartDate?: Flex__<typeof AntdDatePicker>;
  selectStartTime?: Flex__<typeof TextInput>;
  selectEndDate?: Flex__<typeof AntdDatePicker>;
  selectEndTime?: Flex__<typeof TextInput>;
  datesFormListNew?: Flex__<typeof FormListWrapper>;
  dateTimePicker3?: Flex__<typeof AntdDatePicker>;
  textInput9?: Flex__<typeof TextInput>;
  dateTimePicker4?: Flex__<typeof AntdDatePicker>;
  textInput10?: Flex__<typeof TextInput>;
  eventCalendar?: Flex__<typeof FormWrapper>;
  editTickets?: Flex__<typeof FormWrapper>;
  selectTicketType?: Flex__<typeof Select>;
  inputTicketName?: Flex__<"div">;
  inputTicketName2?: Flex__<typeof TextInput>;
  inputTicketQuantity?: Flex__<typeof TextInput>;
  inputTicketPrice?: Flex__<typeof TextInput>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultEditEventProps {}

const $$ = {
  dateFns: {
    parseISO: __lib_dateFns__parseISO,
    isValid: __lib_dateFns__isValid,
    format: __lib_dateFns__format
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditEvent__RenderFunc(props: {
  variants: PlasmicEditEvent__VariantsArgs;
  args: PlasmicEditEvent__ArgsType;
  overrides: PlasmicEditEvent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "eventName.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "eventName",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "eventName.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "eventName",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "eventCalendar.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "eventCalendar",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "eventCalendar.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "eventCalendar",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "paid",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "free",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "donation",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "eventStep",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.eventStep
      },
      {
        path: "selectStartDate[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "selectEndDate[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "selectStartTime[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "selectEndTime[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "selectedRow",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select.dateId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dateTimePicker3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dateTimePicker4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editCurrentDates",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                function formatDate(dateString) {
                  const [year, month, day] = dateString.split("-");
                  return `${month}/${day}/${year}`;
                }
                let eventDataArray = $queries.eventDates.data.response.data.map(
                  dates => ({
                    id: dates.id,
                    StartDate: formatDate(dates.StartDate),
                    EndDate: formatDate(dates.EndDate),
                    StartTime: dates.StartTime,
                    EndTime: dates.EndTime
                  })
                );
                return eventDataArray;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "editCurrentTickets",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.eventTickets.data.response.data.filter(
                date =>
                  date.EventDateId ==
                  $queries.eventDates.data.response.data[0].id
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "selectTicketType[][].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "selectTicketType[][].dateId",
        type: "private",
        variableType: "text"
      },
      {
        path: "inputTicketName2[][].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "inputTicketQuantity[][].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "inputTicketPrice[][].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "editTickets.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "editTickets",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "editTickets.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "editTickets",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select.ticketId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectTicketType[][].ticketId",
        type: "private",
        variableType: "text"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    currentDomainId: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "638831b7-dc51-442e-85c9-814f5f126f46",
        userArgs: {
          path: [window.location.hostname]
        },
        cacheKey: `plasmic.$.638831b7-dc51-442e-85c9-814f5f126f46.$.`,
        invalidatedKeys: null,
        roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
      };
    }),
    eventData: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "11fa52f7-caeb-4d22-b3ca-d10f617493bc",
        userArgs: {
          path: [$ctx.params["event-id"]]
        },
        cacheKey: `plasmic.$.11fa52f7-caeb-4d22-b3ca-d10f617493bc.$.`,
        invalidatedKeys: null,
        roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
      };
    }),
    eventDates: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "e075f2d2-e11d-4f37-8613-993603c3da86",
        userArgs: {
          path: [$queries.eventData.data.response.data.id]
        },
        cacheKey: `plasmic.$.e075f2d2-e11d-4f37-8613-993603c3da86.$.`,
        invalidatedKeys: null,
        roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
      };
    }),
    eventTickets: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "9fe03a9f-28d6-4181-bb32-30d6d6adf115",
        userArgs: {
          path: [$queries.eventData.data.response.data.id]
        },
        cacheKey: `plasmic.$.9fe03a9f-28d6-4181-bb32-30d6d6adf115.$.`,
        invalidatedKeys: null,
        roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    locale: useLocale(),
    screen: useScreenVariantswiZsHgbT5CnT()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicEditEvent.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicEditEvent.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicEditEvent.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rooteventStep_step1]: hasVariant(
                $state,
                "eventStep",
                "step1"
              ),
              [sty.rooteventStep_step2]: hasVariant(
                $state,
                "eventStep",
                "step2"
              ),
              [sty.rooteventStep_step3]: hasVariant(
                $state,
                "eventStep",
                "step3"
              ),
              [sty.rootglobal_locale_es]: hasVariant(
                globalVariants,
                "locale",
                "es"
              )
            }
          )}
        >
          <Navbar2
            data-plasmic-name={"navbar2"}
            data-plasmic-override={overrides.navbar2}
            className={classNames("__wab_instance", sty.navbar2, {
              [sty.navbar2eventStep_step2]: hasVariant(
                $state,
                "eventStep",
                "step2"
              ),
              [sty.navbar2eventStep_step3]: hasVariant(
                $state,
                "eventStep",
                "step3"
              )
            })}
          />

          <ConditionGuard
            data-plasmic-name={"conditionGuard"}
            data-plasmic-override={overrides.conditionGuard}
            className={classNames("__wab_instance", sty.conditionGuard)}
            condition={(() => {
              try {
                return (
                  currentUser.customProperties.role ==
                    "07b345f2-a68e-4456-ae77-6fced8ee7cb7" ||
                  currentUser.customProperties.role ==
                    "1ceacb7a-f026-46ef-9daa-13f8c86f89a3"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            onNotSatisfied={async () => {
              const $steps = {};
            }}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iW8N8, {
                [sty.freeBoxeventStep_step1__iW8N8Te1ZK]: hasVariant(
                  $state,
                  "eventStep",
                  "step1"
                ),
                [sty.freeBoxeventStep_step2__iW8N8OVvWp]: hasVariant(
                  $state,
                  "eventStep",
                  "step2"
                ),
                [sty.freeBoxeventStep_step3__iW8N8BbMwL]: hasVariant(
                  $state,
                  "eventStep",
                  "step3"
                )
              })}
            >
              <Options
                data-plasmic-name={"options"}
                data-plasmic-override={overrides.options}
                className={classNames("__wab_instance", sty.options, {
                  [sty.optionseventStep_step2]: hasVariant(
                    $state,
                    "eventStep",
                    "step2"
                  )
                })}
              />

              <div
                data-plasmic-name={"newEvent"}
                data-plasmic-override={overrides.newEvent}
                className={classNames(projectcss.all, sty.newEvent, {
                  [sty.newEventeventStep_step1]: hasVariant(
                    $state,
                    "eventStep",
                    "step1"
                  ),
                  [sty.newEventeventStep_step2]: hasVariant(
                    $state,
                    "eventStep",
                    "step2"
                  ),
                  [sty.newEventeventStep_step3]: hasVariant(
                    $state,
                    "eventStep",
                    "step3"
                  )
                })}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.eventName, {
                      [sty.eventNameeventStep_step1]: hasVariant(
                        $state,
                        "eventStep",
                        "step1"
                      ),
                      [sty.eventNameeventStep_step2]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.eventNameeventStep_step3]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      ),
                      [sty.eventNameglobal_locale_es]: hasVariant(
                        globalVariants,
                        "locale",
                        "es"
                      )
                    }),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["eventName", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["updateEventDate"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                opId: "acde44a6-6de5-4d80-86f6-50818a8a5274",
                                userArgs: {
                                  path: [$ctx.params["event-id"]],
                                  body: [
                                    (() => {
                                      const storedLocation =
                                        sessionStorage.getItem(
                                          "selectedLocation"
                                        );
                                      const {
                                        formattedAddress = "",
                                        latitude = "",
                                        longitude = ""
                                      } = JSON.parse(storedLocation) || {};
                                      return {
                                        ...$state.eventName.value,
                                        FormattedAddress: formattedAddress,
                                        lat: latitude,
                                        lng: longitude
                                      };
                                    })()
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "11fa52f7-caeb-4d22-b3ca-d10f617493bc"
                                ],
                                roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEventDate"] != null &&
                        typeof $steps["updateEventDate"] === "object" &&
                        typeof $steps["updateEventDate"].then === "function"
                      ) {
                        $steps["updateEventDate"] = await $steps[
                          "updateEventDate"
                        ];
                      }
                    },
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["eventName", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["eventName"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "eventName.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "eventName.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"eventName"}
                      data-plasmic-override={overrides.eventName}
                      {...child$Props}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yzbTz,
                          {
                            [sty.freeBoxeventStep_step1__yzbTzte1ZK]:
                              hasVariant($state, "eventStep", "step1"),
                            [sty.freeBoxeventStep_step2__yzbTzoVvWp]:
                              hasVariant($state, "eventStep", "step2"),
                            [sty.freeBoxeventStep_step3__yzbTZbbMwL]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2LYn,
                            {
                              [sty.freeBoxeventStep_step3___2LYNbbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__o125K,
                              {
                                [sty.texteventStep_step3__o125KbbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            {hasVariant($state, "eventStep", "step3") ? (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"General info"}
                                </span>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"General info"}
                                </span>
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9MvyM,
                            {
                              [sty.freeBoxeventStep_step2___9MvyMoVvWp]:
                                hasVariant($state, "eventStep", "step2"),
                              [sty.freeBoxeventStep_step3___9MvyMbbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateEventStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["eventStep"]
                                    },
                                    operation: 0,
                                    value: "step2"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateEventStep"] != null &&
                              typeof $steps["updateEventStep"] === "object" &&
                              typeof $steps["updateEventStep"].then ===
                                "function"
                            ) {
                              $steps["updateEventStep"] = await $steps[
                                "updateEventStep"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tkJoe,
                              {
                                [sty.texteventStep_step3__tkJoEbbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            {hasVariant($state, "eventStep", "step3") ? (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Event Dates"}
                                </span>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Event dates"}
                                </span>
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qoIze,
                            {
                              [sty.freeBoxeventStep_step1__qoIzeTe1ZK]:
                                hasVariant($state, "eventStep", "step1"),
                              [sty.freeBoxeventStep_step3__qoIzebbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateEventStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["eventStep"]
                                    },
                                    operation: 0,
                                    value: "step3"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateEventStep"] != null &&
                              typeof $steps["updateEventStep"] === "object" &&
                              typeof $steps["updateEventStep"].then ===
                                "function"
                            ) {
                              $steps["updateEventStep"] = await $steps[
                                "updateEventStep"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6Et6P,
                              {
                                [sty.texteventStep_step1___6Et6Pte1ZK]:
                                  hasVariant($state, "eventStep", "step1"),
                                [sty.texteventStep_step3___6Et6PbbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            {hasVariant($state, "eventStep", "step3") ? (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Edit tickets"}
                                </span>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Event tickets"}
                                </span>
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jcGMh,
                          {
                            [sty.texteventStep_step1__jcGMhTe1ZK]: hasVariant(
                              $state,
                              "eventStep",
                              "step1"
                            )
                          }
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Tell the world about your event"}
                          </span>
                        </React.Fragment>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__kLt3H,
                          {
                            [sty.formFieldeventStep_step1__kLt3HTe1ZK]:
                              hasVariant($state, "eventStep", "step1")
                          }
                        )}
                        initialValue={(() => {
                          try {
                            return $queries.eventData.data.response.data
                              .EventName;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"What is your event name?"}
                        name={
                          hasVariant($state, "eventStep", "step1")
                            ? "EventName"
                            : "EventName"
                        }
                      >
                        <TextInput
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={overrides.textInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput
                          )}
                          endIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mEg0,
                                {
                                  [sty.svgeventStep_step2__mEg0OVvWp]:
                                    hasVariant($state, "eventStep", "step2")
                                }
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "textInput",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          value={
                            generateStateValueProp($state, [
                              "textInput",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__mwty0,
                          {
                            [sty.formFieldeventStep_step1__mwty0Te1ZK]:
                              hasVariant($state, "eventStep", "step1"),
                            [sty.formFieldeventStep_step3__mwty0BbMwL]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                        initialValue={
                          $queries.eventData.data.response.data.EventDescription
                        }
                        label={"Describe your event"}
                        name={
                          hasVariant($state, "eventStep", "step1")
                            ? "EventDescription"
                            : "EventDescription"
                        }
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.textArea,
                              {
                                [sty.textAreaeventStep_step1]: hasVariant(
                                  $state,
                                  "eventStep",
                                  "step1"
                                )
                              }
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea", "value"],
                                AntdTextArea_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "textArea",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea.value"
                              }
                            ],
                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea"}
                              data-plasmic-override={overrides.textArea}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__w0GHu,
                          {
                            [sty.formFieldeventStep_step1__w0GHute1ZK]:
                              hasVariant($state, "eventStep", "step1"),
                            [sty.formFieldeventStep_step2__w0GHuoVvWp]:
                              hasVariant($state, "eventStep", "step2"),
                            [sty.formFieldeventStep_step3__w0GHUbbMwL]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                        initialValue={(() => {
                          try {
                            return $queries.eventData.data.response.data
                              .EventCategory;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Select a category for your event"}
                        name={
                          hasVariant($state, "eventStep", "step1")
                            ? "EventCategory"
                            : "EventCategory"
                        }
                      >
                        <Select
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          className={classNames("__wab_instance", sty.select)}
                          dateId={generateStateValueProp($state, [
                            "select",
                            "dateId"
                          ])}
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ])(eventArgs[0]);
                          }}
                          onDateIdChange2={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "dateId"
                            ])(eventArgs[0]);
                          }}
                          onTicketIdChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "ticketId"
                            ])(eventArgs[0]);
                          }}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null },
                              { value: null, label: null },
                              { value: null, label: null }
                            ];
                            __composite["0"]["value"] = "music";
                            __composite["0"]["label"] = "Music";
                            __composite["1"]["value"] = "sports";
                            __composite["1"]["label"] = "Sports";
                            __composite["2"]["value"] = "film";
                            __composite["2"]["label"] = "Film";
                            return __composite;
                          })()}
                          ticketId={generateStateValueProp($state, [
                            "select",
                            "ticketId"
                          ])}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7AIql
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ziblP
                          )}
                        >
                          {"Address"}
                        </div>
                        <AddressAutocomplete
                          data-plasmic-name={"addressAutocomplete"}
                          data-plasmic-override={overrides.addressAutocomplete}
                          className={classNames(
                            "__wab_instance",
                            sty.addressAutocomplete
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.eventData.data.response.data
                                .FormattedAddress;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__u0Ar,
                          {
                            [sty.formFieldeventStep_step3__u0ArbbMwL]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                        initialValue={(() => {
                          try {
                            return $queries.eventData.data.response.data
                              .EventAddress;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Address details"}
                        name={"EventAddress"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput2"}
                          data-plasmic-override={overrides.textInput2}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput2
                          )}
                          endIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__moRlg
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "textInput2",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"Address details if needed"}
                          value={
                            generateStateValueProp($state, [
                              "textInput2",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__qRHzl,
                          {
                            [sty.formFieldeventStep_step2__qRHzlOVvWp]:
                              hasVariant($state, "eventStep", "step2")
                          }
                        )}
                        initialValue={(() => {
                          try {
                            return $queries.eventData.data.response.data
                              .EventLocation;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Venue name"}
                        name={"EventLocation"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput3"}
                          data-plasmic-override={overrides.textInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput3
                          )}
                          endIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wWrg6
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "textInput3",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          value={
                            generateStateValueProp($state, [
                              "textInput3",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__y0Lij,
                          {
                            [sty.freeBoxeventStep_step1__y0LijTe1ZK]:
                              hasVariant($state, "eventStep", "step1"),
                            [sty.freeBoxeventStep_step2__y0LijOVvWp]:
                              hasVariant($state, "eventStep", "step2"),
                            [sty.freeBoxeventStep_step3__y0LijbbMwL]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___2VEz1,
                            {
                              [sty.buttoneventStep_step1___2VEz1Te1ZK]:
                                hasVariant($state, "eventStep", "step1"),
                              [sty.buttoneventStep_step2___2VEz1OVvWp]:
                                hasVariant($state, "eventStep", "step2")
                            }
                          )}
                          color={"blue"}
                          startIcon={
                            <CalendarDotsDuotone1SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gwxUa,
                                {
                                  [sty.svgeventStep_step1__gwxUate1ZK]:
                                    hasVariant($state, "eventStep", "step1")
                                }
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          {hasVariant($state, "eventStep", "step1")
                            ? "Save"
                            : "Save"}
                        </Button>
                      </div>
                      {(
                        hasVariant($state, "eventStep", "step3")
                          ? true
                          : hasVariant($state, "eventStep", "step1")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__y4P9K,
                            {
                              [sty.freeBoxeventStep_step1__y4P9Kte1ZK]:
                                hasVariant($state, "eventStep", "step1"),
                              [sty.freeBoxeventStep_step2__y4P9KoVvWp]:
                                hasVariant($state, "eventStep", "step2"),
                              [sty.freeBoxeventStep_step3__y4P9KbbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yKpx6,
                              {
                                [sty.freeBoxeventStep_step3__yKpx6BbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rf1NR,
                                {
                                  [sty.texteventStep_step3__rf1NRbbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                            >
                              {hasVariant($state, "eventStep", "step3") ? (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"General info"}
                                  </span>
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Create your ticket types"}
                                  </span>
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xfQdo,
                              {
                                [sty.freeBoxeventStep_step2__xfQdoOVvWp]:
                                  hasVariant($state, "eventStep", "step2"),
                                [sty.freeBoxeventStep_step3__xfQdobbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wqi5F,
                                {
                                  [sty.texteventStep_step3__wqi5FbbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                            >
                              {hasVariant($state, "eventStep", "step3") ? (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Event Dates"}
                                  </span>
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Create your ticket types"}
                                  </span>
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pnLRs,
                              {
                                [sty.freeBoxeventStep_step3__pnLRsbbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__o66I4,
                                {
                                  [sty.texteventStep_step3__o66I4BbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                            >
                              {hasVariant($state, "eventStep", "step3") ? (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Edit tickets"}
                                  </span>
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Create your ticket types"}
                                  </span>
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "eventStep", "step3")
                          ? true
                          : hasVariant($state, "eventStep", "step1")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__khD4X,
                            {
                              [sty.freeBoxeventStep_step1__khD4Xte1ZK]:
                                hasVariant($state, "eventStep", "step1"),
                              [sty.freeBoxeventStep_step2__khD4XoVvWp]:
                                hasVariant($state, "eventStep", "step2"),
                              [sty.freeBoxeventStep_step3__khD4XbbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___4FTyD,
                              {
                                [sty.freeBoxeventStep_step3___4FTyDbbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ho81T,
                                {
                                  [sty.texteventStep_step3__ho81TbbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                            >
                              {hasVariant($state, "eventStep", "step3") ? (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"General info"}
                                  </span>
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Create your ticket types"}
                                  </span>
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uwW,
                              {
                                [sty.freeBoxeventStep_step2__uwWoVvWp]:
                                  hasVariant($state, "eventStep", "step2"),
                                [sty.freeBoxeventStep_step3__uwWbbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pgu5,
                                {
                                  [sty.texteventStep_step3__pgu5BbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                            >
                              {hasVariant($state, "eventStep", "step3") ? (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Event Dates"}
                                  </span>
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Create your ticket types"}
                                  </span>
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___05R1F,
                              {
                                [sty.freeBoxeventStep_step3___05R1FbbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3JwXm,
                                {
                                  [sty.texteventStep_step3___3JwXmbbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                            >
                              {hasVariant($state, "eventStep", "step3") ? (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Edit tickets"}
                                  </span>
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Create your ticket types"}
                                  </span>
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                        </div>
                      ) : null}
                    </FormWrapper>
                  );
                })()}
                <div
                  className={classNames(projectcss.all, sty.freeBox__xtByl, {
                    [sty.freeBoxeventStep_step1__xtBylte1ZK]: hasVariant(
                      $state,
                      "eventStep",
                      "step1"
                    ),
                    [sty.freeBoxeventStep_step2__xtByloVvWp]: hasVariant(
                      $state,
                      "eventStep",
                      "step2"
                    ),
                    [sty.freeBoxeventStep_step3__xtByLbbMwL]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mxHMb, {
                      [sty.freeBoxeventStep_step3__mxHMbbbMwL]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9AvgL,
                        {
                          [sty.texteventStep_step3___9AvgLbbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "eventStep", "step3") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"General info"}
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Create your ticket types"}
                          </span>
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tRpvA, {
                      [sty.freeBoxeventStep_step2__tRpvAoVvWp]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.freeBoxeventStep_step3__tRpvAbbMwL]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vtZv3,
                        {
                          [sty.texteventStep_step3__vtZv3BbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "eventStep", "step3") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Event Dates"}
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Create your ticket types"}
                          </span>
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oYty, {
                      [sty.freeBoxeventStep_step3__oYtyBbMwL]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jGsma,
                        {
                          [sty.texteventStep_step3__jGsmabbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "eventStep", "step3") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Edit tickets"}
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Create your ticket types"}
                          </span>
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__yp5Hp, {
                    [sty.freeBoxeventStep_step2__yp5HpOVvWp]: hasVariant(
                      $state,
                      "eventStep",
                      "step2"
                    ),
                    [sty.freeBoxeventStep_step3__yp5HpbbMwL]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  })}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xu1Bh, {
                      [sty.freeBoxeventStep_step1__xu1BhTe1ZK]: hasVariant(
                        $state,
                        "eventStep",
                        "step1"
                      ),
                      [sty.freeBoxeventStep_step2__xu1BhOVvWp]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.freeBoxeventStep_step3__xu1BhbbMwL]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__dUdWh,
                        {
                          [sty.freeBoxeventStep_step3__dUdWhbbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateEventStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["eventStep"]
                                },
                                operation: 0,
                                value: "step1"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEventStep"] != null &&
                          typeof $steps["updateEventStep"] === "object" &&
                          typeof $steps["updateEventStep"].then === "function"
                        ) {
                          $steps["updateEventStep"] = await $steps[
                            "updateEventStep"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fvj50,
                          {
                            [sty.texteventStep_step3__fvj50BbMwL]: hasVariant(
                              $state,
                              "eventStep",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "eventStep", "step3") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"General info"}
                            </span>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"General info"}
                            </span>
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__g3SLp,
                        {
                          [sty.freeBoxeventStep_step2__g3SLpOVvWp]: hasVariant(
                            $state,
                            "eventStep",
                            "step2"
                          ),
                          [sty.freeBoxeventStep_step3__g3SLpbbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vmfCi,
                          {
                            [sty.texteventStep_step3__vmfCIbbMwL]: hasVariant(
                              $state,
                              "eventStep",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "eventStep", "step3") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Event Dates"}
                            </span>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Event dates"}
                            </span>
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__yHh7F,
                        {
                          [sty.freeBoxeventStep_step1__yHh7FTe1ZK]: hasVariant(
                            $state,
                            "eventStep",
                            "step1"
                          ),
                          [sty.freeBoxeventStep_step3__yHh7FbbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateEventStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["eventStep"]
                                },
                                operation: 0,
                                value: "step3"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEventStep"] != null &&
                          typeof $steps["updateEventStep"] === "object" &&
                          typeof $steps["updateEventStep"].then === "function"
                        ) {
                          $steps["updateEventStep"] = await $steps[
                            "updateEventStep"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k1MB,
                          {
                            [sty.texteventStep_step1__k1MBte1ZK]: hasVariant(
                              $state,
                              "eventStep",
                              "step1"
                            ),
                            [sty.texteventStep_step3__k1MBbbMwL]: hasVariant(
                              $state,
                              "eventStep",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "eventStep", "step3") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Edit tickets"}
                            </span>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Event tickets"}
                            </span>
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jpO0I, {
                      [sty.freeBoxeventStep_step3__jpO0IbbMwL]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wpJP
                      )}
                    >
                      {"Current Dates"}
                    </div>
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.editCurrentDates;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aqCaJ,
                          {
                            [sty.freeBoxeventStep_step2__aqCaJoVvWp]:
                              hasVariant($state, "eventStep", "step2"),
                            [sty.freeBoxeventStep_step3__aqCaJbbMwL]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                        key={currentIndex}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.selectStartDate,
                              {
                                [sty.selectStartDateeventStep_step2]:
                                  hasVariant($state, "eventStep", "step2")
                              }
                            ),
                            defaultValue: (() => {
                              try {
                                return currentItem.StartDate;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["selectStartDate", __plasmic_idx_0, "value"],
                                AntdDatePicker_Helpers
                              ).apply(null, eventArgs);
                              (async value => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const idToReplace = currentItem.id;
                                            const itemFromB =
                                              $state.selectStartDate[
                                                currentIndex
                                              ].value;
                                            const A = $state.editCurrentDates;
                                            const indexInA = A.findIndex(
                                              item => item.id === idToReplace
                                            );
                                            return (A[indexInA].StartDate =
                                              itemFromB);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            },
                            picker: "date",
                            popupScopeClassName:
                              sty["selectStartDate__datePickerPopup"],
                            showTime: false,
                            value: generateStateValueProp($state, [
                              "selectStartDate",
                              __plasmic_idx_0,
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "selectStartDate[].value"
                              }
                            ],
                            [__plasmic_idx_0],
                            AntdDatePicker_Helpers ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "selectStartDate[].value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.StartDate;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdDatePicker
                              data-plasmic-name={"selectStartDate"}
                              data-plasmic-override={overrides.selectStartDate}
                              {...child$Props}
                            />
                          );
                        })()}
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.selectStartTime,
                              {
                                [sty.selectStartTimeeventStep_step2]:
                                  hasVariant($state, "eventStep", "step2"),
                                [sty.selectStartTimeeventStep_step3]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            ),
                            endIcon: (
                              <CheckSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__isofo
                                )}
                                role={"img"}
                              />
                            ),

                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "selectStartTime",
                                  __plasmic_idx_0,
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);
                              (async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const idToReplace = currentItem.id;
                                            const itemFromB =
                                              $state.selectStartTime[
                                                currentIndex
                                              ].value;
                                            const A = $state.editCurrentDates;
                                            const indexInA = A.findIndex(
                                              item => item.id === idToReplace
                                            );
                                            return (A[indexInA].StartTime =
                                              itemFromB);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            },
                            type: "time",
                            value:
                              generateStateValueProp($state, [
                                "selectStartTime",
                                __plasmic_idx_0,
                                "value"
                              ]) ?? ""
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "selectStartTime[].value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.StartTime;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <TextInput
                              data-plasmic-name={"selectStartTime"}
                              data-plasmic-override={overrides.selectStartTime}
                              {...child$Props}
                            />
                          );
                        })()}
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.selectEndDate,
                              {
                                [sty.selectEndDateeventStep_step2]: hasVariant(
                                  $state,
                                  "eventStep",
                                  "step2"
                                )
                              }
                            ),
                            defaultValue: (() => {
                              try {
                                return currentItem.EndDate;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["selectEndDate", __plasmic_idx_0, "value"],
                                AntdDatePicker_Helpers
                              ).apply(null, eventArgs);
                              (async value => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const idToReplace = currentItem.id;
                                            const itemFromB =
                                              $state.selectEndDate[currentIndex]
                                                .value;
                                            const A = $state.editCurrentDates;
                                            const indexInA = A.findIndex(
                                              item => item.id === idToReplace
                                            );
                                            return (A[indexInA].EndDate =
                                              itemFromB);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            },
                            picker: "date",
                            popupScopeClassName:
                              sty["selectEndDate__datePickerPopup"],
                            showTime: false,
                            value: generateStateValueProp($state, [
                              "selectEndDate",
                              __plasmic_idx_0,
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "selectEndDate[].value"
                              }
                            ],
                            [__plasmic_idx_0],
                            AntdDatePicker_Helpers ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "selectEndDate[].value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.EndDate;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdDatePicker
                              data-plasmic-name={"selectEndDate"}
                              data-plasmic-override={overrides.selectEndDate}
                              {...child$Props}
                            />
                          );
                        })()}
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.selectEndTime,
                              {
                                [sty.selectEndTimeeventStep_step2]: hasVariant(
                                  $state,
                                  "eventStep",
                                  "step2"
                                )
                              }
                            ),
                            endIcon: (
                              <CheckSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__z3CFw
                                )}
                                role={"img"}
                              />
                            ),

                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "selectEndTime",
                                  __plasmic_idx_0,
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);
                              (async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const idToReplace = currentItem.id;
                                            const itemFromB =
                                              $state.selectEndTime[currentIndex]
                                                .value;
                                            const A = $state.editCurrentDates;
                                            const indexInA = A.findIndex(
                                              item => item.id === idToReplace
                                            );
                                            return (A[indexInA].EndTime =
                                              itemFromB);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            },
                            type: "time",
                            value:
                              generateStateValueProp($state, [
                                "selectEndTime",
                                __plasmic_idx_0,
                                "value"
                              ]) ?? ""
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "selectEndTime[].value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.EndTime;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <TextInput
                              data-plasmic-name={"selectEndTime"}
                              data-plasmic-override={overrides.selectEndTime}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__n6YNf,
                            {
                              [sty.freeBoxeventStep_step2__n6YNfOVvWp]:
                                hasVariant($state, "eventStep", "step2"),
                              [sty.freeBoxeventStep_step3__n6YNfbbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runActionOnDatesFormList"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                      opId: "e79d2b20-a0df-4498-b83c-2a2a34ec264e",
                                      userArgs: {
                                        path: [currentItem.id],
                                        headers: [$ctx.params["event-id"]]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnDatesFormList"] != null &&
                              typeof $steps["runActionOnDatesFormList"] ===
                                "object" &&
                              typeof $steps["runActionOnDatesFormList"].then ===
                                "function"
                            ) {
                              $steps["runActionOnDatesFormList"] = await $steps[
                                "runActionOnDatesFormList"
                              ];
                            }
                          }}
                        >
                          <TrashSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ikNs7
                            )}
                            role={"img"}
                          />
                        </div>
                      </Stack__>
                    );
                  })}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__phtIh)}
                  >
                    <FormListWrapper
                      data-plasmic-name={"datesFormListNew"}
                      data-plasmic-override={overrides.datesFormListNew}
                      className={classNames(
                        "__wab_instance",
                        sty.datesFormListNew,
                        {
                          [sty.datesFormListNeweventStep_step2]: hasVariant(
                            $state,
                            "eventStep",
                            "step2"
                          )
                        }
                      )}
                      initialValue={[]}
                      name={"Dates Form List"}
                      ref={ref => {
                        $refs["datesFormListNew"] = ref;
                      }}
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5FRc,
                              {
                                [sty.freeBoxeventStep_step3___5FRCbbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__dijTw,
                                {
                                  [sty.formFieldeventStep_step3__dijTwbbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                              initialValue={(() => {
                                function getTodayDate() {
                                  const today = new Date();
                                  const month = String(
                                    today.getMonth() + 1
                                  ).padStart(2, "0");
                                  const day = String(today.getDate()).padStart(
                                    2,
                                    "0"
                                  );
                                  const year = today.getFullYear();
                                  return `${month}/${day}/${year}`;
                                }
                                return getTodayDate();
                              })()}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hhf
                                  )}
                                >
                                  {"Start Date"}
                                </div>
                              }
                              name={"StartDate"}
                              noLabel={true}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dateTimePicker3,
                                    {
                                      [sty.dateTimePicker3eventStep_step2]:
                                        hasVariant($state, "eventStep", "step2")
                                    }
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["dateTimePicker3", "value"],
                                      AntdDatePicker_Helpers
                                    ),
                                  picker: "date",
                                  popupClassName: classNames({
                                    [sty["pcls_VW730b_pEPx0"]]: true
                                  }),
                                  popupScopeClassName:
                                    sty["dateTimePicker3__datePickerPopup"],
                                  showTime: false,
                                  value: generateStateValueProp($state, [
                                    "dateTimePicker3",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "dateTimePicker3.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"dateTimePicker3"}
                                    data-plasmic-override={
                                      overrides.dateTimePicker3
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__kYgQ2,
                                {
                                  [sty.formFieldeventStep_step2__kYgQ2OVvWp]:
                                    hasVariant($state, "eventStep", "step2"),
                                  [sty.formFieldeventStep_step3__kYgQ2BbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                              initialValue={"00:00:00"}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8HyRd
                                  )}
                                >
                                  {"Start Time"}
                                </div>
                              }
                              name={"StartTime"}
                              noLabel={true}
                            >
                              <TextInput
                                data-plasmic-name={"textInput9"}
                                data-plasmic-override={overrides.textInput9}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput9,
                                  {
                                    [sty.textInput9eventStep_step2]: hasVariant(
                                      $state,
                                      "eventStep",
                                      "step2"
                                    )
                                  }
                                )}
                                endIcon={
                                  <CheckSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___9Vt0U
                                    )}
                                    role={"img"}
                                  />
                                }
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput9",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                type={"time"}
                                value={
                                  generateStateValueProp($state, [
                                    "textInput9",
                                    "value"
                                  ]) ?? ""
                                }
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___5ItEj,
                                {
                                  [sty.formFieldeventStep_step3___5ItEJbbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                              initialValue={(() => {
                                function getTodayDate() {
                                  const today = new Date();
                                  const month = String(
                                    today.getMonth() + 1
                                  ).padStart(2, "0");
                                  const day = String(today.getDate()).padStart(
                                    2,
                                    "0"
                                  );
                                  const year = today.getFullYear();
                                  return `${month}/${day}/${year}`;
                                }
                                return getTodayDate();
                              })()}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___0Cl65
                                  )}
                                >
                                  {"End Date"}
                                </div>
                              }
                              name={"EndDate"}
                              noLabel={true}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dateTimePicker4,
                                    {
                                      [sty.dateTimePicker4eventStep_step2]:
                                        hasVariant($state, "eventStep", "step2")
                                    }
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["dateTimePicker4", "value"],
                                      AntdDatePicker_Helpers
                                    ),
                                  picker: "date",
                                  popupScopeClassName:
                                    sty["dateTimePicker4__datePickerPopup"],
                                  showTime: false,
                                  value: generateStateValueProp($state, [
                                    "dateTimePicker4",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "dateTimePicker4.value"
                                    }
                                  ],
                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"dateTimePicker4"}
                                    data-plasmic-override={
                                      overrides.dateTimePicker4
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___7Duhb,
                                {
                                  [sty.formFieldeventStep_step2___7DuhbOVvWp]:
                                    hasVariant($state, "eventStep", "step2"),
                                  [sty.formFieldeventStep_step3___7DuhbbbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                              initialValue={"00:00:00"}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bY1GA
                                  )}
                                >
                                  {"End Time"}
                                </div>
                              }
                              name={"EndTime"}
                              noLabel={true}
                            >
                              <TextInput
                                data-plasmic-name={"textInput10"}
                                data-plasmic-override={overrides.textInput10}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput10,
                                  {
                                    [sty.textInput10eventStep_step2]:
                                      hasVariant($state, "eventStep", "step2")
                                  }
                                )}
                                endIcon={
                                  <CheckSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__lRqxK
                                    )}
                                    role={"img"}
                                  />
                                }
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput10",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                type={"time"}
                                value={
                                  generateStateValueProp($state, [
                                    "textInput10",
                                    "value"
                                  ]) ?? ""
                                }
                              />
                            </FormItemWrapper>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__n1T2Z,
                                {
                                  [sty.freeBoxeventStep_step3__n1T2ZbbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runActionOnDatesFormList"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        tplRef: "datesFormListNew",
                                        action: "remove",
                                        args: [
                                          (() => {
                                            try {
                                              return $ctx.currentFieldIndex;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return (({ tplRef, action, args }) => {
                                        return $refs?.[tplRef]?.[action]?.(
                                          ...(args ?? [])
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runActionOnDatesFormList"] != null &&
                                  typeof $steps["runActionOnDatesFormList"] ===
                                    "object" &&
                                  typeof $steps["runActionOnDatesFormList"]
                                    .then === "function"
                                ) {
                                  $steps["runActionOnDatesFormList"] =
                                    await $steps["runActionOnDatesFormList"];
                                }
                              }}
                            >
                              <TrashSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xlhpX
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                        )}
                      </DataCtxReader__>
                    </FormListWrapper>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__t14Pc,
                        {
                          [sty.buttoneventStep_step2__t14PcOVvWp]: hasVariant(
                            $state,
                            "eventStep",
                            "step2"
                          ),
                          [sty.buttoneventStep_step3__t14PcbbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                      color={"softSand"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runActionOnDatesFormList"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                  opId: "be7ea568-9055-4b9a-8e30-9ce8aa793079",
                                  userArgs: {
                                    body: [
                                      $ctx.params["event-id"],
                                      (() => {
                                        const today = new Date();
                                        const formattedDate = today
                                          .toISOString()
                                          .split("T")[0];
                                        return formattedDate;
                                      })(),
                                      (() => {
                                        const today = new Date();
                                        const formattedDate = today
                                          .toISOString()
                                          .split("T")[0];
                                        return formattedDate;
                                      })(),
                                      "00:00:00",
                                      "00:00:00"
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [
                                    "e075f2d2-e11d-4f37-8613-993603c3da86",
                                    "1890dbd3-76f5-416d-b1ff-c69825ef5cdf"
                                  ],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runActionOnDatesFormList"] != null &&
                          typeof $steps["runActionOnDatesFormList"] ===
                            "object" &&
                          typeof $steps["runActionOnDatesFormList"].then ===
                            "function"
                        ) {
                          $steps["runActionOnDatesFormList"] = await $steps[
                            "runActionOnDatesFormList"
                          ];
                        }
                      }}
                      startIcon={
                        <PlusSvgIcon
                          className={classNames(projectcss.all, sty.svg__eicx0)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qc6F8
                        )}
                      >
                        {"Add more dates"}
                      </div>
                    </Button>
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.eventCalendar,
                        {
                          [sty.eventCalendareventStep_step1]: hasVariant(
                            $state,
                            "eventStep",
                            "step1"
                          ),
                          [sty.eventCalendareventStep_step2]: hasVariant(
                            $state,
                            "eventStep",
                            "step2"
                          ),
                          [sty.eventCalendareventStep_step3]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      ),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["eventCalendar", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      initialValues: undefined,
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onFinish: async values => {
                        const $steps = {};

                        $steps["updateDates"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                  opId: "88a4b3f2-edf0-4f12-8590-7e40fcac5c0f",
                                  userArgs: {
                                    body: [
                                      (() => {
                                        function formatDate(dateString) {
                                          const [month, day, year] =
                                            dateString.split("/");
                                          return `${year}-${month.padStart(
                                            2,
                                            "0"
                                          )}-${day.padStart(2, "0")}`;
                                        }
                                        return $state.editCurrentDates.map(
                                          item => ({
                                            id: item.id,
                                            StartDate: formatDate(
                                              item.StartDate
                                            ),
                                            StartTime: item.StartTime,
                                            EndDate: formatDate(item.EndDate),
                                            EndTime: item.EndTime
                                          })
                                        );
                                      })()
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: "8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDates"] != null &&
                          typeof $steps["updateDates"] === "object" &&
                          typeof $steps["updateDates"].then === "function"
                        ) {
                          $steps["updateDates"] = await $steps["updateDates"];
                        }

                        $steps["refreshData"] = true
                          ? (() => {
                              const actionArgs = {
                                queryInvalidation: [
                                  "1890dbd3-76f5-416d-b1ff-c69825ef5cdf",
                                  "11fa52f7-caeb-4d22-b3ca-d10f617493bc",
                                  "9fe03a9f-28d6-4181-bb32-30d6d6adf115"
                                ]
                              };
                              return (async ({ queryInvalidation }) => {
                                if (!queryInvalidation) {
                                  return;
                                }
                                await plasmicInvalidate(queryInvalidation);
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["refreshData"] != null &&
                          typeof $steps["refreshData"] === "object" &&
                          typeof $steps["refreshData"].then === "function"
                        ) {
                          $steps["refreshData"] = await $steps["refreshData"];
                        }
                      },
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["eventCalendar", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["eventCalendar"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "eventCalendar.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "eventCalendar.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"eventCalendar"}
                        data-plasmic-override={overrides.eventCalendar}
                        {...child$Props}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__drYo0,
                            {
                              [sty.freeBoxeventStep_step2__drYo0OVvWp]:
                                hasVariant($state, "eventStep", "step2"),
                              [sty.freeBoxeventStep_step3__drYo0BbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___0U0Dm
                            )}
                            color={"blue"}
                            startIcon={
                              <TicketSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__cGlNm,
                                  {
                                    [sty.svgeventStep_step2__cGlNmOVvWp]:
                                      hasVariant($state, "eventStep", "step2")
                                  }
                                )}
                                role={"img"}
                              />
                            }
                            submitsForm={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dWNmB
                              )}
                            >
                              {"Save"}
                            </div>
                          </Button>
                        </Stack__>
                      </FormWrapper>
                    );
                  })()}
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__pLdqt, {
                  [sty.freeBoxeventStep_step2__pLdqtoVvWp]: hasVariant(
                    $state,
                    "eventStep",
                    "step2"
                  ),
                  [sty.freeBoxeventStep_step3__pLdqTbbMwL]: hasVariant(
                    $state,
                    "eventStep",
                    "step3"
                  )
                })}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zcpl5, {
                    [sty.freeBoxeventStep_step1__zcpl5Te1ZK]: hasVariant(
                      $state,
                      "eventStep",
                      "step1"
                    ),
                    [sty.freeBoxeventStep_step2__zcpl5OVvWp]: hasVariant(
                      $state,
                      "eventStep",
                      "step2"
                    ),
                    [sty.freeBoxeventStep_step3__zcpl5BbMwL]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tegZq, {
                      [sty.freeBoxeventStep_step2__tegZqOVvWp]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.freeBoxeventStep_step3__tegZqbbMwL]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateEventStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["eventStep"]
                              },
                              operation: 0,
                              value: "step1"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEventStep"] != null &&
                        typeof $steps["updateEventStep"] === "object" &&
                        typeof $steps["updateEventStep"].then === "function"
                      ) {
                        $steps["updateEventStep"] = await $steps[
                          "updateEventStep"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x2EjR,
                        {
                          [sty.texteventStep_step3__x2EjRbbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "eventStep", "step3") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"General info"}
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Create your ticket types"}
                          </span>
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__l1AIz, {
                      [sty.freeBoxeventStep_step2__l1AIzOVvWp]: hasVariant(
                        $state,
                        "eventStep",
                        "step2"
                      ),
                      [sty.freeBoxeventStep_step3__l1AIzbbMwL]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateEventStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["eventStep"]
                              },
                              operation: 0,
                              value: "step2"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEventStep"] != null &&
                        typeof $steps["updateEventStep"] === "object" &&
                        typeof $steps["updateEventStep"].then === "function"
                      ) {
                        $steps["updateEventStep"] = await $steps[
                          "updateEventStep"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zR5,
                        {
                          [sty.texteventStep_step3__zR5BbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "eventStep", "step3") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Event dates"}
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Create your ticket types"}
                          </span>
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___53Gm, {
                      [sty.freeBoxeventStep_step3___53GmBbMwL]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l4Nuh,
                        {
                          [sty.texteventStep_step3__l4NuhbbMwL]: hasVariant(
                            $state,
                            "eventStep",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "eventStep", "step3") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Event tickets"}
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Create your ticket types"}
                          </span>
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox___667US)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fdJu0
                    )}
                  >
                    {"Current Dates"}
                  </div>
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.editTickets, {
                      [sty.editTicketseventStep_step3]: hasVariant(
                        $state,
                        "eventStep",
                        "step3"
                      )
                    }),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["editTickets", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["editTickets", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["editTickets"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "editTickets.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "editTickets.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"editTickets"}
                      data-plasmic-override={overrides.editTickets}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0AhDu,
                          {
                            [sty.freeBoxeventStep_step3___0AhDubbMwL]:
                              hasVariant($state, "eventStep", "step3")
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dQdvF,
                            {
                              [sty.freeBoxeventStep_step2__dQdvFoVvWp]:
                                hasVariant($state, "eventStep", "step2"),
                              [sty.freeBoxeventStep_step3__dQdvFbbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7BnZw
                            )}
                          >
                            {"Ticket type"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dWCwZ,
                            {
                              [sty.freeBoxeventStep_step3__dWCwZbbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yPi3O
                            )}
                          >
                            {"Ticket name"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__trwAy,
                            {
                              [sty.freeBoxeventStep_step3__trwAybbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fLDrd
                            )}
                          >
                            {"Quantity"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pxPm0,
                            {
                              [sty.freeBoxeventStep_step3__pxPm0BbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xBlFq
                            )}
                          >
                            {"Price"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___69Vl7,
                            {
                              [sty.freeBoxeventStep_step3___69Vl7BbMwL]:
                                hasVariant($state, "eventStep", "step3")
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nrYYo
                            )}
                          >
                            {"Actions"}
                          </div>
                        </div>
                      </div>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.eventDates.data.response.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___37Jed,
                              {
                                [sty.freeBoxeventStep_step2___37JedOVvWp]:
                                  hasVariant($state, "eventStep", "step2"),
                                [sty.freeBoxeventStep_step3___37JedbbMwL]:
                                  hasVariant($state, "eventStep", "step3")
                              }
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2S0S9
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      undefined;
                                      function formatDate(inputDate) {
                                        if (
                                          /^\d{1,2}\/\d{1,2}\/\d{4}$/.test(
                                            inputDate
                                          )
                                        ) {
                                          return inputDate;
                                        }
                                        let date =
                                          $$.dateFns.parseISO(inputDate);
                                        if (!$$.dateFns.isValid(date)) {
                                          throw new Error(
                                            "Invalid date format: " + inputDate
                                          );
                                        }
                                        return $$.dateFns.format(
                                          date,
                                          "M/d/yyyy"
                                        );
                                      }
                                      const startDate = formatDate(
                                        $queries.eventDates.data.response
                                          .data[0].StartDate
                                      );
                                      const endDate = formatDate(
                                        $queries.eventDates.data.response
                                          .data[0].EndDate
                                      );
                                      return (
                                        "Event date: " +
                                        startDate +
                                        " to " +
                                        endDate
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.eventTickets.data.response.data.filter(
                                    ticket =>
                                      ticket.EventDateId == currentItem.id
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xi8K,
                                    {
                                      [sty.freeBoxeventStep_step3__xi8KbbMwL]:
                                        hasVariant($state, "eventStep", "step3")
                                    }
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__uxNuf,
                                      {
                                        [sty.freeBoxeventStep_step3__uxNufbbMwL]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step3"
                                          )
                                      }
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.selectTicketType
                                        ),
                                        dateId: generateStateValueProp($state, [
                                          "selectTicketType",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "dateId"
                                        ]),
                                        onChange: (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "selectTicketType",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "value"
                                          ])(eventArgs[0]);
                                        },
                                        onDateIdChange2: (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "selectTicketType",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "dateId"
                                          ])(eventArgs[0]);
                                        },
                                        onTicketIdChange: (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "selectTicketType",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "ticketId"
                                          ])(eventArgs[0]);
                                        },
                                        options: (() => {
                                          const __composite = [
                                            { value: null, label: null },
                                            { value: null, label: null },
                                            { value: null, label: null }
                                          ];
                                          __composite["0"]["value"] = "Paid";
                                          __composite["0"]["label"] = "Paid";
                                          __composite["1"]["value"] = "Free";
                                          __composite["1"]["label"] = "Free";
                                          __composite["2"]["value"] =
                                            "Donation";
                                          __composite["2"]["label"] =
                                            "Donation";
                                          return __composite;
                                        })(),

                                        ticketId: generateStateValueProp(
                                          $state,
                                          [
                                            "selectTicketType",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "ticketId"
                                          ]
                                        ),
                                        value: generateStateValueProp($state, [
                                          "selectTicketType",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "value"
                                        ])
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "selectTicketType[][].value",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return currentItem.TicketType;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          },
                                          {
                                            name: "selectTicketType[][].dateId",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return currentItem.EventDateId;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          },
                                          {
                                            name: "selectTicketType[][].ticketId",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return currentItem.id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],
                                        [__plasmic_idx_0, __plasmic_idx_1]
                                      );
                                      return (
                                        <Select
                                          data-plasmic-name={"selectTicketType"}
                                          data-plasmic-override={
                                            overrides.selectTicketType
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                  <div
                                    data-plasmic-name={"inputTicketName"}
                                    data-plasmic-override={
                                      overrides.inputTicketName
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputTicketName,
                                      {
                                        [sty.inputTicketNameeventStep_step3]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step3"
                                          )
                                      }
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.inputTicketName2
                                        ),
                                        endIcon: (
                                          <CheckSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg___0SrZf
                                            )}
                                            role={"img"}
                                          />
                                        ),

                                        onChange: (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "inputTicketName2",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        },
                                        placeholder: "Ticket Name",
                                        value:
                                          generateStateValueProp($state, [
                                            "inputTicketName2",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "value"
                                          ]) ?? ""
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "inputTicketName2[][].value",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return currentItem.TicketName;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],
                                        [__plasmic_idx_0, __plasmic_idx_1]
                                      );
                                      return (
                                        <TextInput
                                          data-plasmic-name={"inputTicketName2"}
                                          data-plasmic-override={
                                            overrides.inputTicketName2
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xjv0R,
                                      {
                                        [sty.freeBoxeventStep_step3__xjv0RbbMwL]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step3"
                                          )
                                      }
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.inputTicketQuantity
                                        ),
                                        endIcon: (
                                          <CheckSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__ko14O
                                            )}
                                            role={"img"}
                                          />
                                        ),

                                        onChange: (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "inputTicketQuantity",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        },
                                        placeholder: "0",
                                        type: "number",
                                        value:
                                          generateStateValueProp($state, [
                                            "inputTicketQuantity",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "value"
                                          ]) ?? ""
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "inputTicketQuantity[][].value",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return currentItem.TicketQuantity;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],
                                        [__plasmic_idx_0, __plasmic_idx_1]
                                      );
                                      return (
                                        <TextInput
                                          data-plasmic-name={
                                            "inputTicketQuantity"
                                          }
                                          data-plasmic-override={
                                            overrides.inputTicketQuantity
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wrpMx,
                                      {
                                        [sty.freeBoxeventStep_step3__wrpMXbbMwL]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step3"
                                          )
                                      }
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.inputTicketPrice
                                        ),
                                        endIcon: (
                                          <CheckSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__gzmla
                                            )}
                                            role={"img"}
                                          />
                                        ),

                                        onChange: (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "inputTicketPrice",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        },
                                        placeholder: "0",
                                        type: "number",
                                        value:
                                          generateStateValueProp($state, [
                                            "inputTicketPrice",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "value"
                                          ]) ?? ""
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "inputTicketPrice[][].value",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return currentItem.TicketPrice;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],
                                        [__plasmic_idx_0, __plasmic_idx_1]
                                      );
                                      return (
                                        <TextInput
                                          data-plasmic-name={"inputTicketPrice"}
                                          data-plasmic-override={
                                            overrides.inputTicketPrice
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__fA2Ea,
                                      {
                                        [sty.freeBoxeventStep_step3__fA2EabbMwL]:
                                          hasVariant(
                                            $state,
                                            "eventStep",
                                            "step3"
                                          )
                                      }
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__zHrOg
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["httpDelete"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "2jPYjgtJgbD3LaNLTLfSHG",
                                                  opId: "948613aa-57e8-4f8f-ae6c-80c713fad4b8",
                                                  userArgs: {
                                                    path: [currentItem.id]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["httpDelete"] != null &&
                                          typeof $steps["httpDelete"] ===
                                            "object" &&
                                          typeof $steps["httpDelete"].then ===
                                            "function"
                                        ) {
                                          $steps["httpDelete"] = await $steps[
                                            "httpDelete"
                                          ];
                                        }
                                      }}
                                    >
                                      <TrashSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__yygZc
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </Stack__>
                                </div>
                              );
                            })}
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__ly9Ue,
                                {
                                  [sty.buttoneventStep_step3__ly9UebbMwL]:
                                    hasVariant($state, "eventStep", "step3")
                                }
                              )}
                              color={"softSand"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["httpPost"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                                          opId: "e093b13c-a66e-48dc-89e2-116969ff9fd9",
                                          userArgs: {
                                            body: [
                                              {
                                                TicketName: "",
                                                TicketType: "Paid",
                                                TicketQuantity: 0,
                                                TicketPrice: 0,
                                                EventId: currentItem.EventId,
                                                EventDateId: currentItem.id
                                              }
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "9fe03a9f-28d6-4181-bb32-30d6d6adf115",
                                            "1890dbd3-76f5-416d-b1ff-c69825ef5cdf",
                                            "11fa52f7-caeb-4d22-b3ca-d10f617493bc"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["httpPost"] != null &&
                                  typeof $steps["httpPost"] === "object" &&
                                  typeof $steps["httpPost"].then === "function"
                                ) {
                                  $steps["httpPost"] = await $steps["httpPost"];
                                }
                              }}
                              startIcon={
                                <CheckSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__crhrF,
                                    {
                                      [sty.svgeventStep_step3__crhrFbbMwL]:
                                        hasVariant($state, "eventStep", "step3")
                                    }
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Add Ticket"}
                            </Button>
                          </Stack__>
                        );
                      })}
                    </FormWrapper>
                  );
                })()}
                <Button
                  className={classNames("__wab_instance", sty.button__k5QJm, {
                    [sty.buttoneventStep_step3__k5QJmbbMwL]: hasVariant(
                      $state,
                      "eventStep",
                      "step3"
                    )
                  })}
                  color={"blue"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["httpPatch"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
                              opId: "1572d6c0-8b6f-4629-931c-a89dc6c16614",
                              userArgs: {
                                body: [
                                  (() => {
                                    const selectTicketType =
                                      $state.selectTicketType;
                                    const inputTicketName2 =
                                      $state.inputTicketName2;
                                    const inputTicketQuantity =
                                      $state.inputTicketQuantity;
                                    const inputTicketPrice =
                                      $state.inputTicketPrice;
                                    const result = [];
                                    selectTicketType.forEach(
                                      (ticketTypeArray, i) => {
                                        ticketTypeArray.forEach(
                                          (ticketType, j) => {
                                            result.push({
                                              id: ticketType.ticketId,
                                              EventId: $ctx.params["event-id"],
                                              EventDateId: ticketType.dateId,
                                              TicketType: ticketType.value,
                                              TicketName:
                                                inputTicketName2[i][j].value,
                                              TicketQuantity:
                                                inputTicketQuantity[i][j].value,
                                              TicketPrice:
                                                inputTicketPrice[i][j].value
                                            });
                                          }
                                        );
                                      }
                                    );
                                    return result.length > 0 ? result : [];
                                  })()
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["httpPatch"] != null &&
                      typeof $steps["httpPatch"] === "object" &&
                      typeof $steps["httpPatch"].then === "function"
                    ) {
                      $steps["httpPatch"] = await $steps["httpPatch"];
                    }
                  }}
                  startIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg___45Gtx)}
                      role={"img"}
                    />
                  }
                >
                  {"Save"}
                </Button>
              </div>
            </Stack__>
          </ConditionGuard>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar2",
    "conditionGuard",
    "options",
    "newEvent",
    "eventName",
    "textInput",
    "textArea",
    "select",
    "addressAutocomplete",
    "textInput2",
    "textInput3",
    "selectStartDate",
    "selectStartTime",
    "selectEndDate",
    "selectEndTime",
    "datesFormListNew",
    "dateTimePicker3",
    "textInput9",
    "dateTimePicker4",
    "textInput10",
    "eventCalendar",
    "editTickets",
    "selectTicketType",
    "inputTicketName",
    "inputTicketName2",
    "inputTicketQuantity",
    "inputTicketPrice",
    "footer"
  ],
  navbar2: ["navbar2"],
  conditionGuard: [
    "conditionGuard",
    "options",
    "newEvent",
    "eventName",
    "textInput",
    "textArea",
    "select",
    "addressAutocomplete",
    "textInput2",
    "textInput3",
    "selectStartDate",
    "selectStartTime",
    "selectEndDate",
    "selectEndTime",
    "datesFormListNew",
    "dateTimePicker3",
    "textInput9",
    "dateTimePicker4",
    "textInput10",
    "eventCalendar",
    "editTickets",
    "selectTicketType",
    "inputTicketName",
    "inputTicketName2",
    "inputTicketQuantity",
    "inputTicketPrice"
  ],
  options: ["options"],
  newEvent: [
    "newEvent",
    "eventName",
    "textInput",
    "textArea",
    "select",
    "addressAutocomplete",
    "textInput2",
    "textInput3",
    "selectStartDate",
    "selectStartTime",
    "selectEndDate",
    "selectEndTime",
    "datesFormListNew",
    "dateTimePicker3",
    "textInput9",
    "dateTimePicker4",
    "textInput10",
    "eventCalendar"
  ],
  eventName: [
    "eventName",
    "textInput",
    "textArea",
    "select",
    "addressAutocomplete",
    "textInput2",
    "textInput3"
  ],
  textInput: ["textInput"],
  textArea: ["textArea"],
  select: ["select"],
  addressAutocomplete: ["addressAutocomplete"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  selectStartDate: ["selectStartDate"],
  selectStartTime: ["selectStartTime"],
  selectEndDate: ["selectEndDate"],
  selectEndTime: ["selectEndTime"],
  datesFormListNew: [
    "datesFormListNew",
    "dateTimePicker3",
    "textInput9",
    "dateTimePicker4",
    "textInput10"
  ],
  dateTimePicker3: ["dateTimePicker3"],
  textInput9: ["textInput9"],
  dateTimePicker4: ["dateTimePicker4"],
  textInput10: ["textInput10"],
  eventCalendar: ["eventCalendar"],
  editTickets: [
    "editTickets",
    "selectTicketType",
    "inputTicketName",
    "inputTicketName2",
    "inputTicketQuantity",
    "inputTicketPrice"
  ],
  selectTicketType: ["selectTicketType"],
  inputTicketName: ["inputTicketName", "inputTicketName2"],
  inputTicketName2: ["inputTicketName2"],
  inputTicketQuantity: ["inputTicketQuantity"],
  inputTicketPrice: ["inputTicketPrice"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar2: typeof Navbar2;
  conditionGuard: typeof ConditionGuard;
  options: typeof Options;
  newEvent: "div";
  eventName: typeof FormWrapper;
  textInput: typeof TextInput;
  textArea: typeof AntdTextArea;
  select: typeof Select;
  addressAutocomplete: typeof AddressAutocomplete;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  selectStartDate: typeof AntdDatePicker;
  selectStartTime: typeof TextInput;
  selectEndDate: typeof AntdDatePicker;
  selectEndTime: typeof TextInput;
  datesFormListNew: typeof FormListWrapper;
  dateTimePicker3: typeof AntdDatePicker;
  textInput9: typeof TextInput;
  dateTimePicker4: typeof AntdDatePicker;
  textInput10: typeof TextInput;
  eventCalendar: typeof FormWrapper;
  editTickets: typeof FormWrapper;
  selectTicketType: typeof Select;
  inputTicketName: "div";
  inputTicketName2: typeof TextInput;
  inputTicketQuantity: typeof TextInput;
  inputTicketPrice: typeof TextInput;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditEvent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditEvent__VariantsArgs;
    args?: PlasmicEditEvent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditEvent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditEvent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditEvent__ArgProps,
          internalVariantPropNames: PlasmicEditEvent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditEvent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditEvent";
  } else {
    func.displayName = `PlasmicEditEvent.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"8b269ef1-445f-41e6-bfa7-17c5a62cd5d3"}
      appId={"MtmcKR1GuwbKEBJfYkVdj"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicEditEvent = Object.assign(
  // Top-level PlasmicEditEvent renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar2: makeNodeComponent("navbar2"),
    conditionGuard: makeNodeComponent("conditionGuard"),
    options: makeNodeComponent("options"),
    newEvent: makeNodeComponent("newEvent"),
    eventName: makeNodeComponent("eventName"),
    textInput: makeNodeComponent("textInput"),
    textArea: makeNodeComponent("textArea"),
    select: makeNodeComponent("select"),
    addressAutocomplete: makeNodeComponent("addressAutocomplete"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    selectStartDate: makeNodeComponent("selectStartDate"),
    selectStartTime: makeNodeComponent("selectStartTime"),
    selectEndDate: makeNodeComponent("selectEndDate"),
    selectEndTime: makeNodeComponent("selectEndTime"),
    datesFormListNew: makeNodeComponent("datesFormListNew"),
    dateTimePicker3: makeNodeComponent("dateTimePicker3"),
    textInput9: makeNodeComponent("textInput9"),
    dateTimePicker4: makeNodeComponent("dateTimePicker4"),
    textInput10: makeNodeComponent("textInput10"),
    eventCalendar: makeNodeComponent("eventCalendar"),
    editTickets: makeNodeComponent("editTickets"),
    selectTicketType: makeNodeComponent("selectTicketType"),
    inputTicketName: makeNodeComponent("inputTicketName"),
    inputTicketName2: makeNodeComponent("inputTicketName2"),
    inputTicketQuantity: makeNodeComponent("inputTicketQuantity"),
    inputTicketPrice: makeNodeComponent("inputTicketPrice"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicEditEvent
    internalVariantProps: PlasmicEditEvent__VariantProps,
    internalArgProps: PlasmicEditEvent__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Edit Event",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditEvent;
/* prettier-ignore-end */
