// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: MtmcKR1GuwbKEBJfYkVdj
// Component: DlEq3X8qSJAp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar2 from "../../Navbar2"; // plasmic-import: PlAJ5tJMUQMz/component
import Button from "../../Button"; // plasmic-import: 7c1YDuGGoKuq/component
import FooterEspanol from "../../FooterEspanol"; // plasmic-import: HJtSqCLuEANf/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: MtmcKR1GuwbKEBJfYkVdj/projectcss
import sty from "./PlasmicEventCreated.module.css"; // plasmic-import: DlEq3X8qSJAp/css

import SealCheckDuotoneSvgIcon from "./icons/PlasmicIcon__SealCheckDuotoneSvg"; // plasmic-import: cbGOkv0a0q56/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: V9lHh1c0c7g6/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _VJXnu9sySb9/icon

createPlasmicElementProxy;

export type PlasmicEventCreated__VariantMembers = {};
export type PlasmicEventCreated__VariantsArgs = {};
type VariantPropType = keyof PlasmicEventCreated__VariantsArgs;
export const PlasmicEventCreated__VariantProps = new Array<VariantPropType>();

export type PlasmicEventCreated__ArgsType = {};
type ArgPropType = keyof PlasmicEventCreated__ArgsType;
export const PlasmicEventCreated__ArgProps = new Array<ArgPropType>();

export type PlasmicEventCreated__OverridesType = {
  root?: Flex__<"div">;
  navbar2?: Flex__<typeof Navbar2>;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof Button>;
  footerEspanol?: Flex__<typeof FooterEspanol>;
};

export interface DefaultEventCreatedProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEventCreated__RenderFunc(props: {
  variants: PlasmicEventCreated__VariantsArgs;
  args: PlasmicEventCreated__ArgsType;
  overrides: PlasmicEventCreated__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    event: usePlasmicDataOp(() => {
      return {
        sourceId: "2jPYjgtJgbD3LaNLTLfSHG",
        opId: "22ce1c2f-c556-4636-bd0c-31d8903b8b63",
        userArgs: {
          path: [$ctx.params["event-id"]]
        },
        cacheKey: `plasmic.$.22ce1c2f-c556-4636-bd0c-31d8903b8b63.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicEventCreated.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicEventCreated.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicEventCreated.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar2
            data-plasmic-name={"navbar2"}
            data-plasmic-override={overrides.navbar2}
            className={classNames("__wab_instance", sty.navbar2)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cbIJv)}
          >
            <SealCheckDuotoneSvgIcon
              className={classNames(projectcss.all, sty.svg__ooeZu)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ojjk8
              )}
            >
              {"Your Event Has been Created"}
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.event.data.response.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ltzO)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToEvent"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/event/${(() => {
                              try {
                                return currentItem.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToEvent"] != null &&
                      typeof $steps["goToEvent"] === "object" &&
                      typeof $steps["goToEvent"].then === "function"
                    ) {
                      $steps["goToEvent"] = await $steps["goToEvent"];
                    }
                  }}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    height={"240"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return (
                          "https://events-db-directus.6sizjj.easypanel.host/assets/" +
                          currentItem.Hero
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    width={"240"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oZigj
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.EventName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              );
            })}
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"blue"}
              onClick={async event => {
                const $steps = {};

                $steps["goToEventsDashboard"] = true
                  ? (() => {
                      const actionArgs = { destination: `/events` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToEventsDashboard"] != null &&
                  typeof $steps["goToEventsDashboard"] === "object" &&
                  typeof $steps["goToEventsDashboard"].then === "function"
                ) {
                  $steps["goToEventsDashboard"] = await $steps[
                    "goToEventsDashboard"
                  ];
                }
              }}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__e0DQ)}
                  role={"img"}
                />
              }
            >
              {"Go to Dashboard"}
            </Button>
          </Stack__>
          <FooterEspanol
            data-plasmic-name={"footerEspanol"}
            data-plasmic-override={overrides.footerEspanol}
            className={classNames("__wab_instance", sty.footerEspanol)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar2", "img", "button", "footerEspanol"],
  navbar2: ["navbar2"],
  img: ["img"],
  button: ["button"],
  footerEspanol: ["footerEspanol"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar2: typeof Navbar2;
  img: typeof PlasmicImg__;
  button: typeof Button;
  footerEspanol: typeof FooterEspanol;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEventCreated__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEventCreated__VariantsArgs;
    args?: PlasmicEventCreated__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEventCreated__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEventCreated__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEventCreated__ArgProps,
          internalVariantPropNames: PlasmicEventCreated__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEventCreated__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEventCreated";
  } else {
    func.displayName = `PlasmicEventCreated.${nodeName}`;
  }
  return func;
}

export const PlasmicEventCreated = Object.assign(
  // Top-level PlasmicEventCreated renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar2: makeNodeComponent("navbar2"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    footerEspanol: makeNodeComponent("footerEspanol"),

    // Metadata about props expected for PlasmicEventCreated
    internalVariantProps: PlasmicEventCreated__VariantProps,
    internalArgProps: PlasmicEventCreated__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Event Created",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEventCreated;
/* prettier-ignore-end */
