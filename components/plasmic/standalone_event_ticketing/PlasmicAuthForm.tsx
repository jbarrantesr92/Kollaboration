// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: MtmcKR1GuwbKEBJfYkVdj
// Component: M6JTnsbXEmY-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: KfDAmu4lid5o/component
import Button from "../../Button"; // plasmic-import: 7c1YDuGGoKuq/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: MtmcKR1GuwbKEBJfYkVdj/projectcss
import sty from "./PlasmicAuthForm.module.css"; // plasmic-import: M6JTnsbXEmY-/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: omsmxYjn2AYA/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: mFdXj3H03u7X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: V9lHh1c0c7g6/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: HP-ra4oNUU5G/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: CxIrU77zeBgS/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _VJXnu9sySb9/icon

createPlasmicElementProxy;

export type PlasmicAuthForm__VariantMembers = {
  mode: "signIn" | "signUp" | "checkEmail";
};
export type PlasmicAuthForm__VariantsArgs = {
  mode?: SingleChoiceArg<"signIn" | "signUp" | "checkEmail">;
};
type VariantPropType = keyof PlasmicAuthForm__VariantsArgs;
export const PlasmicAuthForm__VariantProps = new Array<VariantPropType>("mode");

export type PlasmicAuthForm__ArgsType = {
  handleSubmit?: (mode: string, credentials: any) => void;
};
type ArgPropType = keyof PlasmicAuthForm__ArgsType;
export const PlasmicAuthForm__ArgProps = new Array<ArgPropType>("handleSubmit");

export type PlasmicAuthForm__OverridesType = {
  root?: Flex__<"div">;
  credentialsForm?: Flex__<typeof FormWrapper>;
  textInput?: Flex__<typeof TextInput>;
  passwordInput?: Flex__<typeof TextInput>;
  button?: Flex__<typeof Button>;
  lottie?: Flex__<typeof LottieWrapper>;
};

export interface DefaultAuthFormProps {
  handleSubmit?: (mode: string, credentials: any) => void;
  mode?: SingleChoiceArg<"signIn" | "signUp" | "checkEmail">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuthForm__RenderFunc(props: {
  variants: PlasmicAuthForm__VariantsArgs;
  args: PlasmicAuthForm__ArgsType;
  overrides: PlasmicAuthForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "credentialsForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "credentialsForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "credentialsForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "credentialsForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "currentMode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "signIn"
      },
      {
        path: "mode",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.currentMode;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.mode
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootmode_checkEmail]: hasVariant($state, "mode", "checkEmail"),
          [sty.rootmode_signIn]: hasVariant($state, "mode", "signIn")
        }
      )}
    >
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.credentialsForm, {
            [sty.credentialsFormmode_checkEmail]: hasVariant(
              $state,
              "mode",
              "checkEmail"
            ),
            [sty.credentialsFormmode_signIn]: hasVariant(
              $state,
              "mode",
              "signIn"
            ),
            [sty.credentialsFormmode_signUp]: hasVariant(
              $state,
              "mode",
              "signUp"
            )
          }),
          extendedOnValuesChange: generateStateOnChangePropForCodeComponents(
            $state,
            "value",
            ["credentialsForm", "value"],
            FormWrapper_Helpers
          ),
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],
          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onFinish: async values => {
            const $steps = {};

            $steps["runHandleSubmit"] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["handleSubmit"],
                    args: [
                      (() => {
                        try {
                          return $state.currentMode;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      (() => {
                        try {
                          return $state.credentialsForm.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runHandleSubmit"] != null &&
              typeof $steps["runHandleSubmit"] === "object" &&
              typeof $steps["runHandleSubmit"].then === "function"
            ) {
              $steps["runHandleSubmit"] = await $steps["runHandleSubmit"];
            }
          },
          onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
            $state,
            "isSubmitting",
            ["credentialsForm", "isSubmitting"],
            FormWrapper_Helpers
          ),
          ref: ref => {
            $refs["credentialsForm"] = ref;
          },
          submitSlot: null,
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "credentialsForm.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "credentialsForm.isSubmitting"
            }
          ],
          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );

        return (
          <FormWrapper
            data-plasmic-name={"credentialsForm"}
            data-plasmic-override={overrides.credentialsForm}
            {...child$Props}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qiygH)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__czGsx)}>
                <Icon5Icon
                  className={classNames(projectcss.all, sty.svg__cd0R6)}
                  role={"img"}
                />
              </div>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField___8AXBz)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kpD3
                    )}
                  >
                    {"Email"}
                  </div>
                }
                name={"email"}
              >
                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  className={classNames("__wab_instance", sty.textInput)}
                  endIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__jbGod)}
                      role={"img"}
                    />
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={"Enter your email adress"}
                  value={
                    generateStateValueProp($state, ["textInput", "value"]) ?? ""
                  }
                />
              </FormItemWrapper>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xbnH9)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__l3X2)}>
                <Icon6Icon
                  className={classNames(projectcss.all, sty.svg__xf6SA)}
                  role={"img"}
                />
              </div>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__pvdSx)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xmRmy
                    )}
                  >
                    {"Password"}
                  </div>
                }
                name={"password"}
              >
                <TextInput
                  data-plasmic-name={"passwordInput"}
                  data-plasmic-override={overrides.passwordInput}
                  className={classNames("__wab_instance", sty.passwordInput)}
                  endIcon={
                    <CheckSvgIcon
                      className={classNames(projectcss.all, sty.svg__yOdP)}
                      role={"img"}
                    />
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "passwordInput",
                      "value"
                    ])((e => e.target?.value).apply(null, eventArgs));
                  }}
                  placeholder={"Enter your password"}
                  required={false}
                  type={"password"}
                  value={
                    generateStateValueProp($state, [
                      "passwordInput",
                      "value"
                    ]) ?? ""
                  }
                />
              </FormItemWrapper>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qVxIy)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__kYWa6)}>
                <Icon7Icon
                  className={classNames(projectcss.all, sty.svg__fF2I)}
                  role={"img"}
                />
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={"blue"}
                startIcon={null}
                submitsForm={true}
              >
                {"Sign in"}
              </Button>
            </Stack__>
            {(() => {
              try {
                return $state.credentialsForm.isSubmitting;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <LottieWrapper
                data-plasmic-name={"lottie"}
                data-plasmic-override={overrides.lottie}
                animationData={{
                  nm: "loading_ring_medium",
                  ddd: 0,
                  h: 200,
                  w: 200,
                  meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                  layers: [
                    {
                      ty: 4,
                      nm: "flamingo ring 3",
                      sr: 1,
                      st: -1.00000004073083,
                      op: 44.0000017921567,
                      ip: 17.0000006924242,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [0, 0, 0] },
                        s: { a: 0, k: [100, 100, 100] },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [0, 0, 0] },
                        r: {
                          a: 1,
                          k: [
                            {
                              o: { x: 1, y: 0 },
                              i: { x: 0.785, y: 1 },
                              s: [14.2],
                              t: 17
                            },
                            { s: [360], t: 50.0000020365418 }
                          ]
                        },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Ellipse 1",
                          np: 3,
                          it: [
                            {
                              ty: "el",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Ellipse",
                              nm: "Ellipse Path 1",
                              d: 1,
                              p: { a: 0, k: [0, 0] },
                              s: { a: 0, k: [54, 54] }
                            },
                            {
                              ty: "st",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Stroke",
                              nm: "Stroke 1",
                              lc: 2,
                              lj: 1,
                              ml: 4,
                              o: { a: 0, k: 100 },
                              w: { a: 0, k: 6 },
                              c: { a: 0, k: [0.9373, 0.9569, 0.9608] }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [0, 0], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        },
                        {
                          ty: "tm",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Filter - Trim",
                          nm: "Trim Paths 1",
                          ix: 2,
                          e: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.833, y: 1 },
                                s: [0],
                                t: 20
                              },
                              { s: [1], t: 44.0000017921567 }
                            ],
                            ix: 2
                          },
                          o: { a: 0, k: 0, ix: 3 },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 42
                              },
                              { s: [1], t: 44.0000017921567 }
                            ],
                            ix: 1
                          },
                          m: 1
                        }
                      ],
                      ind: 1,
                      parent: 2
                    },
                    {
                      ty: 4,
                      nm: "green ring 1",
                      sr: 1,
                      st: -1.00000004073083,
                      op: 50.0000020365418,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [0, 0, 0] },
                        s: { a: 0, k: [200, 200, 100] },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [100, 100, 0] },
                        r: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [0],
                              t: 0
                            },
                            { s: [360], t: 49.0000019958109 }
                          ]
                        },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Ellipse 1",
                          np: 3,
                          it: [
                            {
                              ty: "el",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Ellipse",
                              nm: "Ellipse Path 1",
                              d: 1,
                              p: { a: 0, k: [0, 0] },
                              s: { a: 0, k: [54, 54] }
                            },
                            {
                              ty: "st",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Stroke",
                              nm: "Stroke 1",
                              lc: 2,
                              lj: 1,
                              ml: 4,
                              o: { a: 0, k: 100 },
                              w: { a: 0, k: 6 },
                              c: { a: 0, k: [0.9843, 1, 0.9569] }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [0, 0], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        },
                        {
                          ty: "tm",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Filter - Trim",
                          nm: "Trim Paths 1",
                          ix: 2,
                          e: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [0],
                                t: -1
                              },
                              { s: [100], t: 37.0000015070409 }
                            ],
                            ix: 2
                          },
                          o: { a: 0, k: 0, ix: 3 },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.644, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [0],
                                t: 10
                              },
                              { s: [100], t: 50.0000020365418 }
                            ],
                            ix: 1
                          },
                          m: 1
                        }
                      ],
                      ind: 2
                    },
                    {
                      ty: 4,
                      nm: "flaming ring 1",
                      sr: 1,
                      st: -1.00000004073083,
                      op: 44.0000017921567,
                      ip: 15.0000006109625,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [0, 0, 0] },
                        s: { a: 0, k: [100, 100, 100] },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [0, 0, 0] },
                        r: { a: 0, k: 0 },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Ellipse 1",
                          np: 3,
                          it: [
                            {
                              ty: "el",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Ellipse",
                              nm: "Ellipse Path 1",
                              d: 1,
                              p: { a: 0, k: [0, 0] },
                              s: { a: 0, k: [54, 54] }
                            },
                            {
                              ty: "st",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Stroke",
                              nm: "Stroke 1",
                              lc: 2,
                              lj: 1,
                              ml: 4,
                              o: { a: 0, k: 100 },
                              w: { a: 0, k: 6 },
                              c: { a: 0, k: [0.5725, 0.8157, 0.9569] }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [0, 0], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        },
                        {
                          ty: "tm",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Filter - Trim",
                          nm: "Trim Paths 1",
                          ix: 2,
                          e: {
                            a: 1,
                            k: [
                              {
                                o: { x: 1, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [0],
                                t: -1
                              },
                              { s: [100], t: 37.0000015070409 }
                            ],
                            ix: 2
                          },
                          o: { a: 0, k: 0, ix: 3 },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: { x: 1, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [0],
                                t: 8
                              },
                              { s: [100], t: 48.0000019550801 }
                            ],
                            ix: 1
                          },
                          m: 1
                        }
                      ],
                      ind: 3,
                      parent: 2
                    },
                    {
                      ty: 4,
                      nm: "flamingo ring 2",
                      sr: 1,
                      st: -1.00000004073083,
                      op: 44.0000017921567,
                      ip: 17.0000006924242,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [0, 0, 0] },
                        s: { a: 0, k: [100, 100, 100] },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [0, 0, 0] },
                        r: {
                          a: 1,
                          k: [
                            {
                              o: { x: 1, y: 0 },
                              i: { x: 0.612, y: 1 },
                              s: [14.2],
                              t: 17
                            },
                            { s: [360], t: 50.0000020365418 }
                          ]
                        },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Ellipse 1",
                          np: 3,
                          it: [
                            {
                              ty: "el",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Ellipse",
                              nm: "Ellipse Path 1",
                              d: 1,
                              p: { a: 0, k: [0, 0] },
                              s: { a: 0, k: [54, 54] }
                            },
                            {
                              ty: "st",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Stroke",
                              nm: "Stroke 1",
                              lc: 2,
                              lj: 1,
                              ml: 4,
                              o: { a: 0, k: 100 },
                              w: { a: 0, k: 6 },
                              c: { a: 0, k: [0.9451, 0.9686, 0.9725] }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [0, 0], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        },
                        {
                          ty: "tm",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Filter - Trim",
                          nm: "Trim Paths 1",
                          ix: 2,
                          e: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.833, y: 1 },
                                s: [0],
                                t: 20
                              },
                              { s: [13.7], t: 44.0000017921567 }
                            ],
                            ix: 2
                          },
                          o: { a: 0, k: 0, ix: 3 },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 42
                              },
                              { s: [13.7], t: 44.0000017921567 }
                            ],
                            ix: 1
                          },
                          m: 1
                        }
                      ],
                      ind: 4,
                      parent: 2
                    }
                  ],
                  v: "4.6.0",
                  fr: 29.9700012207031,
                  op: 49.0000019958109,
                  ip: 0,
                  assets: []
                }}
                autoplay={(() => {
                  try {
                    return $state.credentialsForm.isSubmitting;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.lottie, {
                  [sty.lottiemode_checkEmail]: hasVariant(
                    $state,
                    "mode",
                    "checkEmail"
                  ),
                  [sty.lottiemode_signIn]: hasVariant($state, "mode", "signIn"),
                  [sty.lottiemode_signUp]: hasVariant($state, "mode", "signUp")
                })}
                preview={false}
              />
            ) : null}
          </FormWrapper>
        );
      })()}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "credentialsForm",
    "textInput",
    "passwordInput",
    "button",
    "lottie"
  ],
  credentialsForm: [
    "credentialsForm",
    "textInput",
    "passwordInput",
    "button",
    "lottie"
  ],
  textInput: ["textInput"],
  passwordInput: ["passwordInput"],
  button: ["button"],
  lottie: ["lottie"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  credentialsForm: typeof FormWrapper;
  textInput: typeof TextInput;
  passwordInput: typeof TextInput;
  button: typeof Button;
  lottie: typeof LottieWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthForm__VariantsArgs;
    args?: PlasmicAuthForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAuthForm__ArgProps,
          internalVariantPropNames: PlasmicAuthForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuthForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthForm";
  } else {
    func.displayName = `PlasmicAuthForm.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthForm = Object.assign(
  // Top-level PlasmicAuthForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    credentialsForm: makeNodeComponent("credentialsForm"),
    textInput: makeNodeComponent("textInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    button: makeNodeComponent("button"),
    lottie: makeNodeComponent("lottie"),

    // Metadata about props expected for PlasmicAuthForm
    internalVariantProps: PlasmicAuthForm__VariantProps,
    internalArgProps: PlasmicAuthForm__ArgProps
  }
);

export default PlasmicAuthForm;
/* prettier-ignore-end */
